<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Git</title><link>https://progrhy.me/tech-notes/a/software/git/</link><description>Recent content in Git on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 27 Apr 2020 23:03:01 +0900</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/software/git/index.xml" rel="self" type="application/rss+xml"/><item><title>A: gitコマンド</title><link>https://progrhy.me/tech-notes/a/software/git/cli/</link><pubDate>Mon, 25 May 2020 03:03:50 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/software/git/cli/</guid><description>
&lt;p>当面、このページはリファレンス的に各サブコマンドの解説など記す。&lt;br>
ユースケースについては&lt;a href="https://progrhy.me/tech-notes/a/software/git/#how-to">Git#How-to&lt;/a>を参照。&lt;/p>
&lt;h2 id="参考資料">参考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/konweb/items/621722f67fdd8f86a017">【Git】基本コマンド - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="apply">apply&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">## git diffコマンドで作ったpatchを適用する&lt;/span>
git apply file.patch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://maku77.github.io/git/git-patch.html">Git でパッチファイルを作成する | まくまくGitノート&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="archive">archive&lt;/h2>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>tar を使わないとファイルに実行ビットがついてしまうようだ。&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/usamik26/items/9a2d14aea30cb01a60c6" title="Git リポジトリの内容を zip ファイルにする - Qiita">Git リポジトリの内容を zip ファイルにする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="branch">branch&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-branch">https://git-scm.com/docs/git-branch&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># ローカルのbranchを表示&lt;/span>
git branch
&lt;span style="color:#8f5902;font-style:italic">## マージ済みのbranchを表示&lt;/span>
git branch --merged
&lt;span style="color:#8f5902;font-style:italic">## 出力フォーマット指定&lt;/span>
git branch --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;FORMAT&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## 追跡branchも含めて表示&lt;/span>
git branch -vv
&lt;span style="color:#8f5902;font-style:italic"># 今のbranchを元に新しいbranchを作る&lt;/span>
git branch &amp;lt;newbranch&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 既存のbranchを元に新しいbranchを作る&lt;/span>
git branch &amp;lt;oldbranch&amp;gt; &amp;lt;newbranch&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 追跡ブランチを設定&lt;/span>
git branch -u&lt;span style="color:#000;font-weight:bold">|&lt;/span>--set-upstream-to origin/&amp;lt;branch&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>--format&lt;/code> オプションで指定できるフォーマットについては&lt;a href="#for-each-ref">git-for-each-ref&lt;/a>を見よ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kz_morita/items/c624f8cf27ec82de0baa">gitでローカルのブランチが追跡しているリモートブランチを確認する方法 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="checkout">checkout&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">## topicブランチを作成&lt;/span>
git checkout -b topic
&lt;span style="color:#8f5902;font-style:italic">## remoteブランチからローカルブランチを作成&lt;/span>
git checkout -b foo origin/foo
&lt;span style="color:#8f5902;font-style:italic">## 空ブランチを作る&lt;/span>
git checkout --orphan empty
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/akiko-pusu/items/7c0a99b8cb37882d2cfe" title="gitの空ブランチを作る - Qiita">gitの空ブランチを作る - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cherry-pick">cherry-pick&lt;/h2>
&lt;p>別ブランチで開発中の機能などをコミット単位で取り込むときに使う。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git cherry-pick &amp;lt;SHA1&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## マージコミットのcherry-pick&lt;/span>
git cherry-pick -m &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;lt;SHA1&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/takc923/items/8e2d87d692f840b14464" title="merge commitをcherry-pickする - Qiita">merge commitをcherry-pickする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="clone">clone&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-clone">https://git-scm.com/docs/git-clone&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">## 深さ1の shallow clone&lt;/span>
git clone --depth &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;lt;URL&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## ブランチ指定&lt;/span>
git clone --branch BRANCH URL
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="commit">commit&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-commit">https://git-scm.com/docs/git-commit&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 変更・削除したファイルを全てコミットする&lt;/span>
git commit --&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>a&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>ll
&lt;span style="color:#8f5902;font-style:italic"># 変更点を表示してコミット&lt;/span>
git commit -v
&lt;span style="color:#8f5902;font-style:italic"># 空コミット&lt;/span>
git commit --allow-empty
&lt;span style="color:#8f5902;font-style:italic"># コミットメッセージを変更&lt;/span>
git commit --amend
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="config">config&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-config">https://git-scm.com/docs/git-config&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 特定のキーの値を取得&lt;/span>
git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--get&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &amp;lt;key&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## 例&lt;/span>
git config &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--get&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> remote.origin.url
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="diff">diff&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">## スペース等の差分を無視&lt;/span>
git diff -w
&lt;span style="color:#8f5902;font-style:italic">## ファイル名のみ表示&lt;/span>
git diff --name-only
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://inaz2.hatenablog.com/entry/2014/07/03/003551">colordiffを使わずにdiffをカラー表示する - ももいろテクノロジー&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="fetch">fetch&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-fetch">https://git-scm.com/docs/git-fetch&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git fetch &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Options...&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## remote で削除された branch について、local のトラッキングブランチも消す&lt;/span>
git fetch -p&lt;span style="color:#000;font-weight:bold">|&lt;/span>--prune
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>-f, --force&lt;/code>&lt;/td>
&lt;td>ローカルブランチやタグの更新が拒否されるのを防ぐ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--tags&lt;/code>&lt;/td>
&lt;td>リモートのタグを取得&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/58031165/how-to-get-rid-of-would-clobber-existing-tag">git - How to get rid of &amp;quot;would clobber existing tag&amp;quot; - Stack Overflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="for-each-ref">for-each-ref&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-for-each-ref">https://git-scm.com/docs/git-for-each-ref&lt;/a>&lt;/p>
&lt;p>local branch, remote branchのHEAD, tagの情報を表示。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># A simple example showing the use of shell eval on the output, demonstrating the use of --shell.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># List the prefixes of all heads:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#!/bin/sh&lt;/span>
git &lt;span style="color:#204a87;font-weight:bold">for&lt;/span>-each-ref --shell --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ref=%(refname)&amp;#34;&lt;/span> refs/heads &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#204a87">read&lt;/span> entry&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$entry&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">`&lt;/span>dirname &lt;span style="color:#000">$ref&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>FORMATで指定できるフィールド:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>フィールド&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>refname&lt;/code>&lt;/td>
&lt;td>The name of the ref (the part after $GIT_DIR/).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>refname:short&lt;/code>&lt;/td>
&lt;td>branch, tagなど明らかな名前がついているものはこれで参照できる&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>objecttype&lt;/code>&lt;/td>
&lt;td>blob, tree, commit, tag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>objectsize&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>objectname&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="log">log&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-log">https://git-scm.com/docs/git-log&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">## 過去のコミットから対象文字列を含むコミットを検索&lt;/span>
git log -S 文字列
&lt;span style="color:#8f5902;font-style:italic">## 1行で表示&lt;/span>
git log --pretty&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>oneline
git log --oneline --graph --decorate
&lt;span style="color:#8f5902;font-style:italic">## フォーマット指定&lt;/span>
git log --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%H&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># full commit hash のみ&lt;/span>
git log --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%h %s&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># short hash + title&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>--[no-]decorate&lt;/code>&lt;/td>
&lt;td>ref nameの表示有無を設定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--decorate-refs={tags,heads,remotes}&lt;/code>&lt;/td>
&lt;td>%D, %dで表示するものを制御する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>書式については &lt;a href="https://git-scm.com/docs/git-log#_pretty_formats">Git - git-log Documentation#PRETTY-FORMATS&lt;/a>辺りに詳しく書かれている。&lt;/p>
&lt;p>一部の例:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>書式&lt;/th>
&lt;th>内容&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>%H&lt;/td>
&lt;td>コミットハッシュ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%h&lt;/td>
&lt;td>コミットハッシュ（短縮版）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%s&lt;/td>
&lt;td>件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%D&lt;/td>
&lt;td>ref name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%d&lt;/td>
&lt;td>ref name&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%83%AA%E3%83%93%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E9%81%B8%E6%8A%9E" title="Git - リビジョンの選択">Git - リビジョンの選択&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://heart-shaped-chocolate.hatenablog.jp/entry/2013/07/16/035104">git logのオプションあれこれ - 煙と消えるその前に&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://qiita.com/key-amb/items/9ee8339d2da971581cfb">git log をいい感じに alias して色付きで見やすくしておく - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/harukasan/items/9149542584385e8dea75">git logのフォーマットを指定する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/isuke/items/35b192b0899872aa7b03">&lt;code>git log --pretty=format&lt;/code> で tagを表示する方法 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="pull">pull&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-pull">https://git-scm.com/docs/git-pull&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># リファレンスには書いてないが、fetch時に--pruneしてくれるらしい&lt;/span>
git pull --prune
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>効果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>--depth=N&lt;/code>&lt;/td>
&lt;td>取得する履歴数を制限する。shallowリポジトリの場合、履歴数を指定した数に増減させる&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>-r, --rebase[=VALUE]&lt;/code>&lt;/td>
&lt;td>&lt;code>VALUE&lt;/code> には false, true, merges, preserve, interactiveのいずれかを指定可能&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/git/#pull">Git#config-pull&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/yuichielectric/items/84cd61915a1236f19221">リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="rebase">rebase&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-rebase">https://git-scm.com/docs/git-rebase&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># （現在のブランチの）Nコミット前に遡って編集&lt;/span>
git rebase -i HEAD~N
&lt;span style="color:#8f5902;font-style:italic"># 特定のコミットを除くそれ以降の履歴を編集&lt;/span>
git rebase -i &amp;lt;after-this-commit&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 1st コミットから編集&lt;/span>
git rebase -i --root
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>masterにtopicブランチをマージした後で &lt;code>git rebase -i HEAD~N&lt;/code> とやると、topicブランチの履歴は数に数えられないので注意&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://d.hatena.ne.jp/ken_c_lo/20130421/1366558065" title="First commit が git rebase -i できない問題 → git rebase -i --root でできる - 納豆には卵を入れる派です。">First commit が git rebase -i できない問題 → git rebase -i &amp;ndash;root でできる - 納豆には卵を入れる派です。&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="remote">remote&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote&lt;/a>&lt;/p>
&lt;p>リモートリポジトリの管理。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># リモートリポジトリ一覧&lt;/span>
git remote
git remote -v
&lt;span style="color:#8f5902;font-style:italic"># リモートリポジトリ追加&lt;/span>
git remote add &amp;lt;リポジトリ名&amp;gt; &amp;lt;URL&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># リモートリポジトリ削除&lt;/span>
git remote rm &amp;lt;リポジトリ名&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># URL変更&lt;/span>
git remote set-url &amp;lt;リポジトリ名&amp;gt; &amp;lt;URL&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># リポジトリ名変更&lt;/span>
git remote rename &amp;lt;リポジトリ名&amp;gt; &amp;lt;新しいリポジトリ名&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># remote groupに属するブランチをfetchする&lt;/span>
git remote update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.sejuku.net/blog/71492">これで完璧! git remoteでリポジトリを【追加,削除,確認,変更】 | 侍エンジニア塾ブログ（Samurai Blog） - プログラミング入門者向けサイト&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverrun.com/ja/q/4825185">「git remote update」と「git fetch」と「git pull」の違いは何ですか？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="revert">revert&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git revert &amp;lt;SHA1&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## マージコミットの取消し&lt;/span>
git revert -m &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &amp;lt;SHA1&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/git/git/blob/master/Documentation/howto/revert-a-faulty-merge.txt">https://github.com/git/git/blob/master/Documentation/howto/revert-a-faulty-merge.txt&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/koba04/20121122/1353512656" title="gitのmerge-commitをrevertする - 車輪を再発明 / koba04の日記">gitのmerge-commitをrevertする - 車輪を再発明 / koba04の日記&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="rev-list">rev-list&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-rev-list">https://git-scm.com/docs/git-rev-list&lt;/a>&lt;/p>
&lt;p>コミットオブジェクトを新しいものから順に表示する。&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># masterにないコミットを表示&lt;/span>
git rev-list master...HEAD
&lt;span style="color:#8f5902;font-style:italic"># upstreamとの間にあるコミットを検出&lt;/span>
git rev-list HEAD...HEAD@&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>upstream&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;ndash;count&lt;/td>
&lt;td>コミットの数を表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="show-ref">show-ref&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-show-ref">https://git-scm.com/docs/git-show-ref&lt;/a>&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ git show-ref
ccdda98f76466a7fe19a7ed1b99f4dbc0f9aff2d refs/heads/master
ccdda98f76466a7fe19a7ed1b99f4dbc0f9aff2d refs/remotes/origin/HEAD
58f3ac4dc2e1b893bbacb09fa300244dc95ab3e5 refs/remotes/origin/gh-pages
ccdda98f76466a7fe19a7ed1b99f4dbc0f9aff2d refs/remotes/origin/master
$ git show-ref --tags --abbrev
4eb72e6 refs/tags/v0.1.0
f0edeb9 refs/tags/v0.2.0
e711338 refs/tags/v0.3.0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="submodule">submodule&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-submodule">https://git-scm.com/docs/git-submodule&lt;/a>&lt;/p>
&lt;p>なんだかんだで割りと使っている。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># submodule追加&lt;/span>
git submodule add &amp;lt;git-url&amp;gt; &amp;lt;local-path&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 全submodule更新&lt;/span>
git submodule foreach git pull origin master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>sumobuleの削除 =&amp;gt; &lt;a href="https://github.com/progrhyme/git-wraps/blob/master/bin/git-submodule-delete">https://github.com/progrhyme/git-wraps/blob/master/bin/git-submodule-delete&lt;/a>&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/sotarok/items/0d525e568a6088f6f6bb" title="Git submodule の基礎 - Qiita">Git submodule の基礎 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://qiita.com/kshimo69/items/ac22d414d756ea08943f" title="git submoduleしてるリポジトリをリモートの最新に更新する - Qiita">git submoduleしてるリポジトリをリモートの最新に更新する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="向き先url変更">向き先url変更&lt;/h3>
&lt;ol>
&lt;li>&lt;code>.gitmodules&lt;/code> の向き先を新urlに変更&lt;/li>
&lt;li>&lt;code>git submodule sync&lt;/code> で反映
&lt;ul>
&lt;li>&lt;code>.git/config&lt;/code> に変更が反映される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git submodule update&lt;/code> とかで更新&lt;/li>
&lt;/ol>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/8mamo10/items/fd11d8c7a2d928b39173" title="submodule の向き先 url を変更する - Qiita">submodule の向き先 url を変更する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="symbolic-ref">symbolic-ref&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-symbolic-ref">https://git-scm.com/docs/git-symbolic-ref&lt;/a>&lt;/p>
&lt;p>symbolic refの読み取り、変更、削除コマンド。&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ git symbolic-ref HEAD
refs/heads/master
$ git symbolic-ref --short HEAD
master
&lt;span style="color:#8f5902;font-style:italic"># デフォルトブランチの取得&lt;/span>
$ git symbolic-ref --short refs/remotes/origin/HEAD
origin/master
$ git checkout v1.0 &lt;span style="color:#8f5902;font-style:italic"># switch to tag = &amp;#39;detached HEAD&amp;#39;&lt;/span>
$ git symbolic-ref HEAD
fatal: ref HEAD is not a symbolic ref
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>機能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>-q, --quiet&lt;/code>&lt;/td>
&lt;td>エラー時にメッセージ出力しない&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tag">tag&lt;/h2>
&lt;p>&lt;a href="https://git-scm.com/docs/git-tag">https://git-scm.com/docs/git-tag&lt;/a>&lt;/p>
&lt;p>SYNOPSIS:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 作成&lt;/span>
git tag &amp;lt;タグ名&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## 注釈付き&lt;/span>
git tag -a &amp;lt;タグ名&amp;gt; -m &amp;lt;メッセージ&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 表示&lt;/span>
git show &amp;lt;タグ名&amp;gt;
&lt;span style="color:#8f5902;font-style:italic">## 一覧&lt;/span>
git tag
&lt;span style="color:#8f5902;font-style:italic">## 指定されたオブジェクトのタグのみ表示&lt;/span>
git tag --points-at &amp;lt;object&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 削除&lt;/span>
git tag -d &amp;lt;タグ名&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># リモートに反映&lt;/span>
git push &amp;lt;リモート&amp;gt; &amp;lt;タグ名&amp;gt;
git push --tags
&lt;span style="color:#8f5902;font-style:italic"># 削除反映&lt;/span>
git push &amp;lt;リモート&amp;gt; :&amp;lt;タグ名&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/chihiro/items/cba40015b1aa2c73b78a">【Git】tag関連コマンド - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>