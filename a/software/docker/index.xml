<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Docker</title><link>https://progrhy.me/tech-notes/a/software/docker/</link><description>Recent content in Docker on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 29 Apr 2020 11:59:18 +0900</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/software/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>A: Dockerfile</title><link>https://progrhy.me/tech-notes/a/software/docker/dockerfile/</link><pubDate>Wed, 29 Apr 2020 12:47:27 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/software/docker/dockerfile/</guid><description>
&lt;ul>
&lt;li>公式リファレンス: &lt;a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/&lt;/a>&lt;/li>
&lt;li>邦訳: &lt;a href="http://docs.docker.jp/engine/reference/builder.html" title="Dockerfile リファレンス — Docker-docs-ja ドキュメント">Dockerfile リファレンス — Docker-docs-ja ドキュメント&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ベストプラクティス">ベストプラクティス&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&lt;/a>
&lt;ul>
&lt;li>邦訳: &lt;a href="http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html">http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.slideshare.net/ssuser1f3c12/introduce-that-best-practices-for-writing-dockerfiles">Introduce that Best practices for writing Dockerfiles&lt;/a> &amp;hellip; 2018年12月Japan Container Daysでのモリハヤさんの発表&lt;/li>
&lt;li>&lt;a href="http://qiita.com/pottava/items/452bf80e334bc1fee69a" title="効率的に安全な Dockerfile を作るには - Qiita">効率的に安全な Dockerfile を作るには - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="addとcopy">ADDとCOPY&lt;/h3>
&lt;p>&lt;a href="http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html#add-copy">http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html#add-copy&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;code>COPY&lt;/code> で間に合うときは &lt;code>COPY&lt;/code> を使うべき&lt;/li>
&lt;li>&lt;code>ADD&lt;/code> は圧縮ファイルの展開などの機能もある&lt;/li>
&lt;/ul>
&lt;h2 id="dockerignore">.dockerignore&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.jp/engine/reference/builder.html#dockerignore">https://docs.docker.jp/engine/reference/builder.html#dockerignore&lt;/a>&lt;/p>
&lt;p>ADDやCOPYによってDockerイメージに含めたくないファイルを記しておく。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/munisystem/items/b0f08b28e8cc26132212">.dockerignore アンチパターン - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;h3 id="環境変数の利用">環境変数の利用&lt;/h3>
&lt;p>&lt;a href="http://docs.docker.jp/engine/reference/builder.html#environment-replacement">http://docs.docker.jp/engine/reference/builder.html#environment-replacement&lt;/a>&lt;/p>
&lt;ul>
&lt;li>全てではないが、一部の命令で環境変数の利用がサポートされている。&lt;/li>
&lt;li>&lt;code>ENV&lt;/code> 命令で環境変数をセットすることもできる。&lt;/li>
&lt;li>コンテナ実行時に環境変数をセットする際は &lt;code>docker run&lt;/code> に &lt;code>-e KEY=${VALUE}&lt;/code> の形で渡す。
&lt;ul>
&lt;li>これらを &lt;code>CMD&lt;/code> や &lt;code>ENTRYPOINT&lt;/code> で解釈する際は、exec形式(= &lt;code>[&amp;quot;実行コマンド&amp;quot;, &amp;quot;引数&amp;quot;...]&lt;/code>の形式)では展開されないため、シェル形式(= &lt;code>実行コマンド 引数...&lt;/code>)で記す必要がある。&lt;/li>
&lt;li>または、ラッパースクリプトを指定するという手もアリだろう。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="instructions">Instructions&lt;/h3>
&lt;h4 id="cmd">CMD&lt;/h4>
&lt;p>コンテナのデフォルトの実行コマンド、またはその引数を指定する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;実行ファイル&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ARG1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ARG2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">...&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># exec実行形式&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ARG1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ARG2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">...&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># ENTRYPOINTのデフォルト引数&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &amp;lt;コマンド...&amp;gt; &lt;span style="color:#8f5902;font-style:italic"># シェル形式&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>２番目は &lt;code>ENTRYPOINT&lt;/code> を指定した時、その引数となる。
&lt;ul>
&lt;li>&lt;code>docker run &amp;lt;コンテナ&amp;gt; 引数...&lt;/code> として上書きできる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1, 3番目の形式は &lt;code>ENTRYPOINT&lt;/code> と一緒には指定できない（はず…）
&lt;ul>
&lt;li>シェル形式の場合、 &lt;code>/bin/sh -c&lt;/code> で起動されるようだ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="entrypoint">ENTRYPOINT&lt;/h4>
&lt;p>コンテナのデフォルトの実行コマンドを指定する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;実行ファイル&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ARG1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ARG2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">...&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># exec形式&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> 実行ファイル ARG1 ARG2 ... &lt;span style="color:#8f5902;font-style:italic"># シェル形式&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>上書きするには &lt;code>--entrypoint &amp;lt;コマンド...&amp;gt;&lt;/code> とする。&lt;/li>
&lt;li>シェル形式の場合、 &lt;code>/bin/sh -c&lt;/code> で起動されるようだ&lt;/li>
&lt;li>&lt;code>CMD&lt;/code> でデフォルト引数を与えると、 &lt;code>ENTRYPOINT&lt;/code> として指定した「コマンド + 引数」の後に &lt;code>CMD&lt;/code> として与えた引数がくっつく。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> ubuntu&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;top&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-b&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;-c&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコンテナを &lt;code>docker run&lt;/code> で動かすと、 &lt;code>top -b -c&lt;/code> が実行される。&lt;/p>
&lt;p>&lt;code>CMD&lt;/code> の方はコマンドラインで普通に上書きされる。&lt;br>
上のDockerfileを &lt;code>ubuntu-top&lt;/code> としてビルドして例を示す:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker run --rm -it ubuntu-top &lt;span style="color:#8f5902;font-style:italic"># top -b -c が実行される&lt;/span>
docker run --rm -it ubuntu-top -n &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># top -b -n 1 が実行される&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pocketstudio.net/2020/01/31/cmd-and-entrypoint/">ENTRYPOINTは「必ず実行」、CMDは「（デフォルトの）引数」 | ポケテク&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="volume">VOLUME&lt;/h4>
&lt;p>&lt;code>docker run&lt;/code> の &lt;code>-v&lt;/code> オプションに相当。&lt;br>
ホストのディレクトリをコンテナにマウントする。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/namutaka/items/f6a574f75f0997a1bb1d">DockerのVolume機能について実験してみたことをまとめます - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tips">Tips&lt;/h2>
&lt;h3 id="cmdとentrypointがどう作用するか">CMDとENTRYPOINTがどう作用するか&lt;/h3>
&lt;p>&lt;a href="http://docs.docker.jp/engine/reference/builder.html#cmd-entrypoint">http://docs.docker.jp/engine/reference/builder.html#cmd-entrypoint&lt;/a>&lt;/p></description></item><item><title>A: dockerコマンド</title><link>https://progrhy.me/tech-notes/a/software/docker/cmd/</link><pubDate>Wed, 29 Apr 2020 12:07:33 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/software/docker/cmd/</guid><description>
&lt;p>リファレンス: &lt;a href="https://docs.docker.com/engine/reference/commandline/cli/">https://docs.docker.com/engine/reference/commandline/cli/&lt;/a>&lt;/p>
&lt;h2 id="v1703でのコマンド体系再編について">v17.0.3でのコマンド体系再編について&lt;/h2>
&lt;p>2017年1月にリリースされたv1.13（v17.0.3）でコマンド体系が再編された。&lt;br>
古いコマンドも2020年4月現在では、まだ使えるものが多そうだが、注意が必要。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/zembutsu/items/6e1ad18f0d548ce6c266" title="docker container / image コマンド新旧比較 - Qiita">docker container / image コマンド新旧比較 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="チートシート">チートシート&lt;/h2>
&lt;h3 id="version-helpの確認">version, helpの確認&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># Help&lt;/span>
docker --help
docker &amp;lt;COMMAND&amp;gt; --help
&lt;span style="color:#8f5902;font-style:italic"># client/server version 表示&lt;/span>
docker version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See also &lt;a href="https://docs.docker.com/engine/reference/commandline/version/">https://docs.docker.com/engine/reference/commandline/version/&lt;/a>&lt;/p>
&lt;h3 id="コンテナの起動実行">コンテナの起動（実行）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># コマンド実行&lt;/span>
% docker run ubuntu /bin/echo &lt;span style="color:#4e9a06">&amp;#34;Hello, world&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; Hello, world&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># bash を起動し、インタラクティブモードになる&lt;/span>
% docker run -it ubuntu /bin/bash
root@b171dd1d7831:/#
&lt;span style="color:#8f5902;font-style:italic"># バックグラウンドで hello world を1秒おきに出力し続ける&lt;/span>
% docker run -d ubuntu /bin/sh -c &lt;span style="color:#4e9a06">&amp;#34;while true; do echo hello world; sleep 1; done&amp;#34;&lt;/span>
c6e58ecccfdb5640938443911f85fa301338e0063afe1a13ab0ffc7c93aa7f5f &lt;span style="color:#8f5902;font-style:italic"># container id&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Web サーバをホストのエフェメラルポートで動かす&lt;/span>
docker run -dP training/webapp python app.py
&lt;span style="color:#8f5902;font-style:italic"># Web サーバをホストの 80番ポートで動かす&lt;/span>
docker run -d -p 80:5000 training/webapp python app.py
&lt;span style="color:#8f5902;font-style:italic"># Web サーバを &amp;#34;web&amp;#34; という名前で動かす&lt;/span>
docker run -dP --name web training/webapp python app.py
&lt;span style="color:#8f5902;font-style:italic"># Postgres サーバを &amp;#34;db&amp;#34; を、独自ネットワーク上で起動&lt;/span>
docker run -d --net my-network --name db training/postgres
&lt;span style="color:#8f5902;font-style:italic"># Web サーバに /webapp というボリュームを作って起動&lt;/span>
docker run -dP --name web -v /webapp training/webapp python app.py
&lt;span style="color:#8f5902;font-style:italic"># + ホストのマウントパス指定&lt;/span>
docker run -dP --name web -v /var/lib/docker/volumes/data-webapp:/opt/webapp training/webapp python app.py
&lt;span style="color:#8f5902;font-style:italic"># + ホストの共有領域のデータボリュームをディレクトリ名で指定(パスは上と同じになる)&lt;/span>
docker run -dP --name web -v data-webapp:/opt/webapp training/webapp python app.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See also &lt;a href="#run">run&lt;/a>&lt;/p>
&lt;h3 id="コンテナ操作run-以外">コンテナ操作(run 以外)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># コンテナを作成するが起動しない。オプションは run に似ている&lt;/span>
docker create &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &amp;lt;IMAGE&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>COMMAND&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 停止&lt;/span>
docker stop &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 再起動&lt;/span>
docker start &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 強制停止&lt;/span>
docker &lt;span style="color:#204a87">kill&lt;/span> &lt;span style="color:#000">$ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナ上でインタラクティブシェル(bash)実行&lt;/span>
docker &lt;span style="color:#204a87">exec&lt;/span> -it db bash
&lt;span style="color:#8f5902;font-style:italic"># 作成した停止済みのコンテナを削除&lt;/span>
docker rm &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 停止しているコンテナの全削除。動作中のものはエラーになる&lt;/span>
docker rm &lt;span style="color:#4e9a06">`&lt;/span>docker ps -a -q&lt;span style="color:#4e9a06">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="コンテナの情報を見る">コンテナの情報を見る&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 動作中のコンテナ表示&lt;/span>
docker ps
&lt;span style="color:#8f5902;font-style:italic"># 停止しているものも含めて表示&lt;/span>
docker ps -a
&lt;span style="color:#8f5902;font-style:italic"># 停止していようがいまいが一番最近動かしたやつを表示&lt;/span>
docker ps -l
&lt;span style="color:#8f5902;font-style:italic"># top&lt;/span>
docker top &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナにマッピングされたホストのポートを表示&lt;/span>
docker port &lt;span style="color:#000">$NAME_OR_ID&lt;/span> &amp;lt;PORT&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># ログ表示&lt;/span>
docker logs &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># ログを tail -f する&lt;/span>
docker logs -f &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナの情報を JSON で dump&lt;/span>
docker inspect &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># + クエリで情報を絞り込む例 x 2:&lt;/span>
docker inspect --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{{json .NetworkSettings.Networks}}&amp;#39;&lt;/span> &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
docker inspect --format&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span> &lt;span style="color:#000">$NAME_OR_ID&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="コンテナのイメージ操作">コンテナのイメージ操作&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 変更を施したコンテナからイメージを作成する&lt;/span>
docker commit -m &lt;span style="color:#4e9a06">&amp;#34;変更についてのコメント&amp;#34;&lt;/span> -a &lt;span style="color:#4e9a06">&amp;#34;名前 &amp;lt;メアド&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#000">$NAME_OR_ID&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;リポジトリ&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>:タグ&lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Dockerfile からイメージ作成&lt;/span>
docker build -t リポジトリ:タグ path/to/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Dockerfile&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># イメージにタグを付ける&lt;/span>
docker tag &lt;span style="color:#000">$IMAGE_ID&lt;/span> リポジトリ:タグ
&lt;span style="color:#8f5902;font-style:italic"># リポジトリにあるイメージを検索&lt;/span>
docker search &amp;lt;キーワード&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># イメージをリポジトリから取得&lt;/span>
docker pull &amp;lt;イメージ&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># イメージをリポジトリに push&lt;/span>
docker push リポジトリ
&lt;span style="color:#8f5902;font-style:italic"># ローカルにあるイメージ一覧&lt;/span>
docker images
&lt;span style="color:#8f5902;font-style:italic"># イメージ削除&lt;/span>
docker rmi &lt;span style="color:#000">$ID&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="データボリューム操作">データボリューム操作&lt;/h3>
&lt;p>See &lt;a href="#volume">volume&lt;/a>&lt;/p>
&lt;h3 id="ネットワーク操作">ネットワーク操作&lt;/h3>
&lt;p>See &lt;a href="#network">network&lt;/a>&lt;/p>
&lt;h3 id="不要なイメージボリューム等の掃除">不要なイメージ・ボリューム等の掃除&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 停止したコンテナを削除&lt;/span>
docker container prune
&lt;span style="color:#8f5902;font-style:italic"># 不要ボリュームを削除&lt;/span>
docker volume prune
&lt;span style="color:#8f5902;font-style:italic"># 古いイメージなどを削除&lt;/span>
docker image prune
&lt;span style="color:#8f5902;font-style:italic"># ネットワークの掃除&lt;/span>
docker network prune
&lt;span style="color:#8f5902;font-style:italic"># まとめて掃除&lt;/span>
docker system prune
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ksato9700/items/b0075dc54dfffc64b999">Dockerのあれこれを断捨離する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.memotansu.jp/docker/840/">docker volume pruneコマンドの使い方（実例付）CE対応 | めもたんす&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="リファレンス">リファレンス&lt;/h2>
&lt;h3 id="container">container&lt;/h3>
&lt;p>コンテナ操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># コンテナ一覧&lt;/span>
docker container ls &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-a&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナ停止&lt;/span>
docker container stop CONTAINER_ID_OR_NAME
&lt;span style="color:#8f5902;font-style:italic"># コンテナ削除&lt;/span>
docker container rm CONTAINER_ID_OR_NAME
&lt;span style="color:#8f5902;font-style:italic"># 停止したコンテナを全て削除&lt;/span>
docker container prune
&lt;span style="color:#8f5902;font-style:italic"># コンテナ上でインタラクティブシェル(bash)実行&lt;/span>
docker container &lt;span style="color:#204a87">exec&lt;/span> -it CONTAINER_ID_OR_NAME bash
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cp">cp&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/cp/">https://docs.docker.com/engine/reference/commandline/cp/&lt;/a>&lt;/p>
&lt;p>ホスト - コンテナ間でファイル/ディレクトリのコピー&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker cp &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> CONTAINER:SRC_PATH DEST_PATH&lt;span style="color:#000;font-weight:bold">|&lt;/span>-
docker cp &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> SRC_PATH&lt;span style="color:#000;font-weight:bold">|&lt;/span>- CONTAINER:DEST_PATH
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="image">image&lt;/h3>
&lt;p>イメージ操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 一覧&lt;/span>
docker image list &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-a&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Dockerfile からイメージ作成&lt;/span>
docker image build -t リポジトリ:タグ &amp;lt;Dockerfileがあるディレクトリ&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># イメージ削除&lt;/span>
docker image rm IMAGE_ID
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="network">network&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/&lt;/a>&lt;/p>
&lt;p>ネットワークの管理&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># ネットワーク一覧&lt;/span>
docker network ls
&lt;span style="color:#8f5902;font-style:italic"># 特定ネットワークの情報表示&lt;/span>
docker network inspect &lt;span style="color:#000">$NW_NAME&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナをネットワークから切断&lt;/span>
docker network disconnect &lt;span style="color:#000">$NW_NAME&lt;/span> &lt;span style="color:#000">$CONTAINER_NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># コンテナをネットワークに接続&lt;/span>
docker network connect &lt;span style="color:#000">$NW_NAME&lt;/span> &lt;span style="color:#000">$CONTAINER_NAME_OR_ID&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 独自ネットワークを作成&lt;/span>
docker network create -d &lt;span style="color:#000">$DRIVER&lt;/span> &lt;span style="color:#000">$NW_NAME&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="run">run&lt;/h3>
&lt;p>run はコンテナ起動コマンド。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">オプション&lt;/th>
&lt;th style="text-align:left">意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">-d, &amp;ndash;detach&lt;/td>
&lt;td style="text-align:left">バックグラウンドでコンテナを動かす&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-e, &amp;ndash;env&lt;/td>
&lt;td style="text-align:left">環境変数を1つずつ指定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;env-file &lt;file>&lt;/td>
&lt;td style="text-align:left">ファイルを指定して、環境変数を設定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-i, &amp;ndash;interactive&lt;/td>
&lt;td style="text-align:left">STDIN を開く&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;name NAME&lt;/td>
&lt;td style="text-align:left">コンテナに名前をつける&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;net NW&lt;/td>
&lt;td style="text-align:left">ネットワーク NW に配置する。未指定だとデフォルトのネットワークになる&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-P, &amp;ndash;publish-all&lt;/td>
&lt;td style="text-align:left">コンテナが外部に開くポートをすべてランダムにホストのエフェメラルポートに割当てる&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-p, &amp;ndash;publish=[]&lt;/td>
&lt;td style="text-align:left">ポートを指定してポートを公開する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;privileged&lt;/td>
&lt;td style="text-align:left">特権を付与&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;restart=&amp;lt;string&amp;gt;&lt;/td>
&lt;td style="text-align:left">コンテナが既に存在するときの再起動ポリシー。デフォルトは &lt;code>no&lt;/code>. 他に &lt;code>always&lt;/code> が指定可能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;ndash;rm&lt;/td>
&lt;td style="text-align:left">コンテナ停止時に削除&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-t, &amp;ndash;tty&lt;/td>
&lt;td style="text-align:left">TTY 割当て&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">-v, &amp;ndash;volume=[]&lt;/td>
&lt;td style="text-align:left">データボリュームのマウント&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="volume">volume&lt;/h3>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/commandline/volume/">https://docs.docker.com/engine/reference/commandline/volume/&lt;/a>&lt;/p>
&lt;p>データボリュームの管理&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># ボリューム作成&lt;/span>
docker volume create &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># flocker driver を使い my-named-volume という名前で 20GB のボリュームを作成&lt;/span>
docker volume create -d flocker --name my-named-volume -o &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>20GB
&lt;span style="color:#8f5902;font-style:italic"># 一覧&lt;/span>
docker volume ls
&lt;span style="color:#8f5902;font-style:italic"># dangling volume をリスト&lt;/span>
docker volume ls -f &lt;span style="color:#000">dangling&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 削除&lt;/span>
docker volume rm &lt;span style="color:#000">$VOLUME_NAME&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;p>非公式リファレンス系:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/bungoume/items/b8911fd243d9c084bd63">Dockerチートシート - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://qiita.com/voluntas/items/68c1fd04dd3d507d4083">docker コマンド チートシート - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/hotta/69b476ae6662c5ff67f0">Dockerコマンドラインリファレンス&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>その他:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://blog.n-z.jp/blog/2013-12-24-docker-rm.html">Dockerで不要になったコンテナやイメージを削除する - @znz blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.tsugihagi.net/entry/2014/10/05/083120">(ヽ´ω&lt;code>) &amp;lt; DockerのOperation not permittedとの戦争 - (ヽ´ω&lt;/code>) &amp;lt; *****&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>