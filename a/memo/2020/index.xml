<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><description>Recent content in 2020 archive on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 01 Jan 2020 15:38:43 +0900</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/2020/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-12-02</title><link>https://progrhy.me/tech-notes/a/memo/2020/20201202/</link><pubDate>Wed, 02 Dec 2020 13:31:30 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20201202/</guid><description>
&lt;h2 id="122">12/2&lt;/h2>
&lt;h3 id="binqにargocdを追加">binqにargocdを追加&lt;/h3>
&lt;p>すっかり使い方が記憶の彼方だったが、過去ログとかGitHub Pages上の他の設定を見たらなんとかなった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binq new &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/argoproj/argo-cd/releases/download/v{{.Version}}/argocd-{{.OS}}-{{.Arch}}{{.BinExt}}&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v 1.7.10 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --rename &lt;span style="color:#4e9a06">&amp;#34;argocd-{{.OS}}-{{.Arch}}:argocd,argocd-{{.OS}}-{{.Arch}}.exe:argocd.exe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq register index/index.json tmp/argocd.json -p github.com/argoproj/argo-cd/index.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify github.com/argoproj/argo-cd/index.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify github.com/argoproj/argo-cd/index.json --os linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-10-02</title><link>https://progrhy.me/tech-notes/a/memo/2020/20201002/</link><pubDate>Fri, 02 Oct 2020 16:43:01 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20201002/</guid><description>
&lt;h2 id="102">10/2&lt;/h2>
&lt;h3 id="terraform-v013へのアップグレード">terraform v0.13へのアップグレード&lt;/h3>
&lt;p>最近、何度かv0.12からアップグレードする機会があった。&lt;br>
というか、tfenv等でバージョン固定してなかったために、不意にバージョンが上がってしまった。&lt;/p>
&lt;p>まずここを読んでから作業すべし:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.terraform.io/upgrade-guides/0-13.html">https://www.terraform.io/upgrade-guides/0-13.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本来あるべき手順:&lt;/p>
&lt;ol>
&lt;li>アップグレード前にterraform planで差分がないことを確認&lt;/li>
&lt;li>v0.13へアップグレード&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>適宜HCLを修正する。 &lt;code>required_providers&lt;/code> の追記については後述&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>アップグレード後にterraformを実行して問題ないことを確認&lt;/li>
&lt;/ol>
&lt;p>事前に差分を確認せずにアップグレードして、その後にterraform plan/applyすると、こういうエラーが出ることがある（あった）:&lt;/p>
&lt;pre tabindex="0">&lt;code>Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
Error: Provider configuration not present
To work with google_xxx.yyy its
original provider configuration at provider[&amp;#34;registry.terraform.io/-/google&amp;#34;]
is required, but it has been removed. This occurs when a provider
configuration is removed while objects created by that provider still exist in
the state. Re-add the provider configuration to destroy
google_xxx.yyy, after which you can remove the provider configuration again.
&lt;/code>&lt;/pre>&lt;p>ここで &lt;code>google_xxx.yyy&lt;/code> には色んなリソースが入ってくる。&lt;br>
こういうエラーがずらっと並んでいたのを見た。&lt;/p>
&lt;p>このエラーについては上のアップグレードガイドにも書いてあるが、tfstateにあるリソースがなくなっているケースが多いようだ。&lt;br>
ありがちなのは、コンソールやCLIでリソースを消して、terraform側に反映してないとか、そういうケース。&lt;/p>
&lt;p>対応としては、消していいものであれば、 &lt;code>terraform state rm google_xxx.yyy&lt;/code> でOK.&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/terraform/#v013">Terraform#v0.13&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="terraformrequired_providersエントリの追加">terraform.required_providersエントリの追加&lt;/h4>
&lt;p>必須ではないかもしれないが、利用するプロバイダをterraformブロックの中に記述するようになった。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> required_version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 0.13.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">required_providers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> google&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> source&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hashicorp/google&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 3.41&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> google-beta&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> source&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hashicorp/google-beta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 3.41&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-09-18</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200918/</link><pubDate>Fri, 18 Sep 2020 10:02:21 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200918/</guid><description>
&lt;h2 id="918">9/18&lt;/h2>
&lt;h3 id="binqにhelmを追加">binqにhelmを追加&lt;/h3>
&lt;p>&lt;a href="https://github.com/binqry/index/commit/ad137519978c9a5c1e1ba94b8d091563e99e8365">https://github.com/binqry/index/commit/ad137519978c9a5c1e1ba94b8d091563e99e8365&lt;/a>&lt;/p>
&lt;p>コマンドメモ&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>binq new &lt;span style="color:#4e9a06">&amp;#34;https://get.helm.sh/helm-v{{.Version}}-{{.OS}}-{{.Arch}}{{.Ext}}&amp;#34;&lt;/span> -e default:.tar.gz,windows:.zip -v 3.3.2 -f tmp/helm.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq register index/index.json tmp/helm.json -p helm/index.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># add checksum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify helm/index.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify helm/index.json --os linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># add v3.1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq revise helm/index.json -v 3.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify helm/index.json -v 3.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binq verify helm/index.json -v 3.1.1 --os linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rds-mysqlからgcp-cloud-sqlにレプリ可能か">RDS MySQLからGCP Cloud SQLにレプリ可能か？&lt;/h3>
&lt;p>Cloud SQLはVPCに対応しているので、AWS - GCPのVPCが閉域網でつながっていれば、閉域網通信で行けそうな気がする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/sql/docs/mysql/private-ip?hl=ja">プライベート IP | Cloud SQL for MySQL | Google Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>GCPのドキュメントだとPublic IPでつなぐ前提になっているようだ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/sql/docs/mysql/replication/replication-from-external?hl=ja#setup">外部サーバーから Cloud SQL への移行 | Cloud SQL for MySQL | Google Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>2019年12月 &lt;a href="https://qiita.com/hkame/items/9cff6117bc1763ac7810">Aurora-&amp;gt;CloudSQLへMySQLレプリケーションはできるのか - Qiita&lt;/a>&lt;/li>
&lt;li>2018年12月 &lt;a href="https://www.wantedly.com/companies/whiteplus/post_articles/148698">MySQLをRDSからCloud SQLに移行するときに考えたこと | ADVENT CALENDAR2018&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-08-28</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200828/</link><pubDate>Fri, 28 Aug 2020 16:49:31 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200828/</guid><description>
&lt;h2 id="828">8/28&lt;/h2>
&lt;h3 id="macosでecs-cliをセットアップ">macOSでecs-cliをセットアップ&lt;/h3>
&lt;h4 id="インストール">インストール&lt;/h4>
&lt;p>公式には書いてないが、Homebrewに対応していた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install amazon-ecs-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://formulae.brew.sh/formula/amazon-ecs-cli">https://formulae.brew.sh/formula/amazon-ecs-cli&lt;/a>&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ECS_CLI_installation.html">Amazon ECS CLI のインストール - Amazon Elastic Container Service&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="セットアップ">セットアップ&lt;/h4>
&lt;p>&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html">Amazon ECS CLI の設定 - Amazon Elastic Container Service&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>ecs-cli configure profile --profile-name PROFILE_NAME --access-key &lt;span style="color:#000">$AWS_ACCESS_KEY_ID&lt;/span> --secret-key &lt;span style="color:#000">$AWS_SECRET_ACCESS_KEY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ecs-cli configure --cluster CLUSTER --default-launch-type LAUNCH_TYPE --region REGION --config-name NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-07-30</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200730/</link><pubDate>Thu, 30 Jul 2020 11:02:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200730/</guid><description>
&lt;h2 id="730">7/30&lt;/h2>
&lt;h3 id="scp時にシェルが予期しない挙動をする">scp時にシェルが予期しない挙動をする&lt;/h3>
&lt;p>自分のdotfilesで考慮できていないのがよくない。&lt;br>
下を参考に設定を見直す:&lt;/p>
&lt;p>-&lt;a href="https://linux.just4fun.biz/?Linux%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/scp%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95%E3%83%BBbashrc%E7%B7%A8">Linux環境設定/scpができなくなった時の対処法・bashrc編 - Linuxと過ごす&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/montblanc18/items/b93fa4082e3bc2702a7f">.bashrc内にechoを入れておくとscpに失敗する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たぶん下のような感じで行けるのではないか:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> -t &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># ログイン&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># scpなど&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/10022323/check-isatty-in-bash">shell - check isatty in bash - Stack Overflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="731">7/31&lt;/h2>
&lt;h3 id="vs-code--pythonで内部モジュールのimportエラー">VS Code + Pythonで内部モジュールのimportエラー&lt;/h3>
&lt;p>&lt;code>oreno/modules&lt;/code> 以下に内部モジュールを置いているとする。&lt;br>
次の2設定でエラー回避できそう。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;python.autoComplete.extraPaths&amp;quot;: [&amp;quot;./oreno/modules&amp;quot;]&lt;/code>&lt;/li>
&lt;li>ワークスペースのルートに次の内容で pylintrc ファイルを作る:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>init-hook=&amp;#34;./oreno/modules&amp;#34;
&lt;/code>&lt;/pre>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kurikou02/items/beb3d638f93cc372b3c3">VSCodeで自作モジュールimport時のエラー表示(unresolved import &amp;lsquo;hoge&amp;rsquo;)が消えない - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/New_enpitsu_15/items/c1e680cc0c24cf87c581">VSCodeのPylintがimportでうざい！！！！ - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-07-18</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200718/</link><pubDate>Sat, 18 Jul 2020 14:40:19 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200718/</guid><description>
&lt;h2 id="718">7/18&lt;/h2>
&lt;h3 id="goreleaserでhomebrewのformulaを作るようにした">GoReleaserでHomebrewのFormulaを作るようにした&lt;/h3>
&lt;p>なんとそれができるということをつい昨日知った。&lt;/p>
&lt;p>See &lt;a href="https://progrhy.me/tech-notes/a/program/go/ecosystem/goreleaser/#homebrew-formula%E7%94%9F%E6%88%90">Golang &amp;gt; GoReleaser#Homebrew Formula生成&lt;/a>&lt;/p>
&lt;p>ひとまずbinq-ghで試してみたところ、上手く行った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/homebrew-taps/commit/fa4b730603f2a350220a4d345c4b2c4a245c60ca">https://github.com/progrhyme/homebrew-taps/commit/fa4b730603f2a350220a4d345c4b2c4a245c60ca&lt;/a> &amp;hellip; GoReleaserによるFormula更新&lt;/li>
&lt;li>&lt;a href="https://github.com/binqry/binq-gh/commit/e7012eb2f8dc72777c2ee4ee0fbfc45151e90f41">.goreleaser.ymlとGitHub Actionsの設定変更&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>homepage&lt;/code> の設定が漏れて空になってしまったが、修正済み。&lt;/p>
&lt;p>この後、binqとshelpも同様の設定を入れたので、もう手動でFormulaを更新する必要はなくなると思われる。&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>これ用に新しくPersonal Access Tokenを払い出した。公開リポジトリを更新するだけなので、権限は &lt;code>repo:public_repo&lt;/code> のみでOK
&lt;ul>
&lt;li>参考: &lt;a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/">Understanding scopes for OAuth Apps | GitHub Developer Guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secretの設定でこのAccess Tokenの名前に初め &lt;code>GITHUB_TOKEN_HOMEBREW_TAP&lt;/code> と付けようとしたら、エラーで設定できなかった。GitHubの仕様っぽい（？）&lt;/li>
&lt;/ul>
&lt;h2 id="719">7/19&lt;/h2>
&lt;h3 id="ubuntu-1804---2004-ltsにアップグレード">Ubuntu 18.04 -&amp;gt; 20.04 LTSにアップグレード&lt;/h3>
&lt;p>普段使いのデスクトップPCでアップグレードを行った。&lt;br>
7月に入ったらやろうと思っていたが、binqの開発を優先していたりして、今になった。&lt;/p>
&lt;p>参考にした記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.imuza.com/entry/ubuntu2004">Ubuntu 20.04 LTS にアップグレード - IMUZA.com&lt;/a>&lt;/li>
&lt;li>公式Wiki（日本語） &lt;a href="https://wiki.ubuntu.com/FocalFossa/ReleaseNotes/Ja">FocalFossa/ReleaseNotes/Ja - Ubuntu Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/hitobb/items/2ee9b1c2c49760976e0f">Ubuntu 18.04(LTS)→20.04(LTS)アップグレード方法 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前回（18.04アップグレード時）のログ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/2018/20180922/#ubuntu-1804-lts%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89">2018-09-22#Ubuntu 18.04 LTSにアップグレード&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以下、実施手順。&lt;/p>
&lt;h4 id="アップグレード実施手順と詳細">アップグレード実施手順と詳細&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo apt update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt upgrade
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt autoremove
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>※実際はパッケージは最新状態だったので、上のコマンド実行は不要だったと思われる。&lt;/p>
&lt;p>GUIの「ソフトウェアの更新」を確認したところ、Ubuntuの新バージョンの通知（LTS）は有効になっていたが、まだ通知は来ていなかった。&lt;/p>
&lt;p>結局、1つ目の参考記事に従い、「Alt + F2」を押した後、フォームに &lt;code>update-manager -c -d&lt;/code> を入力してEnterを押すと、20.04 LTSへのアップグレードが可能になった。&lt;/p>
&lt;p>新規追加されるパッケージが1,800弱あり、1時間弱は掛かった気がする。&lt;/p>
&lt;h5 id="etcsysctlconfのリセット">/etc/sysctl.confのリセット&lt;/h5>
&lt;p>途中でダイアログが出てきて、「なんかカスタマイズされてるけど、リセットしてもいい？」みたいなことを聞かれた。&lt;/p>
&lt;p>何やってたっけと思ってdiffを見ると、VS Codeで変更検知するために &lt;code>fs.inotify.max_user_watches&lt;/code> を引き上げていたのだった。&lt;br>
リセットによる差分はコメント行の変更しかなかったので、そのままにしておいてもらった。&lt;/p>
&lt;h4 id="アップグレード後の作業">アップグレード後の作業&lt;/h4>
&lt;h5 id="etcaptsourceslistの確認">/etc/apt/sources.listの確認&lt;/h5>
&lt;p>なんかアップグレード中に「デフォルトじゃないやつは無効にするから、必要なら後で足してね」みたいなメッセージがあったので、確認した。&lt;br>
元のやつは sources.list.save として残っているようだった。&lt;br>
差分を見たが特に独自に足したものはなかったようだったので、何もしない。&lt;br>
Dockerかpecoか何かで弄ってなかったっけ？&lt;/p>
&lt;h5 id="設定--外観">設定 &amp;gt; 外観&lt;/h5>
&lt;ul>
&lt;li>ダークモードが選べたので、それにした。&lt;/li>
&lt;li>アイコンサイズが小さくなってちょっと見づらかったので少し大きくした。&lt;/li>
&lt;/ul>
&lt;h5 id="テキストエディタ">テキストエディタ&lt;/h5>
&lt;p>中身はいつものgedit.&lt;br>
ダークモードにしたせいかカーソル位置が見づらくなったので、カラースキームをSolarized Lightにした。&lt;br>
ついでにフォントを見慣れたRoboto Mono for Powerlineに変えた。&lt;/p>
&lt;h5 id="xkbキーマップの設定">xkbキーマップの設定&lt;/h5>
&lt;p>いつものキーマップ変更:&lt;/p>
&lt;ul>
&lt;li>「変換」 -&amp;gt; 「全角/半角」&lt;/li>
&lt;li>「無変換」 -&amp;gt; 「Esc」&lt;/li>
&lt;li>「Esc」 -&amp;gt; 「無変換」&lt;/li>
&lt;li>「全角/半角」 -&amp;gt; 「変換」&lt;/li>
&lt;/ul>
&lt;p>設定手順: &lt;a href="https://keyamb.hatenablog.com/entry/2016/06/04/130022">Ubuntu + xkb で JISキーボードのキー配置入れ替え - weblog of key_amb&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 設定ファイルの編集&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo vim /usr/share/X11/xkb/symbols/inet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 設定の反映&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ setxkbmap -layout jp,us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>何かあればまたここに追記するかも。&lt;/p>
&lt;h3 id="slackアプリなどについて少し調べて触った">Slackアプリなどについて少し調べて触った&lt;/h3>
&lt;p>Slackアプリを作ったことがなかったが、Incoming WebhookもSlackアプリへの移行が推奨されているので、そろそろ多少はわかっておきたいと思った。&lt;/p>
&lt;p>やったこと:&lt;/p>
&lt;ul>
&lt;li>適当にアプリを作ってIncoming Webhookを有効にしてcurlでメッセージをPOST&lt;/li>
&lt;/ul>
&lt;p>これは思っていたよりずっと簡単だった。&lt;br>
Single-Workspaceで使うだけなら、あまり考えるべきことはなさそう。&lt;/p>
&lt;p>その他、調べたことは&lt;a href="https://progrhy.me/tech-notes/a/web-service/slack/">Webサービス &amp;gt; Slack&lt;/a>にまとめた。&lt;/p>
&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>GASでもOAuth 2.0に対応したエンドポイント（redirect url等）をそれっぽく作れば配布可能なアプリは作れそうな気がする&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-07-12</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200712/</link><pubDate>Sun, 12 Jul 2020 01:44:36 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200712/</guid><description>
&lt;h2 id="712">7/12&lt;/h2>
&lt;h3 id="hugoでmemo用のarchetypeを作る">Hugoでmemo用のarchetypeを作る&lt;/h3>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#archetypes">Hugo#Archetypes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上手く行ったパターン①:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ dateFormat &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; .Date }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">linkTitle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ dateFormat &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; .Date }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">date&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">.Date }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在日時から日付を作る場合は上で良いが、たまに昨日のメモとか作りたくなることがあるので、ファイル名を元に作るようにした。&lt;/p>
&lt;p>上手く行ったパターン②:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr .Name 0 4 }}-{{ substr .Name 4 2 }}-{{ substr .Name 6 2 }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">linkTitle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr .Name 0 4 }}-{{ substr .Name 4 2 }}-{{ substr .Name 6 2 }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">date&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">.Date }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>工夫すればもう少しすっきり書けるかもしれない。&lt;/p>
&lt;p>駄目だったパターン:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Hugoのリファレンスに載ってるのにエラーになる。 .Dateが文字列扱いで、 .Format ってメソッドはない的な&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ .Date.Format &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># sprigのリファレンスを見たらこれが正しいかと思ったが、Hugoだと違った&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr 0 3 .Name }}-{{ substr 4 5 .Name }}-{{ substr 6 7 .Name }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/functions/format/">https://gohugo.io/functions/format/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/functions/substr/">https://gohugo.io/functions/substr/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://masterminds.github.io/sprig/strings.html">http://masterminds.github.io/sprig/strings.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="binqのメタデータサーバによるメタデータの公開は著作権やライセンス侵害にあたるのか">binqのメタデータサーバによるメタデータの公開は著作権やライセンス侵害にあたるのか？&lt;/h3>
&lt;p>少し前から作っていたbinqについて、先ほどようやくブログを書くことができた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/07/binq-v0.6.1">GitHub Pagesをメタデータサーバとする簡易インストーラー「binq」をGo言語で作った - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>「免責事項」として書いたのだけど、こういうメタデータの収集・公開が著作権やライセンス侵害に当たるのかが気になったので、少し調べた。&lt;/p>
&lt;p>あまりそのものズバリな事例はないのだけど、少なくとも、元々コピーや再配布を許可しているライセンスで問題になることはないだろう。&lt;/p>
&lt;p>ゆるいOSSライセンスはそういうものもある。&lt;/p>
&lt;p>逆に、著作権法上の「公表権」や「頒布権」を理由に、「絶対に自分のHPに来てダウンロードしなきゃ駄目」みたいに書いているソフトウェアがあったら、それをbinqのインデックスに載せると怒られるかもしれない。&lt;br>
そもそもインターネットにOSSとして公開しているソフトウェアで、そんな風に書いているものがあるのか知らないが。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.vector.co.jp/for_users/study/chosakuken.html">フリーソフト、シェアウェアの基礎知識 - フリーソフトの著作権&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://e-words.jp/w/%E5%86%8D%E9%85%8D%E5%B8%83.html">再配布（二次配布）とは - IT用語辞典 e-Words&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://onm-tm.jp/news/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E7%AD%89%E3%81%AE%E8%91%97%E4%BD%9C%E6%A8%A9%E5%95%8F%E9%A1%8C%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E7%94%A8%E8%AA%9E%E3%81%AB%E3%81%A4%E3%81%84/">ソフトウェア等の著作権問題に関する用語について（用語解説） | 大島・西村・宮永商標特許事務所&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q10110939465">ソフトウェアの二次配布禁止する理由について質問です。 - 出来たらこの&amp;hellip; - Yahoo!知恵袋&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="goで任意の処理の出力を構造化データとして上手く扱いたい">Goで任意の処理の出力を構造化データとして上手く扱いたい&lt;/h3>
&lt;p>構造体だったら &lt;code>fmt.Printf(&amp;quot;%+v&amp;quot;, x)&lt;/code> とやればある程度きれいに出力できるけど、それをもっと汎用的にできると嬉しいかなというところ。&lt;/p>
&lt;p>背景として、最近はCLIでも構造化されたデータを色んなフォーマットで出力できることがクールになってる、というのがある。&lt;/p>
&lt;p>kubectl然り、Google Cloud SDK然り、AWS SDK然り。&lt;br>
最近の事例だと、Rust製のnushellでは、デフォルトでコマンドの出力結果がテーブルになっており、パイプによってコマンド間でデータの受け渡しが可能になっている。&lt;/p>
&lt;p>nushellの実装がどうなっているのかは見てないけど、まあなんかそんな感じでやりたい。&lt;/p>
&lt;p>サンプルとして参考になりそうな候補:&lt;/p>
&lt;ul>
&lt;li>Kubernetes
&lt;ul>
&lt;li>追ってみたところ、&lt;a href="https://pkg.go.dev/k8s.io/apimachinery/pkg/runtime">k8s.io/apimachinery/pkg/runtime&lt;/a>が汎用データ型及びプロセッサっぽい。単独では使いづらい気がするんだけど、めちゃimportされているのはコアなライブラリだからか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>クラウドのSDKとか…まだ見てない&lt;/li>
&lt;li>logger系
&lt;ul>
&lt;li>hashedhyphenさんに「zapはどう？」と言われたので少し見てみたけど、やはりロギングに比重が置かれている感じで、ちょっとユースケースが限定されすぎている感がある&lt;/li>
&lt;li>後でもう一度見直したところ、内部に抽象データ型があるので使えるかもしれないと思った。が、それはやはりロギングに最適化されたデータ構造で、汎用的な用途で使うにはどうしたらいいかわからなかった。&lt;/li>
&lt;li>&lt;a href="https://github.com/fluent/fluent-logger-golang">fluent/fluent-logger-golang&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/fluent/fluent-logger-golang/fluent">https://pkg.go.dev/github.com/fluent/fluent-logger-golang/fluent&lt;/a>&lt;/li>
&lt;li>↓のmsgpackのインタフェースを使っている&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/tinylib/msgp/msgp">https://pkg.go.dev/github.com/tinylib/msgp/msgp&lt;/a>
&lt;ul>
&lt;li>コードジェネレータのヘルパーと書いてあるけど、普通にシリアライザ・デシリアライザの機能を持つ。&lt;/li>
&lt;li>真面目にやるとこのぐらいは必要だよなぁという感想&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://awesome-go.com/">Awesome Go&lt;/a>で見つけたやつ:
&lt;ul>
&lt;li>Data Structureカテゴリだと、アルゴリズム系ばかりが見つかる。&lt;/li>
&lt;li>&lt;a href="https://github.com/mickep76/encoding">https://github.com/mickep76/encoding&lt;/a> &amp;hellip; これは自分が目指しているものに近い気がする。WIPって感じがするけど&lt;/li>
&lt;li>&lt;a href="https://github.com/bndr/gotabulate">https://github.com/bndr/gotabulate&lt;/a> &amp;hellip; テーブル形式で出力してくれる君。2次元のデータにしか対応してない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>今回の話と関係ないけど、調べている途中で目に入って気になったライブラリ:&lt;/p>
&lt;ul>
&lt;li>kubernetes関係を見ているときに&lt;a href="https://pkg.go.dev/k8s.io/klog">k8s.io/klog&lt;/a>というロギングライブラリを見つけた。今回の用途には向かないが、依存がなくて割とシンプルなレベル付きロガーなので、使いやすいシチュエーションもあるかも（Google寄りなライブラリ）&lt;/li>
&lt;li>&lt;a href="https://github.com/mvdan/sh">https://github.com/mvdan/sh&lt;/a> &amp;hellip; 全然関係ないけどawesome-goで目に入った。shfmtとかgosh (PoC)が入ってる&lt;/li>
&lt;/ul>
&lt;h4 id="実験で作ったdfmtというもの">実験で作ったdfmtというもの&lt;/h4>
&lt;p>&lt;a href="https://github.com/progrhyme/experiments/tree/master/go/dfmt">https://github.com/progrhyme/experiments/tree/master/go/dfmt&lt;/a>&lt;/p>
&lt;p>ちょっとまだ道筋が見えない。&lt;/p></description></item><item><title>A: 2020-06-26</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200626/</link><pubDate>Fri, 26 Jun 2020 15:58:18 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200626/</guid><description>
&lt;h2 id="626">6/26&lt;/h2>
&lt;h3 id="mysqlコマンドでmycnfが指定できないできた">mysqlコマンドでmy.cnfが指定できない→できた&lt;/h3>
&lt;p>&lt;code>--defaults-file&lt;/code> オプションで指定できるらしいが、エラーになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ mysql -h mysql -u&lt;span style="color:#000">$USER&lt;/span> -p&lt;span style="color:#000">$PASS&lt;/span> --defaults-extra-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>path/to/my.cnf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ERROR&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> unknown variable &lt;span style="color:#4e9a06">&amp;#39;defaults-extra-file=path/to/my.cnf&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このオプションは最初に指定しないといけないらしい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ mysql --defaults-extra-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>path/to/my.cnf -h mysql -u&lt;span style="color:#000">$USER&lt;/span> -p&lt;span style="color:#000">$PASS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/mysql/#cli-options">MySQL#CLI-Options&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/xiaopihang/items/b6242182b9d22bab7620">MySQLメモ - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker-registry-apiを叩いてtag検索するcliを作った">docker registry APIを叩いてtag検索するCLIを作った&lt;/h3>
&lt;p>※追記: &lt;a href="https://github.com/genuinetools/reg">https://github.com/genuinetools/reg&lt;/a> を使ったほうがいいと気づいた。&lt;/p>
&lt;p>dockerコマンドでは取れないので、curlコマンドをラップするコマンドを作った。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/toolbox/blob/master/bin/docker-search-tags">https://github.com/progrhyme/toolbox/blob/master/bin/docker-search-tags&lt;/a>&lt;/p>
&lt;p>V2 APIを使ったほうがいいんだろうけど、認証とか面倒だったのでとりあえずV1で。&lt;/p>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/docker/#api">Docker &amp;gt; Registry#API&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-24</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200624/</link><pubDate>Wed, 24 Jun 2020 02:06:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200624/</guid><description>
&lt;h2 id="624">6/24&lt;/h2>
&lt;h3 id="github-pagesをjsonサーバとして使う">GitHub PagesをJSONサーバとして使う&lt;/h3>
&lt;p>使える。&lt;br>
やってみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ curl https://progrhy.me/gh-page-test/foo.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/39199042/serve-json-data-from-github-pages">api - Serve JSON Data from Github Pages - Stack Overflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/Kanahiro/items/e7021b05199ae52e818b">GitHub Actionsを活用して擬似APIサーバーを用意する - Qiita&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/Kanahiro/items/9cfa6fa5cc9c3fcb57fd">GitHub Pagesを活用して擬似REST APIサーバーを作る - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="progrhymegithubio-でやったらハマった">progrhyme.github.io でやったらハマった&lt;/h4>
&lt;p>最初プロフィールサイトにjsonファイル置いたら、なぜか404になってハマった。&lt;br>
他のコンテンツがあると駄目なのか、 progrhyme.github.io リポが例外的に駄目なのか、仕様がよくわからん。&lt;/p>
&lt;h3 id="久しぶりにmysqlをdockerで動かしたら接続できなかった">久しぶりにmysqlをdockerで動かしたら接続できなかった&lt;/h3>
&lt;p>mysql 8をdockerで動かして、別のdockerコンテナから接続しようとしたが、認証エラーで接続できなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># サーバ実行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run --rm --name mysql -e &lt;span style="color:#000">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>mysql -d -p 3306:3306 mysql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># クライアント実行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run --rm --link mysql:mysql -it myapp bash -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>myapp&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>&amp;gt; mysql -h mysql -uroot -pmysql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>出くわしたエラーは &lt;code>ERROR 2026&lt;/code> と &lt;code>ERROR 2061&lt;/code> かな。&lt;br>
SSL接続を回避して解消できないかトライしたけどできなかったので、とりあえずmysql 5.7にして回避した。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/astrsk_hori/items/e3d6c237d68be1a6f548">dockerでmysqlを使う - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yoku0825.blogspot.com/2018/10/mysql-80cachingsha2password-ssl.html">日々の覚書: MySQL 8.0のcaching_sha2_password + 非SSL接続が転ける&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ah-2.com/g1/2017/01/30/mysql_ssl_connect_error.html">ah-2.com | SSLを有効にしているMySQLに接続時にERROR 2026 (HY000): SSL connection error: protocol version mismatch が出る&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/5.6/ja/ssl-options.html">MySQL :: MySQL 5.6 リファレンスマニュアル :: 6.3.10.4 SSL コマンドのオプション&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-22</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200622/</link><pubDate>Mon, 22 Jun 2020 11:53:08 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200622/</guid><description>
&lt;h2 id="622">6/22&lt;/h2>
&lt;h3 id="flaskで作ったapiのドキュメントを作りたい">Flaskで作ったAPIのドキュメントを作りたい&lt;/h3>
&lt;p>まださっとググっただけだけど、色んなツールがありそう。&lt;/p>
&lt;p>例:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flask-apispec.readthedocs.io/en/latest/">https://flask-apispec.readthedocs.io/en/latest/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/14295322/what-tools-are-available-to-auto-produce-documentation-for-a-rest-api-written-in">python - What tools are available to auto-produce documentation for a REST API written in Flask? - Stack Overflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="librariesio">libraries.io&lt;/h3>
&lt;p>&lt;a href="https://libraries.io/">https://libraries.io/&lt;/a>&lt;/p>
&lt;p>というのがある。Go, npmなど各種言語のパッケージをまとめてホスト（？）しているようだ。&lt;/p>
&lt;p>&lt;a href="https://libraries.io/gitlab/timkoi/shelldoc">https://libraries.io/gitlab/timkoi/shelldoc&lt;/a>&lt;/p>
&lt;p>↑で見つけた。&lt;br>
これはbpkgに対応しているようだけど、libraries.ioがどう扱っているのかはよくわからん。
libraries.ioの対応パッケージにbpkgはなさそう。&lt;/p>
&lt;p>&lt;a href="https://libraries.io/languages/Shell">https://libraries.io/languages/Shell&lt;/a>&lt;/p>
&lt;p>っていうカテゴリがあるが、実はnpmのものが多い。&lt;br>
タグがついてるだけなのか、中にシェルスクリプトを含んでいるものなのか？&lt;/p></description></item><item><title>A: 2020-06-20</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200620/</link><pubDate>Sat, 20 Jun 2020 07:45:18 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200620/</guid><description>
&lt;h2 id="620">6/20&lt;/h2>
&lt;h3 id="gitconfigでpullrebase--trueにしていたらローカルの履歴が失われた">gitconfigでpull.rebase = trueにしていたらローカルの履歴が失われた&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/myenv/commits/a75f069fad8dd05fe26d40526deab10d7912cb51">https://github.com/progrhyme/myenv/commits/a75f069fad8dd05fe26d40526deab10d7912cb51&lt;/a>&lt;/p>
&lt;p>この辺の作業をしていたとき。&lt;br>
macOSで作業した後、Ubuntuに戻ったときについ &lt;code>git push -f&lt;/code> してしまい、 &lt;code>[darwin]&lt;/code> なコミットログが失われてしまった。&lt;/p>
&lt;p>その後macOSに戻ってgit pullしたが、 &lt;code>pull.rebase = true&lt;/code> にしていたからtopにあったコミットはなかったことにされてしまったようだ。&lt;/p>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/git/#pull">Git#config-pull&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="go-moduleの更新をpkggodevに反映する">Go moduleの更新をpkg.go.devに反映する&lt;/h3>
&lt;p>shelpはmodule / packageとしての利用は想定してないのだけど、久しぶりにpkg.go.devで見てみたら、未だにv0.1.0しかないのが気になった。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/mod/github.com/progrhyme/shelp?tab=versions">https://pkg.go.dev/mod/github.com/progrhyme/shelp?tab=versions&lt;/a>&lt;/p>
&lt;p>※今は後述の操作を行って、v0.5.3までインデックされている。&lt;/p>
&lt;p>ふつうにGitHubにリリースしているだけでは新しいバージョンがインデックスされないみたい。&lt;br>
&lt;a href="https://go.dev/about">https://go.dev/about&lt;/a> によると&lt;/p>
&lt;blockquote>
&lt;p>Data for the site is downloaded from proxy.golang.org. We monitor the Go Module Index regularly for new packages to add to pkg.go.dev. If you don’t see a package on pkg.go.dev, you can add it by doing one of the following:&lt;/p>
&lt;/blockquote>
&lt;p>以下、いずれかの操作が必要だそうだ:&lt;/p>
&lt;ul>
&lt;li>proxy.golang.org に当該バージョンのモジュールをリクエストする
&lt;ul>
&lt;li>例) &lt;a href="https://proxy.golang.org/example.com/my/module/@v/v1.0.0.info">https://proxy.golang.org/example.com/my/module/@v/v1.0.0.info&lt;/a> にGETリクエストを送る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GOPROXY=&amp;ldquo;&lt;a href="https://proxy.golang.org">https://proxy.golang.org&lt;/a>&amp;rdquo; をつけてmodule-aware modeでgo getする
&lt;ul>
&lt;li>例) &lt;code>GOPROXY=&amp;quot;https://proxy.golang.org&amp;quot; GO111MODULE=on go get example.com/my/module@v1.0.0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/program/go/dojo/#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%9B%B4%E6%96%B0">プログラム言語 &amp;gt; Golang &amp;gt; 道場#モジュール更新&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="golangでmoduleのパスの外でmodule-aware-modeで入れたmoduleの消し方がわからん">Golangでmoduleのパスの外でmodule-aware modeで入れたmoduleの消し方がわからん&lt;/h3>
&lt;p>&lt;a href="https://golang.org/cmd/go/">https://golang.org/cmd/go/&lt;/a> には載ってないと思う。&lt;/p>
&lt;p>go mod tidyで消えるかもしれないが、何が対象になるかわからなくて、怖くてまだ打ってない。&lt;br>
別に全部消えてもなんとかなると思うけど。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/k-kurikuri/items/609141727320eb1a6d2b">go mod tidy で不要なpackageを削除する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mkdocs事始め">MkDocs事始め&lt;/h3>
&lt;p>shelpのドキュメントサイトを作ろうと思った。&lt;br>
そんなにページ数も行かないだろうから、Docsyは牛刀過ぎる。&lt;br>
このぐらいのサイトならMkDocsで十分行けそうである。&lt;/p>
&lt;p>そして、&lt;a href="https://squidfunk.github.io/mkdocs-material/">Material for MkDocs&lt;/a>はとてもデザインが良い。&lt;/p>
&lt;p>というわけで、まずはMkDocs環境をセットアップ。&lt;/p>
&lt;p>全部mkdocs-materialのDockerでやろうかとも思ったけど、まあPythonも既にpyenvで3.8を入れてたし、そんなに面倒じゃなかったのと、Dockerでファイルを作るとパーミッションがあーって感じになりがちなので、mkdocs用のvenvを作ってやることにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># venvセットアップ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m venv venv/mkdocs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> venv/mkdocs/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># mkdocsインストール&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install mkdocs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># リポジトリ作成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdocs new shelp-doc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/mkdocs/">Software &amp;gt; 静的サイトジェネレーター &amp;gt; MkDocs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mkdocs-materialをdockerで動かす">mkdocs-materialをDockerで動かす&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/docker-wraps">docker-wraps&lt;/a>というリポジトリを作って、ラッパースクリプトを書いた。&lt;br>
やってることはこれだけ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>docker run --rm -it -p 8000:8000 -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PWD&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/docs squidfunk/mkdocs-material &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$@&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを上で作ったshelp-docリポジトリで動かす…の前に、mkdocs.ymlでテーマを設定してから:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">site_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">shelp doc&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">theme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">material&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ラッパーコマンドを実行すると、docker pull -&amp;gt; runが行われ、 0.0.0.0:8000 でmkdocsのWebサーバが起動した。&lt;/p></description></item><item><title>A: 2020-06-17</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200617/</link><pubDate>Wed, 17 Jun 2020 00:14:59 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200617/</guid><description>
&lt;h2 id="617">6/17&lt;/h2>
&lt;h3 id="shelpのリファクタでgorenameを叩きまくった">shelpのリファクタでgorenameを叩きまくった&lt;/h3>
&lt;p>gorenameの使い方などは&lt;a href="https://progrhy.me/tech-notes/a/program/go/tools/#cmdgorename">プログラム言語 &amp;gt; Golang &amp;gt; tools#cmd/gorename&lt;/a>に書いた。&lt;/p>
&lt;p>具体的にはこのコミット: &lt;a href="https://github.com/progrhyme/shelp/pull/5/commits/9b33d0e78dfa9b984a24eca80d9fef89b0556157">https://github.com/progrhyme/shelp/pull/5/commits/9b33d0e78dfa9b984a24eca80d9fef89b0556157&lt;/a>&lt;/p>
&lt;p>gorenameを通算30回ぐらいは叩いたか。&lt;br>
下のようにシェル関数を作ってタイプ数を減らした:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>gorename-cli&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">local&lt;/span> &lt;span style="color:#000">from&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">local&lt;/span> &lt;span style="color:#000">to&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gorename -from &lt;span style="color:#4e9a06">&amp;#34;\&amp;#34;github.com/progrhyme/shelp/internal/cli\&amp;#34;.&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">from&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> -to &lt;span style="color:#000">$to&lt;/span> -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gorename-cli removeCmd.name op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gorename-cli commonCmd.command name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gorename-cli removeCmd.op &lt;span style="color:#204a87">command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gorename-cli installCmd.op &lt;span style="color:#204a87">command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shelpのhomebrew-tap-formulaを更新したが手元でupgradeを打っても更新されなかった">shelpのHomebrew Tap Formulaを更新したが、手元でupgradeを打っても更新されなかった&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/homebrew-taps/commit/351ee0f987043968bad1ff9fc386f895d86f8406">shelpのFormulaをv0.5.1に更新した&lt;/a>が、 &lt;code>brew upgrade&lt;/code> で更新できなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ brew bundle --global
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 更新されず&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ brew update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ brew upgrade shelp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Warning: progrhyme/taps/shelp 86.64 already installed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>仕方ないので &lt;code>brew remove shelp&lt;/code> -&amp;gt; &lt;code>brew bundle&lt;/code> したが、 &lt;code>brew reinstall&lt;/code> でもよかったか。&lt;/p>
&lt;h4 id="追記-autodetectに失敗していた">追記 autodetectに失敗していた&lt;/h4>
&lt;p>↑のログにも出ているように、バージョンが &lt;code>86.64&lt;/code> だと思われていたらしい。&lt;br>
んなアホな…。&lt;/p>
&lt;p>&lt;code>.version&lt;/code> メソッドで明示的に指定した。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/homebrew-taps/commit/af68e9c05b604b32048cada29cc5c54e2c4dd96a">https://github.com/progrhyme/homebrew-taps/commit/af68e9c05b604b32048cada29cc5c54e2c4dd96a&lt;/a>&lt;/p>
&lt;h3 id="goreleaserのドキュメントに修正prを送った">goreleaserのドキュメントに修正PRを送った&lt;/h3>
&lt;p>&lt;a href="https://goreleaser.com/ci/actions/">https://goreleaser.com/ci/actions/&lt;/a>&lt;/p>
&lt;p>で紹介されているサンプルのYAMLに問題があって、履歴が取れていなかったので。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">GoReleaserで、GitHub ActionsでリリースするとChangelogに全コミット履歴が載ってしまう原因がわかった。履歴取得のために&lt;br>git fetch --prune --unshallowしてるけど、これだとタグ情報が取れてないので、--tagsオプションが必要だ。&lt;/p>&amp;mdash; progrhyme (@progrhyme) &lt;a href="https://twitter.com/progrhyme/status/1272139558994378753?ref_src=twsrc%5Etfw">June 14, 2020&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>&lt;a href="https://github.com/goreleaser/goreleaser/pull/1608">https://github.com/goreleaser/goreleaser/pull/1608&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上のPRを送ったが、actions/checkout@v2のオプションで行けたので、そちらでやることになった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/goreleaser/goreleaser/pull/1610">https://github.com/goreleaser/goreleaser/pull/1610&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-15</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200615/</link><pubDate>Mon, 15 Jun 2020 01:53:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200615/</guid><description>
&lt;h2 id="615">6/15&lt;/h2>
&lt;h3 id="maltmillを使いたかったが動かなかった">maltmillを使いたかったが動かなかった&lt;/h3>
&lt;p>shelpのbrew tapを作ろうと思って、&lt;a href="https://songmu.jp/riji/entry/2019-02-22-maltmill.html">Songmuさんの記事&lt;/a>を見つけ、&lt;a href="https://github.com/Songmu/maltmill">maltmill&lt;/a>を使ってFormulaを作ろうとしたが、動かなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ maltmill new -w progrhyme/shelp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>maltmill&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>!!ERROR!!&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> no assets found from latest release
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いまGitHubの最新版は &lt;a href="https://github.com/progrhyme/shelp/releases/tag/v0.5.1-pre-release">https://github.com/progrhyme/shelp/releases/tag/v0.5.1-pre-release&lt;/a>&lt;br>
Assetsはあるんだけどな。&lt;br>
まあ、きっとツールが想定している形式に沿ってないんだろう。&lt;/p>
&lt;p>残念。&lt;/p>
&lt;p>ついでにいうと、Ubuntu 18で作業してたのだけど、brewで入れようとしたらバイナリはdarwinだったから駄目だった。&lt;br>
（この辺はFormula作るときはどうしたらいいんだろう？）&lt;/p>
&lt;p>次に &lt;code>go get&lt;/code> したらビルドがこけ、ghgが手元にあったので、ghgでインストールした。&lt;/p>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/pkg-man/brew/">Software &amp;gt; パッケージ管理 &amp;gt; Homebrew&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="初めてのbrew-formula">初めてのBrew Formula&lt;/h3>
&lt;p>shelpのFormulaを作った。&lt;/p>
&lt;p>だいたいこれ &lt;a href="https://docs.brew.sh/Formula-Cookbook">https://docs.brew.sh/Formula-Cookbook&lt;/a> に沿って作業した。&lt;/p>
&lt;p>他のドキュメント類のリンクは↑のページにメモしてある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew create https://github.com/progrhyme/shelp/archive/v0.5.0.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで &lt;code>Formula/shelp.rb&lt;/code> に雛形ができる。&lt;/p>
&lt;p>あとは&lt;a href="https://github.com/Homebrew/homebrew-core/blob/master/Formula/peco.rb">pecoのFormula&lt;/a>や、その辺にあったexampleや、リファレンスを読みながらちょこちょこ書き換えた。&lt;/p>
&lt;p>最終的に出来たのがこれ:&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/homebrew-core/blob/db315c00862854800f8f4ee75dd45e70d10c7862/Formula/shelp.rb">https://github.com/progrhyme/homebrew-core/blob/db315c00862854800f8f4ee75dd45e70d10c7862/Formula/shelp.rb&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Ruby" data-lang="Ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Shelp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">Formula&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">desc&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Git-based package manager for shell scripts written in Go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">homepage&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">url&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp/archive/v0.5.0.tar.gz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sha256&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;32ef1a1c0c85cc3fdca607dcc415d3032a9b3b770e6e7d1446c76ccb910c3c6a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">head&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">depends_on&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;go&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">:build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ENV&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GOPATH&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">buildpath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buildpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;src/github.com/progrhyme/shelp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">buildpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">children&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cd&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;src/github.com/progrhyme/shelp&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">system&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;go&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;build&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-o&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;shelp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">prefix&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">install_metafiles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">test&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">system&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/shelp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;--version&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>単純にgoでbuildしてインストールする形。&lt;/p>
&lt;h4 id="検証">検証&lt;/h4>
&lt;p>ビルドのチェックを行う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install --interactive shelp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こうすると、テンポラリなディレクトリにtarballが展開され、そのディレクトリでシェルが起動する。
ここで、ビルド環境に問題がないかチェックするようだ。&lt;/p>
&lt;p>shelpの場合、goがあればいいので特に問題ない。&lt;/p>
&lt;p>何もせずに &lt;code>exit&lt;/code> した。&lt;/p>
&lt;h4 id="インストールする">インストールする&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ brew install --verbose --debug shelp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Homebrew/brew.rb &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Formulary::FormulaLoader&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: loading &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/go.rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://github.com/progrhyme/shelp/archive/v0.5.0.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/curl --disable --globoff --show-error --user-agent Linuxbrew/2.4.0-41-g0125c4c&lt;span style="color:#4e9a06">\ \(&lt;/span>Linux&lt;span style="color:#4e9a06">\;\ &lt;/span>x86_64&lt;span style="color:#4e9a06">\ &lt;/span>Ubuntu&lt;span style="color:#4e9a06">\ &lt;/span>18.04.4&lt;span style="color:#4e9a06">\ &lt;/span>LTS&lt;span style="color:#4e9a06">\)\ &lt;/span>curl/7.58.0 --retry &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> --location --silent --head --request GET https://github.com/progrhyme/shelp/archive/v0.5.0.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Already downloaded: /home/progrhyme/.cache/Homebrew/downloads/953ed657e86e0d4247c629ba0e66f0a7a0690b35b0122db90d9cf2160b8a6a61--shelp-0.5.0.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Verifying 953ed657e86e0d4247c629ba0e66f0a7a0690b35b0122db90d9cf2160b8a6a61--shelp-0.5.0.tar.gz checksum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Homebrew/build.rb &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Formulary::FormulaLoader&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: loading &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/go.rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Homebrew/build.rb &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Formulary::FormulaLoader&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: loading &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/gcc.rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Homebrew/build.rb &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Formulary::FormulaLoader&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: loading &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/binutils.rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Homebrew/build.rb &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Formulary::FormulaLoader&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: loading &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/make.rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar xof /home/progrhyme/.cache/Homebrew/downloads/953ed657e86e0d4247c629ba0e66f0a7a0690b35b0122db90d9cf2160b8a6a61--shelp-0.5.0.tar.gz -C /tmp/d20200615-27628-1gx29yu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -pR /tmp/d20200615-27628-1gx29yu/shelp-0.5.0/. /tmp/shelp-20200615-27628-1cuvuid/shelp-0.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod -Rf +w /tmp/d20200615-27628-1gx29yu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; go build -o &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Cellar/shelp/0.5.0/bin/shelp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go: downloading github.com/spf13/pflag v1.0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go: downloading golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go: downloading gopkg.in/yaml.v2 v2.3.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go: downloading golang.org/x/sys v0.0.0-20190412213103-97732733099d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; &lt;span style="color:#000">Cleaning&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Fixing &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Cellar/shelp/0.5.0/bin/shelp permissions from &lt;span style="color:#0000cf;font-weight:bold">755&lt;/span> to &lt;span style="color:#000">555&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Finishing up
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ln -s ../Cellar/shelp/0.5.0/bin/shelp &lt;span style="color:#000">shelp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🍺 &lt;span style="color:#000">$HOMEBREW_PREFIX&lt;/span>/Cellar/shelp/0.5.0: &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> files, 5.1MB, built in &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="バイナリインストールに対応できていない">バイナリインストールに対応できていない&lt;/h4>
&lt;p>bottleブロックが追加されたら、バイナリインストールにも自動的に対応されるのかな？ とはいえそれには、homebrew-coreに取り込まれなければならない。&lt;/p>
&lt;p>自前のTapでそれをやる方法はまだわかってない。&lt;/p>
&lt;p>&lt;a href="https://github.com/Songmu/homebrew-tap/tree/master/Formula">SongmuさんのFormula&lt;/a>を真似すればいいんだろうけど、最近Ubuntuを使う頻度が多いので、できればmacOS, Linusの両方に対応したい。&lt;/p>
&lt;h3 id="shelpをbrew-tapでインストールできるようにした">shelpをbrew tapでインストールできるようにした&lt;/h3>
&lt;p>上に書いたようにmaltmillが動かなかったので、先ほど作ったFormulaをそのまま使った。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/homebrew-taps">https://github.com/progrhyme/homebrew-taps&lt;/a>&lt;/p>
&lt;p>このリポジトリを用意して、Songmuさんの記事を参考にして、Formulaを配置した。
実際、やることはこれだけ。&lt;/p>
&lt;p>あとは&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew tap progrhyme/taps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install shelp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>でOK.&lt;/p>
&lt;h3 id="shelpでbrewによるバイナリインストールに対応">shelpでbrewによるバイナリインストールに対応&lt;/h3>
&lt;p>Ruby APIとCookbookを見ながら頑張って対応した。&lt;br>
Formulaは次のようになった:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Ruby" data-lang="Ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Shelp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">Formula&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;0.5.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">OS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mac?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Binary&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;shelp_&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">_darwin_x86_64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sha256&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;18665382a6519b59741740cd9edbcc667be3bf99d06fd7d914274a30d5cba889&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">elsif&lt;/span> &lt;span style="color:#000">OS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">linux?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Binary&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;shelp_&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">_linux_x86_64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sha256&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7a8797cbd3af61d0cb83b2ee6f8720a208c05e653871d55fee34b837c8f1e8bf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">url&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp/releases/download/v&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">desc&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Git-based package manager for shell scripts written in Go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">homepage&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">head&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/progrhyme/shelp.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">Binary&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;shelp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">test&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">system&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">#{&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/shelp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;--version&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-06-13</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200613/</link><pubDate>Sat, 13 Jun 2020 03:10:06 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200613/</guid><description>
&lt;h2 id="613">6/13&lt;/h2>
&lt;h3 id="macosのgolang環境をアップデート">macOSのGolang環境をアップデート&lt;/h3>
&lt;p>約1年ぶりにgoをアップデート。&lt;/p>
&lt;p>たぶん、前回はふつうに &lt;a href="https://golang.org/dl/">https://golang.org/dl/&lt;/a> から取得できるインストーラからインストールしたのではないかな。&lt;/p>
&lt;p>今回はbrewで入れて、 &lt;code>~/.Brewfile&lt;/code> にも足した。&lt;br>
非公式のやり方だし、常に最新とは限らないが、インストーラを使うより更新が楽だし、ほとんど最新に近いから、ほぼ問題ないと判断。&lt;/p>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/program/go/#install-go">Golang#Install-Go&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-12</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200612/</link><pubDate>Fri, 12 Jun 2020 03:40:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200612/</guid><description>
&lt;h2 id="612">6/12&lt;/h2>
&lt;h3 id="私はまだgolangのinterfaceが理解できていないようだ">私はまだGolangのinterfaceが理解できていないようだ&lt;/h3>
&lt;p>shelpの実装中に次のようなコードを書いた。&lt;br>
※簡略化してある。実際のコミットは &lt;a href="https://github.com/progrhyme/shelp/commit/bd3b037d80c3fe6e235dd0868123f7d7e264c3bc">https://github.com/progrhyme/shelp/commit/bd3b037d80c3fe6e235dd0868123f7d7e264c3bc&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">////////////////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// bodyとpartを組合せた型を作る
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// partには基本型と拡張型がある
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">////////////////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">bodyI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">quantity&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// bodyの実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">coreS&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">weight&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">coreS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">quantity&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">weight&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// ====================
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// part
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">partI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// partの実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">legS&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">legS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">num&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// partの拡張型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">enhancedPartI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">partI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">variation&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// enhancedPartの実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">bottomS&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">legS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">variety&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">bottomS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">variation&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">variety&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">////////////////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 複合型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// ①body + partな型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">artifactI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bodyI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">partI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// artifactの実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">dollS&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">coreS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">part&lt;/span> &lt;span style="color:#000">legS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">dollS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">partI&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// ====================
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// ②body + enhancedPartな型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">robotI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bodyI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">enhancedPartI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// robotの実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">toyRobotS&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">coreS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">part&lt;/span> &lt;span style="color:#000">bottomS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">toyRobotS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">enhancedPartI&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">tr&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>書いてみるとややこしいが、上のような型定義を行った。&lt;br>
このとき、下のようなコードを書くとエラーになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">partNumber&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000">artifactI&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bot&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">toyRobotS&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bot&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">coreS&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">coreS&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">weight&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bot&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">num&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bot&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">variety&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">partNumber&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bot&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>interface &lt;code>enhancedPartI&lt;/code> は interface &lt;code>partI&lt;/code> を満たしているのではないかと思うのだが、 &lt;code>a.getPart()&lt;/code> で求められているのは &lt;code>partI&lt;/code> ですよ、とコンパイラが怒ってくる。&lt;/p>
&lt;p>&lt;a href="https://play.golang.org/p/7I4rQIA4KxQ">https://play.golang.org/p/7I4rQIA4KxQ&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>./prog.go:122:24: cannot use bot (type *toyRobotS) as type artifactI in argument to partNumber:
*toyRobotS does not implement artifactI (wrong type for getPart method)
have getPart() enhancedPartI
want getPart() partI
&lt;/code>&lt;/pre>&lt;p>仕方ないので、次のように取得したいpart型によって &lt;code>toyRobotS&lt;/code> のメソッドを分けることにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// robotIのインタフェースを変更
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">robotI&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bodyI&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ここはartifactIでもよさそう
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">getEnhancedPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">enhancedPartI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// NOTE: toyRobotSの型定義は同じ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// artifactIを実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">toyRobotS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">getPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">partI&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">tr&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// robotIを実装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">toyRobotS&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">getEnhancedPart&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">enhancedPartI&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">tr&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">part&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そしたら怒られなくなった。&lt;/p>
&lt;p>&lt;a href="https://play.golang.org/p/bI1N3dUb5h0">https://play.golang.org/p/bI1N3dUb5h0&lt;/a>&lt;/p>
&lt;p>想像するに、partNumber関数の中ではartifactI型の値を受け取って、a.getPart()を呼んだらpartI型の値が返ってくることを期待しているのに、ehancedPartI型の値が返ってくるのでそんなの知らんよ、ということだろうか。&lt;/p></description></item><item><title>A: 2020-06-10</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200610/</link><pubDate>Wed, 10 Jun 2020 14:40:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200610/</guid><description>
&lt;h2 id="610">6/10&lt;/h2>
&lt;h3 id="google-cloud-sdkでpython-3を使う">Google Cloud SDKでPython 3を使う&lt;/h3>
&lt;p>&lt;code>gcloud components update&lt;/code> を打ったら次のようなメッセージが出ていることに気づいた:&lt;/p>
&lt;pre tabindex="0">&lt;code> Note: Cloud SDK introduced support for Python 3 in release 274.0.0 and
users are strongly encouraged to migrate to Python 3. Support for Python 2
will be deprecated on July 31, 2020. See also Python 2 Sunset
(https://cloud.google.com/python/docs/python2-sunset/) and Using Python 3
(https://cloud.google.com/sdk/gcloud/reference/topic/startup).
&lt;/code>&lt;/pre>&lt;p>pyenvでpython3入れてるんだけどなんで使われないのかな、と思ったら、まだデフォルトはpython2らしい。&lt;/p>
&lt;p>&lt;a href="https://cloud.google.com/sdk/gcloud/reference/topic/startup">https://cloud.google.com/sdk/gcloud/reference/topic/startup&lt;/a> によると、次の順番でpythonインタプリタを探すとある:&lt;/p>
&lt;ul>
&lt;li>python2&lt;/li>
&lt;li>python27&lt;/li>
&lt;li>python&lt;/li>
&lt;li>python3&lt;/li>
&lt;/ul>
&lt;p>pyenvのpythonを使いたいなら、環境変数 &lt;code>CLOUDSDK_PYTHON&lt;/code> に設定してあげればいい。&lt;br>
私は最近anyenvを使うようになったので、下のようになった:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">CLOUDSDK_PYTHON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>which python&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$CLOUDSDK_PYTHON&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/Users/progrhyme/.anyenv/envs/pyenv/shims/python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いまどのpythonを使っているかは、gcloud infoで確認できた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ gcloud info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Google Cloud SDK &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>296.0.0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Locale: &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ja_JP&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;UTF-8&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python Version: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>3.8.1 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>...&lt;span style="color:#ce5c00;font-weight:bold">)]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python Location: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>/Users/progrhyme/.anyenv/envs/pyenv/versions/3.8.1/bin/python&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-06-08</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200608/</link><pubDate>Mon, 08 Jun 2020 02:22:21 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200608/</guid><description>
&lt;h2 id="68">6/8&lt;/h2>
&lt;h3 id="はじめてのgo-module">はじめてのGo Module&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/shelp">shelp&lt;/a>をGo Module対応して作ったところ、tagをつけてGitHubに公開しただけで pkg.dev.go にもindexされた。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/mod/github.com/progrhyme/shelp">https://pkg.go.dev/mod/github.com/progrhyme/shelp&lt;/a>&lt;/p>
&lt;p>今のところmodule / packageとしての利用は想定してないけど、それはそれとしてmoduleを作ってリリースするまでの流れをメモしておく。&lt;/p>
&lt;p>基本的に、 &lt;a href="https://github.com/golang/go/wiki/Modules#how-to-use-modules">https://github.com/golang/go/wiki/Modules#how-to-use-modules&lt;/a> の流れに従えばよい。&lt;/p>
&lt;p>作業環境:&lt;/p>
&lt;ul>
&lt;li>Ubuntu 18.04 LTS&lt;/li>
&lt;li>go v1.14.2&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.golang.org/using-go-modules">Using Go Modules - The Go Blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.golang.org/publishing-go-modules">Publishing Go Modules - The Go Blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="コンパイラの用意">①コンパイラの用意&lt;/h4>
&lt;p>Go 1.14以上なら何もしなくていい。&lt;br>
Go 1.11〜1.13の場合、環境変数の設定が必要:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GO111MODULE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="moduleの初期化">②Moduleの初期化&lt;/h4>
&lt;p>GOPATHの外のディレクトリでモジュールのディレクトリを作る。&lt;br>
私の環境ではGOPATH設定してない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> somewhere/shelp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit --allow-empty -m &lt;span style="color:#4e9a06">&amp;#34;Initial commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod init github.com/progrhyme/shelp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これによって次のような &lt;code>go.mod&lt;/code> ファイルが作られる:&lt;/p>
&lt;pre tabindex="0">&lt;code>module github.com/progrhyme/shelp
go 1.14
&lt;/code>&lt;/pre>&lt;h4 id="依存ライブラリの追加">③依存ライブラリの追加&lt;/h4>
&lt;p>VS Codeでプラグインを入れて作業してたら勝手にgo.mod, go.sumが更新されていったので、あまり意識的に作業はしていない。&lt;/p>
&lt;p>shelp v0.1.0 時点では、次のようになった。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat go.mod
module github.com/progrhyme/shelp
go 1.14
require (
github.com/spf13/pflag v1.0.5
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9
)
$ cat go.sum
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9 h1:vEg9joUBmeBcK9iSJftGNf3coIG4HqZElCPehJsfAYM=
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190412213103-97732733099d h1:+R4KGOnez64A81RvjARKc4UT5/tI9ujCIVX+P5KiHuI=
golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
&lt;/code>&lt;/pre>&lt;p>それぞれのファイルは、RubyのbundlerでいうところのGemfileとGemfile.lockに相当すると見ていいのだろう。&lt;br>
npmならpackage.jsonとpackage-lock.json. （以下略）&lt;/p>
&lt;h4 id="リリース">④リリース&lt;/h4>
&lt;p>公式手順だと &lt;code>go mod tidy&lt;/code> や &lt;code>go test all&lt;/code> をやるべしとあるが、何もやっていない。（ひょっとしたらVS Codeプラグインの機能で &lt;code>go mod tidy&lt;/code> は掛かっているのかもしれない）&lt;/p>
&lt;p>やったことは、タグを付けてGitHubにpushし、goreleaserを使ってバイナリをリリースしただけ。&lt;/p>
&lt;p>これだけで pkg.go.dev にインデックスされるようだ。&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>semverじゃないと駄目、みたいな仕様はあるのかも？&lt;/li>
&lt;/ul>
&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>goreleaserについては&lt;a href="https://progrhy.me/tech-notes/a/program/go/ecosystem/goreleaser/">Golang &amp;gt; エコシステム &amp;gt; goreleaser&lt;/a>に書いた。&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-05</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200605/</link><pubDate>Fri, 05 Jun 2020 03:21:07 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200605/</guid><description>
&lt;h2 id="65">6/5&lt;/h2>
&lt;h3 id="shallow-cloneしたgitのリポジトリを同じdepthでpullするには">shallow cloneしたgitのリポジトリを同じdepthでpullするには&lt;/h3>
&lt;p>動作環境:&lt;/p>
&lt;ul>
&lt;li>Ubuntu 18.04&lt;/li>
&lt;li>git v2.17.1&lt;/li>
&lt;/ul>
&lt;p>前提:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>でcloneした。&lt;/p>
&lt;p>バッチ実行で掲題の操作を安全確実にやる方法がなかなか見つからなかった。&lt;br>
色々試していたところ、以下で行けるとわかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Read Onlyな使い方しかしないなら、 &lt;code>git fetch --depth=1 &amp;amp;&amp;amp; git checkout origin/master&lt;/code> でもいいかと思ったけど、上で済むならそれでいいや。&lt;br>
上が動かなかったら、下のように強引にやる手もあった:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout origin/master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -D master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># git branch --set-upstream-to=origin/master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後の行はなくてもまあなんとかなるけど、ブランチ作り直すと追跡ブランチの情報が消えるので。&lt;/p>
&lt;h4 id="ng集">NG集&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># ふつうにpull&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 動くけど、shallow clone以降の履歴が全部残る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git pull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 一応動いてるようだけどエラーが出る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git pull --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--update-shallow&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + f22f6e5...caec91c master -&amp;gt; origin/master &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>forced update&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: Could not &lt;span style="color:#204a87">read&lt;/span> 843b95a87c496da6eac6160744854af3070db0fd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: Could not &lt;span style="color:#204a87">read&lt;/span> 843b95a87c496da6eac6160744854af3070db0fd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>First, rewinding head to replay your work on top of it...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span> git rebase origin/master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># たまにCONFLICTする&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span> git merge origin/master &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--squash&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: refusing to merge unrelated histories
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--update-shallow&lt;/code> は &lt;code>.git/shallow&lt;/code> の更新を許すオプション&lt;/li>
&lt;/ul>
&lt;h3 id="zoomの定期ミーティング生成やgoogleカレンダーへの反映を自動化できないか">Zoomの定期ミーティング生成やGoogleカレンダーへの反映を自動化できないか&lt;/h3>
&lt;p>ZoomとGoogleのAPIでなんとかできるかも。&lt;/p>
&lt;p>&lt;a href="https://marketplace.zoom.us/docs/api-reference/zoom-api">https://marketplace.zoom.us/docs/api-reference/zoom-api&lt;/a>&lt;/p>
&lt;p>Zoom APIについて:&lt;/p>
&lt;ul>
&lt;li>OAuth 2認証&lt;/li>
&lt;li>public/privateアプリを作れる&lt;/li>
&lt;li>Chatbotも作れるっぽい&lt;/li>
&lt;/ul>
&lt;p>やればできるのでは。&lt;/p>
&lt;p>先行者がいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kudota/items/b480610cc3f575a8ec6f">Zoom APIでミーティングの作成をGASから行う - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>できそう。&lt;/p></description></item><item><title>A: 2020-05-31</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200531/</link><pubDate>Sun, 31 May 2020 07:47:55 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200531/</guid><description>
&lt;h2 id="531">5/31&lt;/h2>
&lt;h3 id="docsyでgoogleカスタム検索エンジンを使う">DocsyでGoogleカスタム検索エンジンを使う&lt;/h3>
&lt;p>そろそろLunr.jsに限界を感じてきたので、導入する。&lt;br>
具体的には「k8s」や「k9s」などが検索でヒットしない。&lt;/p>
&lt;p>やり方は公式ドキュメントの&lt;a href="https://www.docsy.dev/docs/adding-content/navigation/#configure-search-with-a-google-custom-search-engine">Navigation and Search | Docsy&lt;/a>の通り。&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://cse.google.com/cse/all">https://cse.google.com/cse/all&lt;/a> にアクセスし、新しい検索エンジンを追加。
&lt;ul>
&lt;li>対象は「progrhy.me/tech-notes/*」&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オプションの設定
&lt;ul>
&lt;li>「デザイン &amp;gt; レイアウト」で「結果のみ」を選ぶ&lt;/li>
&lt;li>「検索機能 &amp;gt; 詳細設定 &amp;gt; ウェブ検索の設定」で、「リンクターゲット」を「_parent」にする。これで現在のタブで（新しいタブを開かずに）検索結果に遷移できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>config.toml 編集
&lt;ul>
&lt;li>&lt;code>params.gcs_engine_id&lt;/code> に作成した検索エンジンのIDを設定&lt;/li>
&lt;li>&lt;code>params.offlineSearch = false&lt;/code> として、Lunr.jsを無効化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="ローカルではlunrjsを使う">ローカルではLunr.jsを使う&lt;/h4>
&lt;p>カスタム検索エンジンを使うと当然 &lt;a href="https://progrhy.me/tech-notes/">https://progrhy.me/tech-notes/&lt;/a> に遷移してしまうので、ローカル作業時はLunr.jsの方が都合が良い。&lt;/p>
&lt;p>Hugoで、オプションによって設定を切替える方法について調べて&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#configuration">Hugo#Configuration&lt;/a>に記した。&lt;/p>
&lt;p>初め、環境変数で以下を指定してやろうとした:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">HUGO_PARAMS_GCS_ENGINE_ID&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">HUGO_PARAMS_OFFLINESEARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>試したところ、 &lt;code>offlineSearch = true&lt;/code> は設定できたようだが、 &lt;code>gcs_engine_id&lt;/code> の指定を無効化することはできなかった。&lt;br>
config.tomlではコメントアウトしておいて、公開サイトビルド時に環境変数で &lt;code>gcs_engine_id&lt;/code> を設定するやり方も考えられるが、バグったときに面倒なので、CIの設定はなるべく変えたくない。&lt;/p>
&lt;p>同じページ（Hugoのドキュメント）を見ていたところ、 &lt;code>hugo --config a.toml,b.toml&lt;/code> のように設定ファイルを複数指定できることに気がついたので、下のような &lt;code>config-local.toml&lt;/code> を用意した:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-TOML" data-lang="TOML">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">gcs_engine_id&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">offlineSearch&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>…で、ローカルでは &lt;code>hugo server --config config.toml,config-local.toml&lt;/code> と指定してサーバを起動するようにしたら、上手く行った。&lt;/p>
&lt;p>ちなみに、こんなの毎回打ってられないので、少し前から&lt;a href="https://github.com/progrhyme/dotfiles/blob/9ae6af2874f5ffabd9560df8d5b0205b64230ce8/script/run-hugo-server.sh">ラッパースクリプト&lt;/a>を使っていて、 &lt;code>HUGO_CONFIG=config.toml,config-local.toml&lt;/code> とシェル変数を設定ファイルに書いて読み込ませて対応している。&lt;/p>
&lt;h4 id="--config-オプションを使わなくてもよかった">&lt;code>--config&lt;/code> オプションを使わなくてもよかった&lt;/h4>
&lt;p>Hugoには所定のディレクトリに設定ファイルを配置すると、コンテキストに基づいて設定ファイルを読み込んでマージしてくれる機能があると知った。&lt;br>
やり方は&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90">Hugo#Configuration-ディレクトリ構成&lt;/a>に記した。&lt;/p>
&lt;p>&lt;code>hugo server&lt;/code> ではデフォルトで &lt;code>development&lt;/code> で起動するので、 &lt;code>config-local.toml&lt;/code> を &lt;code>config/development/config.toml&lt;/code> に移動することで、 &lt;code>--config&lt;/code> オプション無しでも読み込んでくれるようになった。&lt;/p>
&lt;h3 id="新しいgoogle-search-consoleでurlの再クロールをgoogleにリクエスト">新しいGoogle Search ConsoleでURLの再クロールをGoogleにリクエスト&lt;/h3>
&lt;p>&lt;a href="https://search.google.com/search-console">https://search.google.com/search-console&lt;/a>&lt;/p>
&lt;p>最近全然使ってなかったから、いつ変わったのかわからないけど、Search ConsoleがスタイリッシュなUIに生まれ変わっていた。&lt;/p>
&lt;p>URLの再クロールの依頼方法がわからなかったが、ググったらヘルプページが見つかった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.google.com/webmasters/answer/6065812?hl=ja">URL の再クロールを Google にリクエストする - Search Console ヘルプ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そして見つけた時には既にサイトマップを送信済みだった。&lt;/p>
&lt;p>（追記）&lt;/p>
&lt;p>なぜかページの古い状態がキャッシュ（？）に残ってるっぽくて、アーカイブ済みのメモページにヒットすると404になったりすることがしばし。&lt;/p>
&lt;h3 id="golangのcliパッケージを改めて探した">GolangのCLIパッケージを改めて探した&lt;/h3>
&lt;p>たぶん3〜4年ぶりぐらいかな。&lt;br>
高機能なものは相変わらず下の2つが強そう:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/urfave/cli">https://github.com/urfave/cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>サブコマンドやフラグに対応しており、だいたいできないことはなさそう。&lt;/p>
&lt;h4 id="jessevdkgo-flags">jessevdk/go-flags&lt;/h4>
&lt;p>もう少し軽量な感じのだと以前は &lt;a href="https://github.com/jessevdk/go-flags">https://github.com/jessevdk/go-flags&lt;/a> というのが人気だったのだが、2年前で更新が止まっている。&lt;br>
go.mod がないのでGo Modulesにも対応してないみたい。&lt;br>
いま使うのはちょっとイマイチかも？&lt;/p>
&lt;h4 id="spf13pflag">spf13/pflag&lt;/h4>
&lt;p>その代わりになるかわからないが、 &lt;a href="https://github.com/spf13/pflag">https://github.com/spf13/pflag&lt;/a> というのを見つけた。&lt;br>
これも標準パッケージの flag の強化版で、ショートオプションを簡単に加えられたり、GNUスタイルの &lt;code>--help&lt;/code> のようなロングオプションを追加できる。&lt;/p>
&lt;p>flagの拡張版のようで、サブコマンドにも対応できるようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/program/go/3rd-pkg/#spf13pflag">プログラミング &amp;gt; Golang &amp;gt; pkg (3rd)#spf13/pflag&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="googlesubcommands">google/subcommands&lt;/h4>
&lt;p>サブコマンドで行くと &lt;a href="https://github.com/google/subcommands">https://github.com/google/subcommands&lt;/a> というのも見つけた。&lt;br>
これも依存がなくてシンプルのようだが、README読んだだけだと、使い方がイマイチわからん。&lt;/p>
&lt;p>検索したり、 pkg.go.dev で使っているコードを探して見たりした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.soushi.me/entry/2017/01/22/214441/">みんGO を読んでec2インスンスリストをタグ検索するコマンドラインツールを作ってみた - 平日インプット週末アウトプットぶろぐ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chromium.googlesource.com/infra/infra/+/1adef5a2cd6b/go/src/infra/cros/cmd/lucifer/admintaskcmd.go">https://chromium.googlesource.com/infra/infra/+/1adef5a2cd6b/go/src/infra/cros/cmd/lucifer/admintaskcmd.go&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フラグにも対応しており、いい感じにヘルプが生成できたりと、シンプルだけど必要十分な機能がまとまってるっぽい雰囲気を感じる。&lt;/p>
&lt;h4 id="posenercmd">posener/cmd&lt;/h4>
&lt;p>&lt;a href="https://github.com/posener/cmd">posener/cmd: The standard library flag package with its missing features&lt;/a>&lt;/p>
&lt;p>これは&lt;a href="https://awesome-go.com/#command-line">Awesome Go&lt;/a>から気になって開いて見た。&lt;br>
17 starsしかないが、google/subcommands相当のことはできそうで、google/subcommandsよりドキュメントがわかりやすい。&lt;/p></description></item><item><title>A: 2020-05-30</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200530/</link><pubDate>Sat, 30 May 2020 07:05:50 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200530/</guid><description>
&lt;h2 id="530">5/30&lt;/h2>
&lt;h3 id="ubuntuデスクトップのvs-codeでフォント変更">UbuntuデスクトップのVS Codeでフォント変更&lt;/h3>
&lt;p>ターミナルで記号が豆腐になってしまったので、Nerdフォントにしたのだが、すぐに反映されないような気がしたら、VS Codeの再起動が必要だった。&lt;/p>
&lt;p>キーワード: Visual Studio Code, Powerline Fonts&lt;/p>
&lt;h3 id="vs-codeでrustのプラグインがインストールできない">VS CodeでRustのプラグインがインストールできない&lt;/h3>
&lt;p>作業環境はUbuntuデスクトップ。&lt;br>
久しぶりにRustを触ったのがいけなかったのか、本来はVS Code上でポップアップ通知に従ってrlsやanalyzerをインストールすればいいはずなのだが、次のエラーで失敗した。&lt;/p>
&lt;pre tabindex="0">&lt;code>error: toolchain &amp;#39;stable-x86_64-unknown-linux-gnu&amp;#39; does not contain component &amp;#39;rls&amp;#39; for target &amp;#39;x86_64-unknown-linux-gnu&amp;#39;
&lt;/code>&lt;/pre>&lt;p>ググると次のイシューにヒットし、再インストールで解消した。&lt;/p>
&lt;p>&lt;a href="https://github.com/rust-lang/rls/issues/1273">https://github.com/rust-lang/rls/issues/1273&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>rustup uninstall stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rustup install stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/chikoski/items/53590914cc6aacc8916d">Visual Studio Code で Rust 開発を始めるには - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="cargo-editというのがある">cargo-editというのがある&lt;/h3>
&lt;p>2018-02-06更新の記事: &lt;a href="https://qiita.com/i2tsuki/items/8d90f7aa872671404a15">Cargo.toml の編集に cargo-edit を使う - Qiita&lt;/a>&lt;/p>
&lt;p>Rustのパッケージ管理ツールである &lt;code>cargo&lt;/code> CLIに以下の機能を追加してくれる:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cargo add &amp;lt;Package&amp;gt;&lt;/code> &amp;hellip; 依存パッケージを追加&lt;/li>
&lt;li>&lt;code>cargo rm &amp;lt;Package&amp;gt;&lt;/code> &amp;hellip; 依存パッケージの削除&lt;/li>
&lt;li>&lt;code>cargo list&lt;/code> &amp;hellip; 依存パッケージ一覧&lt;/li>
&lt;/ul>
&lt;p>絶対必要というほどではないが、便利かも。&lt;/p>
&lt;h3 id="rustのcli作成チュートリアル">RustのCLI作成チュートリアル&lt;/h3>
&lt;p>&lt;a href="https://rust-cli.github.io/book/tutorial/">A command line app in 15 minutes - Command Line Applications in Rust&lt;/a>をやっている。&lt;/p>
&lt;p>初めて出くわしたライブラリや言語仕様を都度、調べながらなので遅々として進まないが、いま&lt;a href="https://rust-cli.github.io/book/tutorial/impl-draft.html">1.3. First implementation&lt;/a>まで来たところ。&lt;/p>
&lt;h4 id="わからなかったこと">わからなかったこと&lt;/h4>
&lt;p>&lt;a href="https://rust-cli.github.io/book/tutorial/errors.html">Nicer error reporting - Command Line Applications in Rust&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Box&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">dyn&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">std&lt;/span>::&lt;span style="color:#000">error&lt;/span>::&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>のように、main()でResult型を返すようにしたところ、下のようにコンパイルエラーになってしまう。&lt;/p>
&lt;pre tabindex="0">&lt;code>error[E0308]: mismatched types
--&amp;gt; src/main.rs:13:14
|
13 | fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
| ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`
| |
| implicitly returns `()` as its body has no tail or `return` expression
...
28 | Ok(());
| - help: consider removing this semicolon
|
= note: expected enum `std::result::Result&amp;lt;(), std::boxed::Box&amp;lt;(dyn std::error::Error + &amp;#39;static)&amp;gt;&amp;gt;`
found unit type `()`
error: aborting due to previous error
For more information about this error, try `rustc --explain E0308`.
error: could not compile `grrs`.
&lt;/code>&lt;/pre>&lt;p>そういえばエラー情報を見てなかったので、見てみた。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rustc --explain E0308 | cat
This error occurs when the compiler was unable to infer the concrete type of a
variable. It can occur for several cases, the most common of which is a
mismatch in the expected type that the compiler inferred for a variable&amp;#39;s
initializing expression, and the actual type explicitly assigned to the
variable.
For example:
let x: i32 = &amp;#34;I am not a number!&amp;#34;;
// ~~~ ~~~~~~~~~~~~~~~~~~~~
// | |
// | initializing expression;
// | compiler infers type `&amp;amp;str`
// |
// type `i32` assigned to variable `x`
&lt;/code>&lt;/pre>&lt;p>まあ型のミスマッチが起こっているようだが、動かないコードを初心者向けのサンプルにしないでほしいという気持ちはなきにしもあらず。&lt;/p>
&lt;p>また、次のように書き換えたところ、別のエラーが出た。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cli&lt;/span>::&lt;span style="color:#000">from_args&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">content&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">std&lt;/span>::&lt;span style="color:#000">fs&lt;/span>::&lt;span style="color:#000">read_to_string&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map_err&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">format!&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Error reading `{}`: {}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>エラー:&lt;/p>
&lt;pre tabindex="0">&lt;code>error[E0277]: `std::path::PathBuf` doesn&amp;#39;t implement `std::fmt::Display`
--&amp;gt; src/main.rs:20:70
|
20 | .map_err(|err| CustomError(format!(&amp;#34;Error reading `{}`: {}&amp;#34;, &amp;amp;args.path, err)))?;
| ^^^^^^^^^^ `std::path::PathBuf` cannot be formatted with the default formatter
|
= help: the trait `std::fmt::Display` is not implemented for `std::path::PathBuf`
= note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
= note: required because of the requirements on the impl of `std::fmt::Display` for `&amp;amp;std::path::PathBuf`
= note: required by `std::fmt::Display::fmt`
= note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
&lt;/code>&lt;/pre>&lt;p>&lt;code>rustc --explain E0277&lt;/code> を見ると下のようだった:&lt;/p>
&lt;blockquote>
&lt;p>You tried to use a type which doesn&amp;rsquo;t implement some trait in a place which expected that trait.&lt;/p>
&lt;/blockquote>
&lt;p>traitが期待されているところで、traitが実装されていない型を使ってしまった、ということのようだ。&lt;/p>
&lt;blockquote>
&lt;p>Erroneous code example:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// here we declare the Foo trait with a bar method
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// we now declare a function which takes an object implementing the Foo trait
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>: &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>: &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// we now call the method with the i32 type, which doesn&amp;#39;t implement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// the Foo trait
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error: the trait bound `i32 : Foo` is not satisfied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下、略。&lt;/p>
&lt;p>これはPathBufの型がイカンようなので、&lt;code>format!&lt;/code> 氏が期待している型にしてあげれば動きそうな気がする。&lt;/p>
&lt;p>&lt;code>&amp;amp;args.path.display()&lt;/code> としたら動くようになった🎉&lt;/p>
&lt;ul>
&lt;li>該当コミット: &lt;a href="https://github.com/progrhyme/tutorials/commit/06cc24ffd7493dd2c3707db5c89e536e2941680d">https://github.com/progrhyme/tutorials/commit/06cc24ffd7493dd2c3707db5c89e536e2941680d&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="karabiner-elementsでかなキーでimeトグル">Karabiner-Elementsで「かな」キーでIMEトグル&lt;/h3>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2019/20191107">2019-11-07&lt;/a>にも同じことをやったのだけど、いつものMac機では&lt;a href="https://ei-kana.appspot.com/">⌘英かな&lt;/a>というアプリを使っていた。&lt;/p>
&lt;p>「⌘英かな」だと、トグルのキーを押してもまずモーダルウィンドウが表示されて、さくっと「日本語」&amp;lt;-&amp;gt;「英数」に切り替わってくれない。&lt;br>
ので、このMac機でもKarabiner-Elementsを使うことにした。&lt;/p>
&lt;p>作業時のOSバージョンはmacOS Catalina.&lt;/p>
&lt;p>設定は前回と同じで動いた。&lt;br>
dotfiles (myenv)にpushしておいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/a99cf5f96c84567e17036456782dabd42815cf6a">https://github.com/progrhyme/myenv/commit/a99cf5f96c84567e17036456782dabd42815cf6a&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>メニューバーのアイコンは毎回ちゃんと切り替わってくれるが、実際にはIMEが切り替わっていないことが、2回に1回ぐらい発生する&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-24</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200524/</link><pubDate>Sun, 24 May 2020 05:11:54 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200524/</guid><description>
&lt;h2 id="524">5/24&lt;/h2>
&lt;h3 id="macosでターミナルの操作動画をタイプしたキーと共に録画する">macOSでターミナルの操作動画をタイプしたキーと共に録画する&lt;/h3>
&lt;p>ブログ用にキャプチャ動画を撮りたいと思った。&lt;/p>
&lt;p>やり方は前に調べて&lt;a href="https://progrhy.me/tech-notes/a/os/mac/#%E7%94%BB%E9%9D%A2%E3%82%92%E5%8B%95%E7%94%BB%E3%81%A7%E6%92%AE%E5%BD%B1%E3%81%97%E3%81%A6gif%E3%82%A2%E3%83%8B%E3%83%A1%E3%81%AB%E5%A4%89%E6%8F%9B">OS &amp;gt; macOS#画面を動画で撮影してGIFアニメに変換&lt;/a>に書いておいた。&lt;/p>
&lt;h4 id="keycastrのインストールとセットアップ">KeyCastrのインストールとセットアップ&lt;/h4>
&lt;p>まず、キー入力を表示するためにKeyCastrを入れる。これは一択である。&lt;/p>
&lt;p>dmgボリュームをマウントし、アプリケーションをいつものフォルダにインストール。&lt;/p>
&lt;p>開発者が未確認のため実行できないようなので、FinderからCtrlキーを押しながらアプリをクリックして「開く」を選ぶ。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://support.apple.com/ja-jp/guide/mac-help/mh40616/mac">開発元が未確認のMacアプリケーションを開く - Apple サポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また、たぶんキーボード入力とかディスプレイとか（想像）にアクセスするため、アプリにアクセシビリティを与えてあげないといけない。　　
macOSの「システム環境設定」を開き、「セキュリティとプライバシー &amp;gt; アクセシビリティ &amp;gt; プライバシー」設定画面で、「下のアプリケーションにコンピュータの制御を許可。」のリストにKeyCastrを加える。&lt;br>
設定したら、KeyCastrを再起動する。&lt;/p>
&lt;p>これでタイプしたキーがKeyCastrのウィンドウに表示されるようになった。&lt;br>
ウィンドウが消える前にクリックアンドドラッグすることで、画面上の任意の位置に動かすことができる。&lt;br>
録画のため、ターミナル画面の右下隅あたりに移動しておく。&lt;br>
5文字ぐらいタイプしてみて、右側にはみ出さない程度の位置がベスト。&lt;/p>
&lt;h5 id="追記-macos-catalinaでの設定箇所の違い">追記: macOS Catalinaでの設定箇所の違い&lt;/h5>
&lt;p>Catalinaの場合、アクセシビリティの設定箇所が異なる。&lt;/p>
&lt;p>「システム環境設定」を開き、「セキュリティとプライバシー &amp;gt; 入力監視 &amp;gt; プライバシー」設定画面で、「ほかのアプリケーションの使用中でも、下のアプリケーションにキーボードからの入力の監視を許可。」のリストにKeyCastrを加える。&lt;/p>
&lt;h4 id="ターミナル画面の録画">ターミナル画面の録画&lt;/h4>
&lt;p>いま私はmacOS Mojaveを使っているので、「⌘⇧5」キーを押すことでスクリーンキャプチャを録ることができる。&lt;br>
やってみて気づいたが、このショートカットキーから静止画も撮れるようだ。&lt;/p>
&lt;p>ショートカットキーを押すと撮影位置を表す破線枠と、その下にメニューバーが現れる。
動画を録るには、破線枠で撮影位置を調整した後、メニューバーの真ん中右側の「選択部分を収録」を選んでENTERキーを押す。
すると、録画が開始される。&lt;/p>
&lt;p>録画が終わったらもう一度「⌘⇧5」キーを押して、メニューバーを呼び出し、停止ボタンを押す。すると、動画がデスクトップに保存される。&lt;/p>
&lt;p>なお、ターミナル画面を撮影するときは、以下に気をつけるとよいと思う:&lt;/p>
&lt;ul>
&lt;li>ウィンドウの透過はオフにしておく&lt;/li>
&lt;li>文字サイズを大きめにしておく&lt;/li>
&lt;li>入力するコマンドやキーのアンチョコを用意しておく&lt;/li>
&lt;/ul>
&lt;h4 id="動画をgifアニメ化">動画をGIFアニメ化&lt;/h4>
&lt;p>GIFアニメ化のアプリには、GiftedかPicGIF Liteかの選択肢があったが、Appストアの評価を見てPicGIF Liteに決めた。&lt;br>
使ってみたところ、無料でも機能が充実していて素晴らしいと思った。&lt;/p>
&lt;p>PicGIF Liteを起動し、先ほど録画した動画のmovファイルをドラッグアンドドロップすると、取り込むことができる。&lt;br>
ここでフレームレートを指定できる。
今回は秒間4フレームとした。&lt;/p>
&lt;p>動画を取り込んだ後、余分なフレームを削除したり、順番を入れ替えたりできるようだ。
最初と最後の余計な部分を削った。&lt;/p>
&lt;p>初期状態だとキャンバスが360x240と小さく、画像がぼやけてしまうので、大きめにしておくといい。&lt;br>
今回はプリセットに合わせることを考えておらず、余白が少し大きくなってしまったので、カスタムのキャンバスサイズを定義した。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;h3 id="gitpodというクラウドideがよさそう">GitpodというクラウドIDEがよさそう&lt;/h3>
&lt;p>&lt;a href="https://www.gitpod.io/">https://www.gitpod.io/&lt;/a>&lt;/p>
&lt;p>クラウドIDEでもあるEclipse TheiaベースのオンラインIDE.&lt;br>
GitHub, GitLabの既存プロジェクトをインポートしてワンクリックで開発環境を立ち上げられるそうだ。&lt;/p>
&lt;p>Eclipse TheiaとともにTypeFox社がファウンダー / 開発元。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kai_kou/items/40a7a579f1bce31d6a16">クラウドIDE「Gitpod」を試してみたら予想以上に使えそうだった - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/mouse_484/items/394a4984f749cc201422">Gitpodが最強過ぎる件について - Qiita&lt;/a>&lt;/li>
&lt;li>2020-04-03 &lt;a href="https://thinkit.co.jp/news/bn/17456">クラウド・デスクトップ環境コードエディタ「Eclipse Theia 1.0」リリース | Think IT（シンクイット）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mbaをcatalinaに上げた">MBAをCatalinaに上げた&lt;/h3>
&lt;p>Macに関する記事をQiitaに上げようと思ったが、せめてその前にCatalinaに上げるべきだろうという謎の義務感によりアップグレードを実行。&lt;/p>
&lt;p>KeyCastrが32ビット版で動かなくなったので、どうやら非公式のサイトからインストールしてしまっていたらしいと気づいた。&lt;/p>
&lt;p>&lt;code>brew cask&lt;/code> でインストールできると知ったので、その方式に変えた。&lt;/p>
&lt;ul>
&lt;li>Brewfileの更新: &lt;a href="https://github.com/progrhyme/myenv/commit/a6bc1671c49a786b16918b12e0b33010e94d5b52">https://github.com/progrhyme/myenv/commit/a6bc1671c49a786b16918b12e0b33010e94d5b52&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="macosのウイルス対策ソフト">macOSのウイルス対策ソフト&lt;/h3>
&lt;p>たまに調べる。&lt;br>
やはりノートンが老舗でバランス良く、安心感ある印象。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thehikaku.net/security/hikaku.html">セキュリティソフトの比較 2020 - the比較&lt;/a> &amp;hellip; これ表になっててわかりやすい&lt;/li>
&lt;li>&lt;a href="http://monomania.sblo.jp/article/60532423.html">比較2020&amp;rsquo;【Mac用】ウイルス対策ソフト31点のおすすめ；軽いセキュリティソフト: 家電批評モノマニア&lt;/a> &amp;hellip; 縦に長い。ざっと流し見した&lt;/li>
&lt;/ul>
&lt;h3 id="久しぶりにrustを触った">久しぶりにRustを触った&lt;/h3>
&lt;p>最後に触ったのは2年前ぐらいかな？&lt;br>
MacBookにツールチェインをインストールしていたが、 &lt;code>rustup update&lt;/code> で最新化できたっぽい。
1回目は一部コンポーネントの更新に失敗したが、再実行したら完璧になったっぽい。&lt;/p></description></item><item><title>A: 2020-05-23</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200523/</link><pubDate>Sat, 23 May 2020 16:42:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200523/</guid><description>
&lt;h2 id="523">5/23&lt;/h2>
&lt;h3 id="gcloud-promptにテストとciを足した">gcloud-promptにテストとCIを足した&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/gcloud-prompt/pull/1">https://github.com/progrhyme/gcloud-prompt/pull/1&lt;/a>&lt;/p>
&lt;p>複数のシェルから同時に触っても表示が壊れたりしないように、排他制御機構を入れたのだけど、逆にエンバグしそうで怖くなったので、テストを足した。&lt;/p>
&lt;p>テストのため、 &lt;code>gcloud&lt;/code> コマンドの挙動をなんちゃって実装したシェルスクリプトを書いたけど、これはスタブなのだろうか、モックなのだろうかというのが気になった。&lt;br>
とりあえずコメントでは「stub」ということにしておいたけど。&lt;/p>
&lt;p>See &lt;a href="https://progrhy.me/tech-notes/a/software/test/#%E3%82%B9%E3%82%BF%E3%83%96%E3%81%A8%E3%83%A2%E3%83%83%E3%82%AF%E3%81%AE%E9%81%95%E3%81%84">Software &amp;gt; テスト#スタブとモックの違い&lt;/a>&lt;/p>
&lt;p>今回実装した機能を鑑みるに、&lt;/p>
&lt;ul>
&lt;li>&lt;code>gcloud info&lt;/code> や &lt;code>gcloud config&lt;/code> が呼ばれたときに決まった結果を返す -&amp;gt; スタブ&lt;/li>
&lt;li>gcloud-prompt.shから &lt;code>gcloud config&lt;/code> コマンドが呼ばれたときに、呼ばれた回数を記録 -&amp;gt; モック&lt;/li>
&lt;/ul>
&lt;p>両方の性質を合わせ持ってることになるのかな？&lt;/p>
&lt;p>詳しい人いたら教えてほしい。&lt;/p>
&lt;h3 id="basher-link-がmacosで動かなかった">&lt;code>basher link&lt;/code> がmacOSで動かなかった&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/progrhyme/items/3a31282dfd0512a402cc#macos%E3%81%A7coreutils%E3%81%8C%E5%BF%85%E8%A6%81">シェルスクリプトのパッケージマネージャー「basher」の機能概要と使い方 - Qiita&lt;/a>に追記した通り。&lt;/p>
&lt;p>既に修正PRも送っている:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/basherpm/basher/pull/80">modify: Don&amp;rsquo;t use &amp;quot;readlink -f&amp;quot; in &amp;quot;resolve_link&amp;quot; by progrhyme · Pull Request #80 · basherpm/basher&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>デバッグに苦しんだ副産物として、 &lt;code>realpath&lt;/code> をエミュレートするBashスクリプトが出来た:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/bash-realpath">https://github.com/progrhyme/bash-realpath&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>デバッグコードがたくさん残っているので、実験的な意味合いが強いが。&lt;/p></description></item><item><title>A: 2020-05-22</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200522/</link><pubDate>Fri, 22 May 2020 21:47:32 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200522/</guid><description>
&lt;h2 id="522">5/22&lt;/h2>
&lt;h3 id="ubuntu-1804でzsh-syntax-highlightingを入れた">Ubuntu 18.04でzsh-syntax-highlightingを入れた&lt;/h3>
&lt;p>zshでの &lt;code>help&lt;/code> コマンドを探していたら &lt;a href="https://wiki.archlinux.jp/index.php/Zsh">https://wiki.archlinux.jp/index.php/Zsh&lt;/a> にたどり着き、&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting&lt;/a>の存在を知った。&lt;/p>
&lt;p>fish shellのようなシンタックスハイライトを提供してくれるプラグインらしい。&lt;br>
早速試してみることにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">INSTALL.md&lt;/a>によれば、UbuntuだとxenialかOBSのリポジトリからパッケージで入れるとよさそうだったが、macOSならHomebrewで入れれるようだったので、Linuxbrewでも行けるかまずはやってみることにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ brew install zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Installing dependencies &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> zsh-syntax-highlighting: patchelf, ncurses,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zlib, pcre, gettext, libbsd, expat,gdbm, openssl@1.1, berkeley-db, perl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>texinfo and zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>けっこう依存が色々あったが、無事にインストールできた。&lt;/p>
&lt;p>試しに &lt;code>source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code> を実行してみると、ちゃんとコマンドなどにハイライトが効くようになった。&lt;/p>
&lt;p>dotfilesの対応は &lt;a href="https://github.com/progrhyme/myenv/commit/63ce3a305e6cfa6b5b247e9eba1f8ef58edb94b5">https://github.com/progrhyme/myenv/commit/63ce3a305e6cfa6b5b247e9eba1f8ef58edb94b5&lt;/a> こんな感じで。&lt;/p>
&lt;p>これで私のZsh環境がまた一歩fish shellに近づいた。&lt;/p>
&lt;p>（追記）macOSにも入れた: &lt;a href="https://github.com/progrhyme/myenv/commit/71cf5a49b5ebc5fbd3dc190e5d3f46fa25d23d3b">https://github.com/progrhyme/myenv/commit/71cf5a49b5ebc5fbd3dc190e5d3f46fa25d23d3b&lt;/a>&lt;/p></description></item><item><title>A: 2020-05-19</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200519/</link><pubDate>Tue, 19 May 2020 20:59:11 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200519/</guid><description>
&lt;h2 id="519">5/19&lt;/h2>
&lt;h3 id="basherを使ってみた">basherを使ってみた&lt;/h3>
&lt;p>&lt;a href="../20200518/#clenv%E3%81%AFbasher%E3%81%A7%E5%AE%8C%E5%85%A8%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%89%E3%82%8C%E3%81%9D%E3%81%86">昨日見つけたbasherがclenvを置き換えられそうだった&lt;/a>ので、試してみた。&lt;/p>
&lt;p>作業環境はUbuntu 18.04.&lt;/p>
&lt;h4 id="install">Install&lt;/h4>
&lt;p>READMEの通りにやってみる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/basherpm/basher.git ~/.basher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$HOME&lt;/span>&lt;span style="color:#4e9a06">/.basher/bin:&lt;/span>&lt;span style="color:#000">$PATH&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>basher init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>basher init usage has changed, please specify the name of your shell as an argument:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>basher init - bash&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># or zsh, fish, sh etc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>For more information, check this PR: https://github.com/basherpm/basher/pull/77
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>初期化コマンドが変わったらしいので、やり直す。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>basher init - zsh&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage: basher &amp;lt;command&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&amp;lt;args&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Some useful basher commands are:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">help&lt;/span> Display &lt;span style="color:#204a87">help&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a &lt;span style="color:#204a87">command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commands List all available basher commands
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init Configure the shell environment &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> basher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>See &lt;span style="color:#4e9a06">&amp;#39;basher help &amp;lt;command&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> information on a specific command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher commands
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commands
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">help&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>link
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outdated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package-path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uninstall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使ってみる">使ってみる&lt;/h4>
&lt;p>まずはシェルスクリプトモジュールをinstallし、includeでシェルに読み込むというのを試す。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 自作のgcloud-promptをインストール&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher install progrhyme/gcloud-prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/progrhyme/.basher/cellar/packages/progrhyme/gcloud-prompt&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>: &lt;span style="color:#8f5902;font-style:italic"># 略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/gcloud-prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ include progrhyme/gcloud-prompt gcloud-prompt.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gcloud_prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default&lt;span style="color:#000;font-weight:bold">|&lt;/span>my-project1,asia-northeast1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># kube-ps1をインストール&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher install jonmosco/kube-ps1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/progrhyme/.basher/cellar/packages/jonmosco/kube-ps1&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>: &lt;span style="color:#8f5902;font-style:italic"># 略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ include jonmosco/kube-ps1 kube-ps1.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kube_ps1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>%&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%F&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>4&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>%&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>⎈ %&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%f%&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>%&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%F&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>1&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>%&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>reagent_experiment%&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%f%&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>:%&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%F&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>6&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>%&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>default%&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>%f%&lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubeoff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kube_ps1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>次は実行ファイルを含むリポジトリをinstallしてみる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ basher install progrhyme/git-wraps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ll ~/.basher/cellar/bin/git-*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">77&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-branch-clean -&amp;gt; /home/progrhyme/.basher/cellar/package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s/progrhyme/git-wraps/bin/git-branch-clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">70&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-pulls -&amp;gt; /home/progrhyme/.basher/cellar/packages/progr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hyme/git-wraps/bin/git-pulls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">74&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-pulls-all -&amp;gt; /home/progrhyme/.basher/cellar/packages/p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rogrhyme/git-wraps/bin/git-pulls-all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">72&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-skelton -&amp;gt; /home/progrhyme/.basher/cellar/packages/pro
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grhyme/git-wraps/bin/git-skelton
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">83&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-submodule-all-pull -&amp;gt; /home/progrhyme/.basher/cellar/p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ackages/progrhyme/git-wraps/bin/git-submodule-all-pull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> progrhyme progrhyme &lt;span style="color:#0000cf;font-weight:bold">81&lt;/span> 5月 &lt;span style="color:#0000cf;font-weight:bold">19&lt;/span> 20:55 /home/progrhyme/.basher/cellar/bin/git-submodule-delete -&amp;gt; /home/progrhyme/.basher/cellar/pac
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kages/progrhyme/git-wraps/bin/git-submodule-delete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jonmosco/kube-ps1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/gcloud-prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/git-wraps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ふつうに使えそう。&lt;br>
bin/* 以下のものはsymlinkなので、例えば実行ファイルが「同じリポジトリに含まれる lib/foo.sh に依存するシェルスクリプト」だとしても問題なく動くはず。&lt;/p>
&lt;p>一応このケースも試しておく:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ basher install progrhyme/shove
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ~/.basher/cellar/bin/shove
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Run tests by /bin/zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Test Summary Report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>All tests successful.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Files&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">Tests&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">Successes&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0, &lt;span style="color:#000">Failures&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Result: PASS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>問題なし。&lt;/p>
&lt;h4 id="パッケージリストの管理ができるかどうか">パッケージリストの管理ができるかどうか&lt;/h4>
&lt;p>Brewfileとかbundlerのようなことをやりたい。&lt;br>
clenvだと、 &lt;code>Clamfile&lt;/code> っていうので管理できるようにしていた。&lt;/p>
&lt;p>どうやらそれそのものの機能はないようだけど、ローカルのディレクトリをパッケージとしてインストールする &lt;code>link&lt;/code> サブコマンドと、 &lt;code>package.sh&lt;/code> に記した依存するパッケージを追加でインストールする、という機能によって、できなくはない、ということがわかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ mkdir test-basher-package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOS &amp;gt; test-basher-package/package.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">DEPS=progrhyme/shove:progrhyme/toolbox
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher link test-basher-package progrhyme/test-basher-package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Package &lt;span style="color:#4e9a06">&amp;#39;progrhyme/shove&amp;#39;&lt;/span> is already present
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/progrhyme/.basher/cellar/packages/progrhyme/toolbox&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>: &lt;span style="color:#8f5902;font-style:italic"># 略&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>shoveはさっきインストールしたのでスキップされている。&lt;/p>
&lt;p>このテスト用のパッケージをuninstallしても、依存パッケージは残ったまま。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ basher uninstall progrhyme/test-basher-package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ basher list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jonmosco/kube-ps1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/gcloud-prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/git-wraps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/shove
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>progrhyme/toolbox
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちなみにこの &lt;code>basher link&lt;/code> で実際に起こることしては &lt;code>~/.basher/cellar/packages/&lt;/code> にsymlinkされるだけなので、処理としては軽い。&lt;/p>
&lt;p>なので、例えば適当なディレクトリに &lt;code>package.sh&lt;/code> を置いて、そこに DEPS で自分が使いたいパッケージのリストを記しておき、一時的にそのディレクトリを &lt;code>basher link&lt;/code> でローカルインストールした後、削除する、ということをすれば、DEPSに記したパッケージリストをインストールできる。&lt;/p>
&lt;p>…が、わざわざそんなことをするぐらいなら、パッケージリストを配列にでも入れてforループで処理してしまえば十分だと思った。&lt;/p>
&lt;p>（追記）自分では&lt;a href="https://github.com/progrhyme/myenv/compare/de911093ac1493edb80b402df97f2e55a6e38a47...96760448e5f819aeaa5d00af19590c724995e703#diff-c52f04761593f00b4f12c50e8460a1ee">こんな感じ&lt;/a>で実装した。&lt;br>
後で、この &lt;code>basher_bundle_install&lt;/code> を実行するだけのコマンド &lt;code>basher-bundle-install&lt;/code> を作った。&lt;/p>
&lt;h3 id="ubuntu-zshでbasherに乗り換えてみた">Ubuntu Zshでbasherに乗り換えてみた&lt;/h3>
&lt;p>挙動を確認できたので、clenv -&amp;gt; basherへの移行を進めようかと思って、やってみた。&lt;/p>
&lt;p>下のような形で対応できた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/compare/de911093ac1493edb80b402df97f2e55a6e38a47...96760448e5f819aeaa5d00af19590c724995e703">Comparing de911093ac&amp;hellip;96760448e · progrhyme/myenv&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一応他の環境には影響を与えないようにやったけど、他の環境でもすぐに乗り換えてしまおうと思っている。&lt;/p>
&lt;h4 id="追記-その後の対応">追記: その後の対応&lt;/h4>
&lt;ul>
&lt;li>5/22 Ubuntu Bashで乗り換え
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/f3430b33ecd261684b518224ff0eb1f42d3ad594">https://github.com/progrhyme/myenv/commit/f3430b33ecd261684b518224ff0eb1f42d3ad594&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>5/23 Mac Book Airで乗り換え
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/2e581fcbd0142250708aeaf7152f76569b72ad7a">https://github.com/progrhyme/myenv/commit/2e581fcbd0142250708aeaf7152f76569b72ad7a&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-18</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200518/</link><pubDate>Mon, 18 May 2020 22:29:04 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200518/</guid><description>
&lt;h2 id="518">5/18&lt;/h2>
&lt;h3 id="clenvは2つのプロジェクトに分割した方がいいかもしれない">clenvは2つのプロジェクトに分割した方がいいかもしれない&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/clenv">https://github.com/progrhyme/clenv&lt;/a>&lt;/p>
&lt;p>拙作のシェル環境管理ツールだが、やりたいことと実現方法がマッチしてないかも？ OR やりたいことが曖昧かも？ という気がしてきた。&lt;/p>
&lt;p>主なユースケース:&lt;/p>
&lt;ol>
&lt;li>実行ファイルをPATHの通ったところに置きたい&lt;/li>
&lt;li>シェルスクリプトモジュールを管理したい。任意のスクリプトから好きなときに呼び出して使ったり、自分のシェル環境で読み込んで使いたい&lt;/li>
&lt;/ol>
&lt;p>備考:&lt;/p>
&lt;ul>
&lt;li>1 はシェルスクリプトだけでなく、バイナリ形式で配布されているものも取得できた方が便利。参考: &lt;a href="https://github.com/Songmu/ghg">https://github.com/Songmu/ghg&lt;/a>
&lt;ul>
&lt;li>シェルスクリプトの中には単独で完結してなくて、リポジトリに同梱しているシェルスクリプトに依存しているものもあるので、そういうのは上手くやらないといけない。これはclenvで既に達成している（はず）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>現状の（構想の）問題点:&lt;/p>
&lt;ul>
&lt;li>1 をやるにしろ、2 をやるにしろ、モジュールのバージョン管理はtoo muchである&lt;/li>
&lt;li>環境を分けて管理する機能も要らない。自分でも &lt;code>default&lt;/code> しか使ってないし&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/cli/shell/pkg-man/">シェル &amp;gt; パッケージ管理&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="新プロジェクト構想">新プロジェクト構想&lt;/h4>
&lt;p>①実行ファイル取って来る君&lt;/p>
&lt;p>仮称「binpack」とする。&lt;/p>
&lt;ul>
&lt;li>ghgとclamの機能を混ぜる&lt;/li>
&lt;li>clenvみたいに複数環境は要らなくて、最低限、実行ファイルを所定のパスに展開できればいい&lt;/li>
&lt;li>シェルスクリプトで書く必要なし。配布が面倒なのは嫌なので1バイナリにできて書きやすいGoかRustで、GitHubのライブラリがあるといいな&lt;/li>
&lt;/ul>
&lt;p>Issues:&lt;/p>
&lt;ul>
&lt;li>実行ファイル名が衝突したらどうするか？&lt;/li>
&lt;/ul>
&lt;p>②シェルスクリプトのモジュール管理&lt;/p>
&lt;p>仮称「shellter」とする。&lt;/p>
&lt;ul>
&lt;li>clenvみたいに &lt;code>lib/&lt;/code> にsymlink貼る必要なし。 &lt;code>modules/$module&lt;/code> とかに展開したら、所定のルールで読み込めればいい&lt;/li>
&lt;li>cllibみたいに動的にロードするシェル関数もあるといい&lt;/li>
&lt;li>&lt;code>load $module&lt;/code> とやったら、 &lt;code>$module&lt;/code> で所定のパスにあるスクリプトが読めればいいだろう&lt;/li>
&lt;/ul>
&lt;h4 id="既にやられていたかも">既にやられていたかも&lt;/h4>
&lt;p>RustのGitHubライブラリ探してたら、丁度作ろうとしていたものを見つけたかも？&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://crates.io/crates/sheldon">sheldon - crates.io: Rust Package Registry&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これでいいんじゃないか？&lt;/p>
&lt;p>……うーん、実行ファイルを含むパッケージの場合、各ディレクトリごとにPATHに入れることはできるようだが、まとめて &lt;code>$SHLDON_ROOT/bin/&lt;/code> とかに入れれるかわからん。&lt;br>
どっちかというと、シェルプラグイン管理に重きを置かれている印象。&lt;br>
少し拡張すればできそうだけど。&lt;/p>
&lt;h4 id="追記-completion対応">追記: COMPLETION対応&lt;/h4>
&lt;p>実行ファイルとセットでcompletionファイルをロードするようにしたいこともある。&lt;br>
そういう場合はやっぱりclenvやbasherみたいにセットで管理できた方が便利かな。&lt;/p>
&lt;h3 id="clenvはbasherで完全に置き換えられそう">clenvはbasherで完全に置き換えられそう&lt;/h3>
&lt;p>&lt;a href="https://github.com/basherpm/basher">https://github.com/basherpm/basher&lt;/a>&lt;/p>
&lt;p>ライブラリのロードが &lt;code>include user/repo lib/file.sh&lt;/code> みたいにして行けるので、一昨日作った gcloud-prompt だったら、 &lt;code>include progrhyme/gcloud-prompt gcloud-prompt.sh&lt;/code> で行ける。簡単。&lt;/p>
&lt;p>どうもパッケージの &lt;code>bin/&lt;/code> 以下に置いたものが自動でデフォルトだと &lt;code>$HOME/.basher/celler/bin/&lt;/code> に展開されるっぽい。symlinkかもしれんが。&lt;/p></description></item><item><title>A: 2020-05-17</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200517/</link><pubDate>Sun, 17 May 2020 16:22:33 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200517/</guid><description>
&lt;h2 id="517">5/17&lt;/h2>
&lt;h3 id="gcloud-prompt作った">gcloud-prompt作った&lt;/h3>
&lt;p>これ: &lt;a href="https://github.com/progrhyme/gcloud-prompt">https://github.com/progrhyme/gcloud-prompt&lt;/a>&lt;/p>
&lt;p>作り始める前に、一応既存のがないかは調べた。
下が見つかった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/antoniomo/gcloud-ps1">https://github.com/antoniomo/gcloud-ps1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ocadaruma/zsh-gcloud-prompt">https://github.com/ocadaruma/zsh-gcloud-prompt&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上はactiveなconfigurationを表示しているだけ。&lt;br>
下は逆に、 &lt;code>default&lt;/code> configuration前提で、 &lt;code>account&lt;/code>, &lt;code>project&lt;/code> の情報を表示している。&lt;/p>
&lt;p>自分のニーズとしては、 &lt;code>project&lt;/code> や &lt;code>compute.region&lt;/code> を入れたい。&lt;br>
あまりconfigurationsを活用できてないけど、なるべくconfigurationsで管理していきたい気持ちはあるので、activeなconfigurationも表示したいと思った。&lt;/p>
&lt;p>…で、上のgcloud-ps1のコードを参考にしながら、とりあえずMacの.zshrcにベタに実装していたが、愚直に実装するとgcloudコマンドが遅すぎて使い物にならないことに気がついた。&lt;/p>
&lt;p>コマンド1回で0.3sぐらいかかってたので、configuration, project, compute.regionをそれぞれ取得していたら、ENTERを打つたびに1秒待つことになる。&lt;br>
さすがに無理である。&lt;/p>
&lt;h4 id="activeなconfigurationの取得">activeなconfigurationの取得&lt;/h4>
&lt;p>そこで、activeなconfigurationの取得については、環境変数CLOUDSDK_ACTIVE_CONFIG_NAMEが設定されていればそちらを、そうでなければ &lt;code>$HOME/.config/gcloud/active_config&lt;/code> を直接見ることにした。&lt;/p>
&lt;h4 id="configパラメータの取得">configパラメータの取得&lt;/h4>
&lt;p>…で、configパラメータの取得だが、現在の設定リストは &lt;code>default&lt;/code> configurationであれば &lt;code>$HOME/.config/gcloud/configurations/config_default&lt;/code> に保存されている。&lt;br>
ただし、INIファイル形式で、さすがにシェルスクリプトで自前でパースするのはしんどそう。&lt;/p>
&lt;p>CLIリファレンスを読み込んでいると、 &lt;code>gcloud config list --format=FORMAT&lt;/code> オプションで任意のキーを所望のフォーマットで取得できることがわかった。&lt;/p>
&lt;p>これも毎回実行していると遅いので、コマンドの実行結果をキャッシュファイルに書いて、上のファイルとのタイムスタンプを比較して、更新されていなければキャッシュファイルをcatして返すようにした。&lt;/p>
&lt;h4 id="clenv対応">clenv対応&lt;/h4>
&lt;p>submoduleにしたくなかったので、&lt;a href="https://github.com/progrhyme/clenv/blob/master/bin/clam">clenv/bin/clam&lt;/a>でinstallできるようにした。&lt;br>
なにげに自作のシェルスクリプトライブラリを自分のシェル環境で常にロードして使うのは初めてだったのかも？&lt;/p>
&lt;p>自分で作ったclenvの使い方をすっかり忘れていたので、ソースを解読して使い方を把握した。&lt;/p>
&lt;pre tabindex="0">&lt;code>name=gcloud-prompt
version=0.5.0
libraries=&amp;#34;gcloud-prompt.sh&amp;#34;
&lt;/code>&lt;/pre>&lt;p>上を &lt;code>clam.spec&lt;/code> ってファイルで作っておくとclamでインストールして、 &lt;code>gcloud-prompt.sh&lt;/code> を&lt;a href="https://github.com/progrhyme/clenv/blob/master/bin/cload">clenv/bin/cload&lt;/a>で読み込めるところに配置してくれる。&lt;/p>
&lt;p>シェル環境の方の対応コミットは下:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/7d9b708187836fcafc03591808e17eda88dded62">https://github.com/progrhyme/myenv/commit/7d9b708187836fcafc03591808e17eda88dded62&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>clenvのライブラリをロードするコードがなかったので、追加した。&lt;/p></description></item><item><title>A: 2020-05-16</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200516/</link><pubDate>Sat, 16 May 2020 01:56:37 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200516/</guid><description>
&lt;h2 id="516">5/16&lt;/h2>
&lt;h3 id="zshをfishっぽくいい感じにできた">zshをfishっぽくいい感じにできた&lt;/h3>
&lt;p>&lt;a href="../20200513/#fish%E3%81%A7%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%84%E3%81%84%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E6%A9%9F%E8%83%BD%E3%81%AFzsh%E3%81%A7%E3%82%82%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%86">5/13にfishでちょっといいと思った機能はzshでもできそう&lt;/a>だと気がついたので、やってみた。&lt;br>
…で、やってみたらできた。&lt;/p>
&lt;p>作業環境はUbuntu 18.04.&lt;/p>
&lt;p>やったこと:&lt;/p>
&lt;ol>
&lt;li>oh-my-zshをインストール&lt;/li>
&lt;li>テーマを選ぶ&lt;/li>
&lt;li>shrink-pathを設定し、プロンプトをいい感じに調整&lt;/li>
&lt;li>zsh-autosuggestionsをインストールして設定&lt;/li>
&lt;/ol>
&lt;p>1つずつ軽く振り返っておく。&lt;/p>
&lt;h4 id="oh-my-zshをインストール">oh-my-zshをインストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh&lt;/a>&lt;/p>
&lt;p>README.mdの通りに。一応 tools/install.sh の中身はざっと見た。&lt;br>
zshじゃないとデフォルトではchshされてしまうのと、インストール後に &lt;code>zsh -l&lt;/code> が走ることは確認した上で、そのまま実行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sh -c &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>元の ~/.zshrc は退避された上で、oh-my-zshが作った ~/.zshrc が配置されていることに気づいた。&lt;br>
とりあえず自分の ~/.zshrc に戻して、oh-my-zshが作った ~/.zshrc の記述を ~/.zshenv と ~/.zshrc に追記する。&lt;/p>
&lt;p>これだけでも &lt;code>PROMPT&lt;/code> が変わって、見た目が変わったなという印象。&lt;/p>
&lt;p>ただ、自分は &lt;code>RPROMPT&lt;/code> に色々詰め込んでいるので、調整が必要。&lt;/p>
&lt;p>プロンプトについては次とその次のステップで調整する。&lt;/p>
&lt;h4 id="テーマを選ぶ">テーマを選ぶ&lt;/h4>
&lt;p>&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&lt;/a> から選ぶ。&lt;br>
Externalなテーマもあるらしいけど、今は興味なし。&lt;br>
上から見ていって、&lt;a href="https://github.com/agnoster/agnoster-zsh-theme">agnoster&lt;/a>がよさげだったので、君に決めた。&lt;/p>
&lt;p>これもデフォルトだと左PROMPTが長くて、しかもリポジトリのREADMEの通りにやろうとしても &lt;code>AGNOSTER_*&lt;/code> な変数はセットされていない。&lt;/p>
&lt;p>仕方ないので、&lt;code>~/.oh-my-zsh/themes/agnoster.zsh-theme&lt;/code> で定義されている &lt;code>build_prompt()&lt;/code> 関数を自分の ~/.zshrc の中でオーバーライドすることにした。&lt;/p>
&lt;p>&lt;code>agnoster.zsh-theme&lt;/code> を覗くと次のようになっていたので、それで行けそうだと思った。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ tail ~/.oh-my-zsh/themes/agnoster.zsh-theme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">## Main prompt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build_prompt&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RETVAL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_virtualenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_bzr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_hg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PROMPT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;%{%f%b%k%}$(build_prompt) &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="shrink-pathを設定しプロンプトをいい感じに調整">shrink-pathを設定し、プロンプトをいい感じに調整&lt;/h4>
&lt;p>shrink-pathは標準プラグインとしてoh-my-zshに同梱されている。&lt;/p>
&lt;p>&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path&lt;/a>&lt;/p>
&lt;p>このパスにREADME.mdも置かれているので、読むと使い方がわかる。&lt;/p>
&lt;p>利用するには .zshrc 内で &lt;code>plugins+=(shrink-path)&lt;/code> すればいい。&lt;/p>
&lt;p>それから、 &lt;code>PROMPT&lt;/code> や &lt;code>RPROMPT&lt;/code> 内に &lt;code>'$(shrink-path -f)'&lt;/code> と記すと、ホームディレクトリからの絶対パスで、親ディレクトリは先頭1文字に縮めて表示してくれる。&lt;/p>
&lt;p>最終的に、agnoster.zsh-themeの &lt;code>build_prompt()&lt;/code> 関数を次のように書き換えた:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>build_prompt&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RETVAL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_segment blue &lt;span style="color:#000">$CURRENT_FG&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>shrink_path -f&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt_end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで下のような感じになった。&lt;/p>
&lt;figure>&lt;img src="ohmyzsh_capture.png"
alt="terminal screenshot with oh-my-zsh"/>
&lt;/figure>
&lt;h4 id="zsh-autosuggestionsをインストールして設定">zsh-autosuggestionsをインストールして設定&lt;/h4>
&lt;p>&lt;a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions&lt;/a>&lt;/p>
&lt;p>INSTALL.md に従って、次のコマンドを実行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">ZSH_CUSTOM&lt;/span>&lt;span style="color:#204a87;font-weight:bold">:-&lt;/span>&lt;span style="color:#000;font-weight:bold">~/.oh-my-zsh/custom&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>/plugins/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>残念ながら今の環境は256色に対応してないみたいで、次のように設定した:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;fg=green,bold&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下のような感じでサジェストが出る。&lt;/p>
&lt;figure>&lt;img src="zsh_autosuggestions.png"
alt="screenshot of zsh-autosuggestions"/>
&lt;/figure>
&lt;p>&lt;code>Ctrl+e&lt;/code> or &lt;code>Ctrl+f&lt;/code> でサジェスト候補を選択できる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/hinatades/items/d38be4830191f251935d">ターミナルでコマンド履歴の入力補完 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>もうこれは完全にfishと言っていいだろう。&lt;/p>
&lt;p>…というか、自分にとってはfishをセットアップするより楽だった気がする。&lt;/p>
&lt;p>今回の変更は次の2コミットに該当する:&lt;/p>
&lt;ul>
&lt;li>dotfilesの変更: &lt;a href="https://github.com/progrhyme/myenv/commit/b4ef98a8b1ef9ae6f0a39532590d79c8161fc161">https://github.com/progrhyme/myenv/commit/b4ef98a8b1ef9ae6f0a39532590d79c8161fc161&lt;/a>&lt;/li>
&lt;li>セットアップスクリプトへの反映: &lt;a href="https://github.com/progrhyme/myenv/commit/96a552660c9b79dcf73a1e87a8fc6664d33864f4">https://github.com/progrhyme/myenv/commit/96a552660c9b79dcf73a1e87a8fc6664d33864f4&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※oh-my-zshが勝手に &lt;code>PAGER=less&lt;/code> と &lt;code>LESS=-R&lt;/code> を設定していやがったので、.zshrc内でunsetしている。&lt;/p>
&lt;h3 id="macbookでもoh-my-zshをセットアップ">MacBookでもoh-my-zshをセットアップ&lt;/h3>
&lt;p>Ubuntuと同様で、特にハマることはなかった。&lt;/p>
&lt;p>セットアップコードのリファクタリングを行った。&lt;/p>
&lt;ul>
&lt;li>リファクタ: &lt;a href="https://github.com/progrhyme/myenv/commit/dac7a0695ec3d81269d0adc6bfc9c2750753be3a">https://github.com/progrhyme/myenv/commit/dac7a0695ec3d81269d0adc6bfc9c2750753be3a&lt;/a>&lt;/li>
&lt;li>macOS用の対応: &lt;a href="https://github.com/progrhyme/myenv/commit/e35842708298c0803a2f655affc56d3c653f61af">https://github.com/progrhyme/myenv/commit/e35842708298c0803a2f655affc56d3c653f61af&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="macbookにiterm2を入れて設定してみた">MacBookにiTerm2を入れて設定してみた&lt;/h3>
&lt;p>&lt;a href="../20200513/#iterm2%E3%81%AF%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%ABapp%E3%81%A8%E6%AF%94%E3%81%B9%E3%81%A6%E4%BD%95%E3%81%8C%E8%89%AF%E3%81%84%E3%81%AE%E3%81%8B">iTerm2良いよーっていうミームを受け取った&lt;/a>ので、試しに使ってみることにした。&lt;/p>
&lt;p>See also &lt;a href="https://progrhy.me/tech-notes/a/software/terminal/iterm2/">Software &amp;gt; ターミナル &amp;gt; iTerm2&lt;/a>&lt;/p>
&lt;h4 id="install">Install&lt;/h4>
&lt;p>&lt;a href="https://iterm2.com/downloads.html">https://iterm2.com/downloads.html&lt;/a> から最新安定版を入手して普通にインストール。&lt;/p>
&lt;h4 id="初期設定">初期設定&lt;/h4>
&lt;p>とりあえず &lt;code>Preferences &amp;gt; Profiles&lt;/code> で「Default」プロファイルを弄る:&lt;/p>
&lt;ul>
&lt;li>Colors &amp;hellip; デフォルトの「Dark Background」をベースに微調整&lt;/li>
&lt;li>Text
&lt;ul>
&lt;li>フォントを「Roboto Mono for Powerline」の16ptに&lt;/li>
&lt;li>よくわからんが「Blinking text」にチェック&lt;/li>
&lt;li>「Use built-in Powerline glyphs」にもチェックしてみた。フォントの見た目がちょっと変わった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Window
&lt;ul>
&lt;li>透明度を適当に設定&lt;/li>
&lt;li>Settings for New Windows
&lt;ul>
&lt;li>幅と高さをいい感じに調整&lt;/li>
&lt;li>Screen: 「Screen with Cursor」にした&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Terminal &amp;hellip; &lt;code>Scrollback lines&lt;/code> を「3000」にした&lt;/li>
&lt;/ul>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>Colors:
&lt;ul>
&lt;li>&lt;code>Cursor Colors &amp;gt; Cursor Boost&lt;/code> が何の設定なのかわからん&lt;/li>
&lt;li>ディレクトリやシェルスクリプトのコメントがCyan.Brightになるのが違和感ある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>また、 &lt;code>Preferences &amp;gt; Keys &amp;gt; Hotkey&lt;/code> でホットキーも設定しておく。&lt;br>
なんとなく &lt;code>⌥ + ⌘ + ENTER&lt;/code> にした。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/koh110/items/b7e9471330308fdb7250">iterm2の設定覚え書き - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="shell-integrationの導入">Shell Integrationの導入&lt;/h4>
&lt;p>&lt;a href="https://www.rasukarusan.com/entry/2019/04/13/180443">俺よりiTerm使いこなしてるやつおる？ - ハイパーマッスルエンジニアになりたい&lt;/a>によれば、とりあえずShell Integrationは入れろということらしい。&lt;br>
ので、素直に入れてみる。&lt;/p>
&lt;p>&lt;a href="https://www.iterm2.com/documentation-shell-integration.html">https://www.iterm2.com/documentation-shell-integration.html&lt;/a>&lt;/p>
&lt;p>のガイドに従い、次のコマンドでzsh用のスクリプトを取得:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl -L https://iterm2.com/shell_integration/zsh &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>-o ~/.iterm2_shell_integration.zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>読み込むと、プロンプトの左端に小さな矢印がついて、実行コマンドの成否がわかる。&lt;br>
機能がagnosterのプロンプトと被っているので、.zshrcを次のように変更して、iTerm2のShell Integrationを有効化したら、agnosterのプロンプトを調整することにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/232924a0cd51ab4902a3e45a6a3ff25e2d0b5bd8">https://github.com/progrhyme/myenv/commit/232924a0cd51ab4902a3e45a6a3ff25e2d0b5bd8&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そういえばこれ、iterm2_shell_integration.zsh を読み込んだ後に &lt;code>PROMPT&lt;/code> を設定してるけど、ちゃんと動いてるな。不思議だ。。&lt;/p>
&lt;p>Auto Command Completionも有効にしてみた。&lt;br>
これをONにすると、zsh-autosuggestionの方はカニバって動かないようだったので、Shell Integrationが有効なときはzsh-autosuggestionを使わないようにした:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/dd1b7d023fdcd9b69343e6e57a2d7280d6071003">https://github.com/progrhyme/myenv/commit/dd1b7d023fdcd9b69343e6e57a2d7280d6071003&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>それにしても、Shell Integrationの機能の多くは既にpecoで実現していたな。。&lt;/p>
&lt;p>（追記）Auto Command Completionはたくさん表示されると迷うし、タブ補完が効かなくなってちょっとお節介な感じなので、やっぱりzsh-autosuggestionに戻した。&lt;/p>
&lt;h4 id="所感">所感&lt;/h4>
&lt;p>慣れたら少しは生産性上がるかも。&lt;/p>
&lt;h3 id="iterm2だとvimのdefault-colorschemeの設定が変わっている">iTerm2だとVimのdefault colorschemeの設定が変わっている&lt;/h3>
&lt;p>なぜかわからないが、ターミナル.appと比べると &lt;code>:highlight&lt;/code> の結果にだいぶ差があった。&lt;/p>
&lt;p>iTerm2が256色対応だから？&lt;/p>
&lt;p>.vimrc で &lt;code>colorscheme elflord&lt;/code> を設定するとややマシになった。&lt;/p>
&lt;p>参考: &lt;a href="https://progrhy.me/tech-notes/a/software/editor/vim/vimrc/#colorscheme">vimrc#colorscheme&lt;/a>&lt;/p></description></item><item><title>A: 2020-05-15</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200515/</link><pubDate>Fri, 15 May 2020 23:01:33 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200515/</guid><description>
&lt;h2 id="515">5/15&lt;/h2>
&lt;h3 id="docsy-on-hugoでlunrjsによる検索の日本語対応をした">Docsy on HugoでLunr.jsによる検索の日本語対応をした&lt;/h3>
&lt;p>当サイトで日本語検索が上手く行かないことに気がついた。&lt;/p>
&lt;p>現在、Lunr.jsによるローカル検索を使っているが、Lunr.jsはデフォルトでは日本語に対応してないそうだ。&lt;br>
そろそろGoogleカスタム検索エンジンに移行する機運か…と思いつつも、まずは日本語対応できないか少し調べてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.kozakana.net/2019/03/lunr-node/">JSの全文検索lunrをNode.jsで使う | Simple is Beautiful.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これを参考に下の対応で行けた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/tech-notes/commit/8aad142a51747ccd9a4dbfbb6498aad5fe489905">https://github.com/progrhyme/tech-notes/commit/8aad142a51747ccd9a4dbfbb6498aad5fe489905&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>lunr.min.js は unpkg.com でホストされてるのだけど、 lunr-languages はなさそうだった。&lt;/p>
&lt;p>なんか適当に「lunr-languages cdn」とかググってたら &lt;a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/&lt;/a> に行き着いて、CDN経由でJS取得するURLが得られた。&lt;/p>
&lt;p>インターネットって素晴らしい。&lt;/p></description></item><item><title>A: 2020-05-14</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200514/</link><pubDate>Thu, 14 May 2020 00:51:16 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200514/</guid><description>
&lt;h2 id="514">5/14&lt;/h2>
&lt;h3 id="kubectlのctxnsをプロンプトに表示できるようにした">kubectlのctx/nsをプロンプトに表示できるようにした&lt;/h3>
&lt;p>とりあえず個人用のmacOSだけ。下のコミットで実現:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/a9363d648db469a493de55b60178ae5a2d25ce44">https://github.com/progrhyme/myenv/commit/a9363d648db469a493de55b60178ae5a2d25ce44&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>どうせみんなやってるだろうと思ってググったら、案の定いっぱい出てきた。&lt;br>
スパブラさんがzshのプラグイン的なものを作っていて、使いやすそうだったのでこれを使うことにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/superbrothers/zsh-kubectl-prompt">https://github.com/superbrothers/zsh-kubectl-prompt&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>vcs_info&lt;/code> と合わせるとごちゃごちゃしそうだったので、 &lt;code>precmd()&lt;/code> の中で &lt;code>RPROMPT&lt;/code> を料理するようにリファクタした。&lt;/p>
&lt;p>（追記）
Ubuntuでも設定した。&lt;/p>
&lt;p>GKEのcontextとか長すぎてつらいなって思ったら、 &lt;code>kubectl config rename-context&lt;/code> ってコマンドがあることを知った。&lt;/p>
&lt;h4 id="bash対応">bash対応&lt;/h4>
&lt;p>&lt;a href="https://github.com/jonmosco/kube-ps1">https://github.com/jonmosco/kube-ps1&lt;/a> を見つけた。zshにも対応してるので、最初からこっちでもよかったかも。&lt;br>
某現場では、一旦submoduleで組み込んだ。 &lt;code>.bashrc&lt;/code> に下のように追記した:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># kube-ps1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>toggle_kubectl_prompt&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#204a87;font-weight:bold">:-&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$__base_ps1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\$(kube_ps1)\n&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __no_kubectl_configured &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! &lt;span style="color:#204a87">command&lt;/span> -v kubectl &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&amp;gt;/dev/null&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__no_kubectl_configured&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> ! kubectl config current-context &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&amp;gt;/dev/null&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__no_kubectl_configured&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __no_kubectl_configured &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">source&lt;/span> &lt;span style="color:#000">$MYENV_ROOT&lt;/span>/submodule/kube-ps1/kube-ps1.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">KUBE_PS1_PREFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;lt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">KUBE_PS1_SUFFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$PS1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __KUBECTL_PROMPT__ &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Show Kubernetes context/namespace on prompt.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Exec \&amp;#34;toggle_kubectl_prompt\&amp;#34; to hide/unhide.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\$(kube_ps1)\n&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>&lt;code>toggle_kubectl_prompt&lt;/code> はzsh同様、ifの中でもいいかも&lt;/li>
&lt;li>&lt;code>KUBE_PS1_(PREFIX|SUFFIX)&lt;/code> は色変えられなかった&lt;/li>
&lt;/ul>
&lt;h3 id="pecoでkubectxns相当の操作">pecoでkubectx/ns相当の操作&lt;/h3>
&lt;ul>
&lt;li>Bash: &lt;a href="https://github.com/progrhyme/dotfiles/commit/65cb850e53a7006d065185e8ad12cb09a53c6127">https://github.com/progrhyme/dotfiles/commit/65cb850e53a7006d065185e8ad12cb09a53c6127&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-13</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200513/</link><pubDate>Wed, 13 May 2020 22:23:49 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200513/</guid><description>
&lt;h2 id="513">5/13&lt;/h2>
&lt;h3 id="iterm2はターミナルappと比べて何が良いのか">iTerm2はターミナル.appと比べて何が良いのか？&lt;/h3>
&lt;p>&lt;a href="https://progrhy.me/tech-notes/a/software/terminal/iterm2/">Software &amp;gt; ターミナル &amp;gt; iTerm2&lt;/a>にもメモったけど、「それ全部ターミナル.app + tmuxでできるな」って思った。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://webrandum.net/iterm2/">MacのターミナルアプリはiTerm2で決まり!!オススメの設定と基本的な機能まとめ – Webrandum&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>…って思って、Twitterで聞いてみたら、知り合いが教えてくれた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">Triggers (特定語句に反応して通知やハイライトが出来る)&lt;br>Smart Selection (ターミナル上でクアドラプル（4回）クリックすると&amp;quot;URLだけ&amp;quot;とか絶妙にいい感じの範囲選択をしてくれる)&lt;br>&lt;br>とかでしょうか！&lt;/p>&amp;mdash; たいぷらいたー (@no_clock) &lt;a href="https://twitter.com/no_clock/status/1260564766273175553?ref_src=twsrc%5Etfw">May 13, 2020&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">HotkeyとかNotificationをカスタムできることろとかですかね？ターミナル.appはあまりつかってないので、もしかしたらできるかもですが......&lt;a href="https://t.co/704RTHagLh">https://t.co/704RTHagLh&lt;/a>&lt;/p>&amp;mdash; blue (@blue_1617) &lt;a href="https://twitter.com/blue_1617/status/1260564811731161090?ref_src=twsrc%5Etfw">May 13, 2020&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>今度、入れてみるか。&lt;/p>
&lt;h3 id="fishでちょっといいと思った機能はzshでもできそう">fishでちょっといいと思った機能はzshでもできそう&lt;/h3>
&lt;ul>
&lt;li>プロンプトでpathを縮めるやつ: &lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path">ohmyzsh/plugins/shrink-path at master · ohmyzsh/ohmyzsh&lt;/a>&lt;/li>
&lt;li>historyから自動補完: &lt;a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-users/zsh-autosuggestions: Fish-like autosuggestions for zsh&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>powerline fontsはzshでも使えるし、自分にとってはこっちの方向性の方がトータルとしてハッピーになれるかも。&lt;/p></description></item><item><title>A: 2020-05-12</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200512/</link><pubDate>Tue, 12 May 2020 08:25:53 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200512/</guid><description>
&lt;h2 id="512">5/12&lt;/h2>
&lt;h3 id="macosのターミナルでフォントサイズのプリセットを変更">macOSのターミナルでフォントサイズのプリセットを変更&lt;/h3>
&lt;p>16ptにしたいんだけど16ptがプリセットにない、と思って試行錯誤していたら、変更方法を見つけた。&lt;/p>
&lt;ol>
&lt;li>環境設定からプロファイルを選択し、「テキスト」タブでフォント欄の「変更」を押す（ここまではわかっていた）&lt;/li>
&lt;li>フォント設定画面で、左上に歯車アイコンがあり、そこを押すとプルダウンメニューが出てくる。「サイズを編集」を選ぶ&lt;/li>
&lt;li>新しいサイズで「16」を入力し、「+」で追加できる&lt;/li>
&lt;/ol>
&lt;h3 id="macosでもfishを少しだけ試す">macOSでもfishを少しだけ試す&lt;/h3>
&lt;p>&lt;a href="../20200510/#ubuntu%E3%81%A7fish%E3%82%92%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F">5/10&lt;/a>の続き。&lt;br>
macOSの方がハマらないんじゃないかなと思って。&lt;/p>
&lt;h4 id="fish-fisher-テーマのインストール">fish, fisher, テーマのインストール&lt;/h4>
&lt;p>fishのInstallはbrewでOK.&lt;/p>
&lt;p>&lt;code>fish&lt;/code> コマンドで起動してUbuntuのときと同じコマンドでfisherをインストール。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fisher add oh-my-fish/theme-bobthefish&lt;/code> でテーマを入れたら、文字化けした。&lt;/p>
&lt;h4 id="powerline-fontsのインストール">powerline fontsのインストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts&lt;/a>&lt;/p>
&lt;p>install.sh がmacOSにも対応しているようだったので、 &lt;code>git clone&lt;/code> してinstall.shを実行。&lt;/p>
&lt;p>…で、ターミナルのフォントをpowerline対応フォントにしたら、それっぽい見た目になった。&lt;/p>
&lt;p>…が、bobthefishのスクリーンショットと違ってあまりカラフルでない。&lt;/p>
&lt;p>fish自体のカラースキームをいじらないといけないのかな？&lt;/p></description></item><item><title>A: 2020-05-11</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200511/</link><pubDate>Mon, 11 May 2020 23:14:25 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200511/</guid><description>
&lt;h2 id="511">5/11&lt;/h2>
&lt;h3 id="お名前comからgoogle-domainsに移行する">お名前.comからGoogle Domainsに移行する&lt;/h3>
&lt;p>（5/17追記）ブログ書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/17/233811">お名前.comからGoogle Domainsに移行した - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>メールとUXがうざいし、サイトUIがとってもわかりにくくて不便なので。&lt;br>
前々からやりたかったけど、やる気がある今の内にやってしまう。&lt;/p>
&lt;p>手順は下を参考にした:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/fnifni/items/0daca17e0750659f2866">お名前comからgoogle domainsにドメイン移管する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>URLやUIが変わっていて、全くこのままというわけではなかったが、大まかな流れは同じだった。&lt;/p>
&lt;p>Google Domainsは別にGCPプロジェクトなくても使えるんですね。&lt;br>
TerraformでDNSレコード管理しようかと思ってたけど、やりたかったらCloud DNSに移譲しないといけないのかな？&lt;/p>
&lt;h4 id="トランスファー申請不承認のご連絡">「トランスファー申請不承認のご連絡」&lt;/h4>
&lt;p>Google Domains側で手続きして約20分後に、お名前.comから上の題のメールが。&lt;/p>
&lt;pre tabindex="0">&lt;code>上記ドメインのトランスファー申請につきまして、下記いずれかに該当する
ため申請を不承認といたしました。
1.該当URLより不承認処理が行われた
2.Whois情報公開代行サービスの設定が行われている
3.ドメインの契約終了日まで7日以内（JPドメインのみ）
4.期限内に承認処理が行われなかった
再度申請を行う場合は、上記事項に該当しないことを確認した上で申請を
行ってください。
&lt;/code>&lt;/pre>&lt;p>2.のWhois情報公開代行サービスを設定しているからですね。&lt;br>
早速解除して、Google Domainsから払い戻しが来たタイミングで再度、移管申請。&lt;/p>
&lt;p>今度は大丈夫だろう。（フラグ）&lt;/p>
&lt;h4 id="重要トランスファー申請に関する確認のご連絡">「【重要】トランスファー申請に関する確認のご連絡」&lt;/h4>
&lt;pre tabindex="0">&lt;code>お名前.com by GMOは、上記ドメインについて に他社
レジストラへのトランスファー申請を承りました。
トランスファー手続きにつきまして、他社レジストラへ移管をご希望の場合は
期日までに以下URLから承認のお手続きをお願いいたします。
&lt;/code>&lt;/pre>&lt;p>再申請から約25分後、無事フラグを回避できた。&lt;/p>
&lt;h4 id="google-domains---cloudflareにns移譲設定">Google Domains -&amp;gt; CloudflareにNS移譲設定&lt;/h4>
&lt;p>お名前.comから移譲設定をしていたが、さすがにその設定は引き継がれていなかった。&lt;br>
Cloudflareの管理画面でDNSサーバを確認して、Google Domainsでカスタムネームサーバとして設定。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-progrhyme.hatenablog.com/entry/2018/09/02/my-new-landing-page">プロフィールサイトをGitHub Page + CloudFlareによる独自ドメイン×SSL配信に移行しました - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ついでに、Cloudflareで&lt;a href="https://progrhy.me/tech-notes/a/network/dns/#dnssec">DNSSEC&lt;/a>の対応ができたので、DSレコードを生成して、Google Domains側で設定した。&lt;/p>
&lt;h3 id="ss--l-オプションの誤解---解決">ss -l オプションの誤解？ -&amp;gt; 解決&lt;/h3>
&lt;p>&lt;code>hugo server&lt;/code> はデフォルト1313ポートで起動して待ち受け状態になるので、 &lt;code>ss -l | grep '\b1313\b'&lt;/code> で取れるだろうと思ったら、取れなかった。&lt;/p>
&lt;p>&lt;code>ss -ant | grep '\b1313\b'&lt;/code> なら取れた。&lt;/p>
&lt;p>…と、ここまで書いて原因がわかった。&lt;br>
&lt;code>-n&lt;/code> が足りなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% ss -ltp &lt;span style="color:#000;font-weight:bold">|&lt;/span>grep LISTEN &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LISTEN &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span> 127.0.0.1:xtel 0.0.0.0:* users:&lt;span style="color:#ce5c00;font-weight:bold">((&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hugo&amp;#34;&lt;/span>,pid&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1532,fd&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>11&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% ss -ltnp &lt;span style="color:#000;font-weight:bold">|&lt;/span>grep LISTEN &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LISTEN &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span> 127.0.0.1:1313 0.0.0.0:* users:&lt;span style="color:#ce5c00;font-weight:bold">((&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hugo&amp;#34;&lt;/span>,pid&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1532,fd&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>11&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そういうことですね。&lt;/p></description></item><item><title>A: 2020-05-10</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200510/</link><pubDate>Sun, 10 May 2020 15:19:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200510/</guid><description>
&lt;h2 id="510">5/10&lt;/h2>
&lt;h3 id="terraformのkubernetes-providerを試してみる">TerraformのKubernetes Providerを試してみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/121145">TerraformのKubernetes ProviderでK8sのリソース管理にトライ - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;h3 id="ubuntuでもanyenvを使うことにした">Ubuntuでもanyenvを使うことにした&lt;/h3>
&lt;p>Ubuntuで最近Ruby触ってなかったので、入っているRubyが古いことに気づいたのだけど、rbenvも &lt;code>git clone&lt;/code> して入れたものなので、古い。&lt;br>
plenv, pyenvも同様である。&lt;/p>
&lt;p>&lt;a href="../2020/20200428/">4/28&lt;/a>にmacOSでanyenvを試したのだけど、Ubuntuでも使ってみることにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/p>
&lt;p>自分環境のセットアップスクリプトに &lt;code>setup-rbenv.sh&lt;/code> とか入れてるけど、anyenvで管理した方が筋がよさそう。&lt;/p>
&lt;h4 id="anyenv-install">anyenv install&lt;/h4>
&lt;p>Linuxbrewを入れてるので、brewでインストールできた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% brew install &lt;span style="color:#000">anyenv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://linuxbrew.bintray.com/bottles/anyenv-1.1.1.x86_64_linux.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Pouring anyenv-1.1.1.x86_64_linux.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🍺 /home/linuxbrew/.linuxbrew/Cellar/anyenv/1.1.1: &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> files, 48.4KB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% anyenv init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Load anyenv automatically by adding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># the following to ~/.zshrc:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% &lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ANYENV_DEFINITION_ROOT&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>/home/quiche/.config/anyenv/anyenv-install&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> doesn&lt;span style="color:#4e9a06">&amp;#39;t exist. You can initialize it by:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;gt; anyenv install --init
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">% anyenv install --init
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Manifest directory doesn&amp;#39;&lt;/span>t exist: /home/quiche/.config/anyenv/anyenv-install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Do you want to checkout ? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>y/N&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloning https://github.com/anyenv/anyenv-install.git master to /home/quiche/.config/anyenv/anyenv-install...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/quiche/.config/anyenv/anyenv-install&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: Enumerating objects: 48, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: Total &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, reused &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, pack-reused &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Unpacking objects: 100% &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>48/48&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Completed!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまでやって &lt;code>exec $SHELL -l&lt;/code> してもまだPATHには変化なし。&lt;br>
どうも何かしら &lt;code>*env&lt;/code> をインストールしないといけないらしい。&lt;/p>
&lt;p>&lt;code>anyenv install rbenv&lt;/code> してからシェルに再ログインすると、PATHに &lt;code>$HOME/.anyenv/envs/rbenv/shims&lt;/code>, &lt;code>$HOME/.anyenv/envs/rbenv/bin&lt;/code> が追加された。&lt;/p>
&lt;h4 id="rubyのインストールでややハマった">rubyのインストールでややハマった&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% rbenv install 2.7.1 -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ruby: error &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> loading shared libraries: libruby.so.2.7: cannot open shared object file: No such file or directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uncommon.mk:1130: recipe &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> target &lt;span style="color:#4e9a06">&amp;#39;revision.tmp&amp;#39;&lt;/span> failed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make: *** &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>revision.tmp&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Error &lt;span style="color:#0000cf;font-weight:bold">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BUILD FAILED &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Ubuntu 18.04 using ruby-build 20200401-11-g12af1c3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のようなエラーで失敗した。&lt;br>
どうもこれはrdocの生成でコケているようだ。&lt;/p>
&lt;p>ただ、ビルドログを見たら下のようなエラーも出ていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>% view /tmp/ruby-build.20200510143333.6198.log
:
1660 *** Following extensions are not compiled:$
1661 dbm:$
1662 &amp;gt;-Could not be configured. It will not be installed.$
1663 &amp;gt;-Check ext/dbm/mkmf.log for more details.$
1664 gdbm:$
1665 &amp;gt;-Could not be configured. It will not be installed.$
1666 &amp;gt;-Check ext/gdbm/mkmf.log for more details.$
1667 *** Fix the problems, then remove these directories and try again if you want.$
:
&lt;/code>&lt;/pre>&lt;p>よくわからないままビルドに必要そうなパッケージをインストールしてリトライした。&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt install build-essential bison libffi-dev libgdbm-dev libgdbm-compat-dev \
libreadline-dev libssl-dev zlib1g-dev
&lt;/code>&lt;/pre>&lt;p>参考: &lt;a href="https://qiita.com/raccy/items/cd0b39a33dbe764480be">Rubyをソースからコンパイルするときの依存ライブラリ - Qiita&lt;/a>&lt;/p>
&lt;p>上で、いくつかのパッケージは既にインストールされていた。&lt;/p>
&lt;p>リトライした結果、結局、さっきと同じrubyのエラーで失敗した。&lt;br>
ビルドログから、dbm関連のエラーは消えていたので、そこは解消したらしい。&lt;/p>
&lt;p>闇雲に別のまっさらなシェルを立ち上げて再度インストールを試みたところ、成功した。&lt;/p>
&lt;p>まだ &lt;code>~/.rbenv&lt;/code> に古いrbenvが入っていて、 &lt;code>ruby&lt;/code> が &lt;code>~/.rbenv/shims/ruby&lt;/code> を向いていたので、その辺が悪さをしていたのかもしれない。&lt;/p>
&lt;p>これで駄目だったらrdocの生成をオフしようかと思っていた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackbaka.hatenablog.com/entry/2018/09/13/151242">Ruby インストール時の rdoc エラー[Ubuntu] - ハッキングバカ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="clenvでtravis-ciのビルド通知とバッジを修正した">clenvでTravis CIのビルド通知とバッジを修正した&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/clenv">https://github.com/progrhyme/clenv&lt;/a>&lt;/p>
&lt;p>昔、リポジトリを key-amb -&amp;gt; progrhyme に移したのだけど、そのせいでバッジとSlack通知がおかしくなっていた。&lt;/p>
&lt;p>Slackのインテグレーション自体は生きていたので、 &lt;code>travis&lt;/code> コマンドで設定をし直した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>gem i travis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>travis encrypt &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;Slack Workspace&amp;gt;:&amp;lt;Slack Integration Token&amp;gt;&amp;#34;&lt;/span> --add notifications.slack.rooms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで .travis.yml が更新されたので、GitHubにpushして完了。&lt;/p>
&lt;p>バッジも新しいURLで取得した。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications">https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="次世代のシェルとは">次世代のシェルとは&lt;/h3>
&lt;p>&lt;a href="https://ngs-lang.org/">https://ngs-lang.org/&lt;/a>&lt;/p>
&lt;p>4年前にもブクマしてたやつ。&lt;/p>
&lt;p>これC言語製だったか。&lt;/p>
&lt;p>今さっきググったらGolang製のフォーマッタ/パーサ/インタープリタを見つけた。&lt;/p>
&lt;p>&lt;a href="https://github.com/mvdan/sh">https://github.com/mvdan/sh&lt;/a>&lt;/p>
&lt;p>なんか、そのうち全部JavaScriptになるんじゃないかな、って気もするんだよなぁ。&lt;/p>
&lt;p>macOSはJavaScriptでOSと対話できるようになったし、GNOME ShellもJavaScriptで拡張できるらしいし。&lt;/p>
&lt;p>まあ、よくできたプログラム言語がごろごろある現状、敢えて0から再実装する必要ないよねってことか。&lt;/p>
&lt;p>そんなわけでclenvを再開するモチベーションが湧かない今日この頃。&lt;/p>
&lt;p>Node.jsが筆頭だけど、JavaScriptで実装されたシェルも色々あるみたい。&lt;br>
※ただ、OSのシェルとはどれもちょっと違うかも。&lt;/p>
&lt;p>POSIXはもう気にしなくてもいいだろうと思うものの、どの環境でもスッと動いてほしいとは思う。&lt;br>
そういえばfishってどうだっけと思って、改めてチラ見して&lt;a href="https://progrhy.me/tech-notes/a/cli/shell/#fish-shell">シェル&lt;/a>にメモした。&lt;br>
これはC++製なんですね。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/zakuroishikuro/items/1b02378bf9e940602d87">知らないうちにMacがシステム標準でJavaScriptで操作できるようになってた (JXA) - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gihyo.jp/admin/serial/01/ubuntu-recipe/0492">第492回 GNOME Shellの拡張機能を作ってみよう：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/ja/docs/JavaScript/Shells">JavaScript シェル - JavaScript リダイレクト 1 | MDN&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="ubuntuでfishを少しだけ試してみた">Ubuntuでfishを少しだけ試してみた&lt;/h3>
&lt;p>Install:&lt;/p>
&lt;p>&lt;a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3">https://launchpad.net/~fish-shell/+archive/ubuntu/release-3&lt;/a> の通り:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo apt-add-repository ppa:fish-shell/release-3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fish&lt;/code> で起動する。&lt;/p>
&lt;p>体感そんな悪くない。&lt;br>
bashで書いたスクリプトはシバン書いてるから実行したら普通に動くし、特に戸惑うことはない感じ。&lt;/p>
&lt;p>少しカスタマイズしたら十分使いやすくなりそう。&lt;/p>
&lt;h4 id="fisherを試す">fisherを試す&lt;/h4>
&lt;p>テーマを使ってみたかったので、fisherを入れてテーマを入れてみる。&lt;/p>
&lt;p>&lt;a href="https://github.com/jorgebucaran/fisher">https://github.com/jorgebucaran/fisher&lt;/a>&lt;/p>
&lt;p>READMEに従ってインストール&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>色々ハマったんだけど、最終的に次の要領で、まあまあいい感じになった:&lt;/p>
&lt;h5 id="powerlineのインストール">powerlineのインストール&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo apt install powerline
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/TrentSPalmer/63a85b582d42ab4bff665fc2dbba42e2">fish powerline on ubuntu the easy way&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※↑に書かれている &lt;code>~/.config/fish/config.fish&lt;/code> の設定をすると、fishでpowerlineは使えるが、他のテーマを入れるとおかしくなる。（カニバってしまう？）&lt;/p>
&lt;p>powerlineを使うには対応したフォントが必要らしい。これに中々気づかなかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://news.mynavi.jp/itsearch/article/hardware/4775">【連載】にわか管理者のためのLinux運用入門 [210] Powerlineでカッコよく - シェル編（bash、zsh、fish）｜サーバ/ストレージ｜IT製品の事例・解説記事&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/microsoft/cascadia-code/releases">https://github.com/microsoft/cascadia-code/releases&lt;/a> から、最新版を &lt;code>~/.fonts&lt;/code> にインストールした。&lt;/p>
&lt;p>参考: &lt;a href="http://omoiyari.nishinari.coop/ubuntu-tips/%e3%83%95%e3%82%a9%e3%83%b3%e3%83%88%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab/">フォントのインストール | Ubuntu初心者の集いブログ&lt;/a>&lt;/p>
&lt;h5 id="テーマの追加">テーマの追加&lt;/h5>
&lt;p>この後、fishを起動し、 &lt;code>fisher add oh-my-fish/theme-bobthefish&lt;/code> で、まあまあいい感じになった。&lt;/p>
&lt;p>ただ、プロンプトの左端が &lt;code>I&lt;/code> となっていて、これはスクリーンショットによると本来は矢印記号が出るはずなんじゃないかと思う。&lt;/p>
&lt;p>theme-bobthefish のガイドに従って、 &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases">https://github.com/ryanoasis/nerd-fonts/releases&lt;/a> も入れてみたけど、特に変わらない。&lt;/p>
&lt;h5 id="上手く行かなかったこと">上手く行かなかったこと&lt;/h5>
&lt;p>上まで辿りついたが、 &lt;code>theme-budspencer&lt;/code> だと上手く行かなかった。&lt;br>
プロンプトでENTERだけを押しても改行されない感じになってしまう。&lt;/p>
&lt;h5 id="参考">参考&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://nodaki.hatenablog.com/entry/2018/09/24/213942">【Ubuntu】 shellをfish + fisherman に変えた話 - 0.5から始める機械学習&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/minako-ph/items/dba6d65b741e3a30ad16#fisherman%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B">【2019年版】macのターミナルにFishとFishermanを導入する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gasでwebアプリ作るテスト">GASでWebアプリ作るテスト&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/hyt48/items/2534237d96f991f31966">Google Apps ScriptでWebアプリケーションをつくる - Qiita&lt;/a>を写経。
ステップ5の「データをGoogleスプレッドシートに保存」はまだできていない。&lt;/p>
&lt;p>JS, CSSを分割したところから上手く行かなくなった。
原因は以下の2つ:&lt;/p>
&lt;ul>
&lt;li>Qiita上ではJS, CSSのコードが省略されている。&lt;a href="https://github.com/mio3io/cr-vue/tree/master/codes/tutorial-todo">GitHubの完全版&lt;/a>からコピる必要があった。&lt;/li>
&lt;li>コード.gsの &lt;code>doGet()&lt;/code> 関数を下に従って変更する必要があった:
&lt;ul>
&lt;li>&lt;a href="https://tonari-it.com/gas-web-html-css-scriptlet/">GASでWebページを作るときにHTMLとCSSを別ファイルに記述する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-09</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200509/</link><pubDate>Sat, 09 May 2020 15:48:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200509/</guid><description>
&lt;h2 id="59">5/9&lt;/h2>
&lt;h3 id="シェルスクリプトのドキュメントコメントをpodで書くのはもうやめていいかな">シェルスクリプトのドキュメントコメントをPODで書くのはもうやめていいかな&lt;/h3>
&lt;p>いつだったか、何かの本でそういう書き方を見てからずっとそうやってる。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>: &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;&amp;#39;__EOF__&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">=encoding utf8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">=head1 NAME
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">B&amp;lt;my-script&amp;gt; - short description
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">=head1 DESCRIPTION
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">=cut
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">__EOF__&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでPODに食わせるとドキュメントとして解釈してくれるので、スクリプト内では &lt;code>pod2text $0&lt;/code> とかでヘルプを表示できる。&lt;/p>
&lt;p>…が、そろそろ &lt;code>pod2text&lt;/code> がどの環境にも入っていると想定すべきでないかも…という気がしてきた。&lt;br>
ところが、じゃあどう書いたらいいの？っていうのには決定版がない気がする。&lt;/p>
&lt;p>シェルスクリプトにちゃんとコメントを書こうとしている人たちの間では、主に2つの派閥がある気がする:&lt;/p>
&lt;ol>
&lt;li>スクリプトのヘッダや関数のヘッダとしてドキュメントコメントをそれなりのフォーマットで書きましょう派。&lt;a href="https://google.github.io/styleguide/shellguide.html#s4.1-file-header">Googleのコーディング規約&lt;/a>もこれ&lt;/li>
&lt;li>&lt;code>usage()&lt;/code> 関数内にヒアドキュメントで書きましょう派&lt;/li>
&lt;/ol>
&lt;p>いいとこ取りをしてる感じに見えるのは、 &lt;code>usage()&lt;/code> 関数でコメントをパースしてヘルプっぽく出力してるもの。&lt;br>
下のような例があった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ngyuki/items/673d6cb3b36360eaf5cc">シェルスクリプトでヘルプメッセージをコメントに書いて表示する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/TomKid/items/ab49f8d0cd15b18e5e4a">自作シェルスクリプトにヘルプやらバージョンメッセージを実装？する面白い方法があった - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分で独自フォーマットのコメントを書いている、という点では、下もこの類型にあたるか:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ssh0/items/0c14ee8949512a4dc98e">シェルスクリプト群のドキュメント書くの面倒だから自動でREADME.mdを生成する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jmcantrell/bashful/blob/master/bin/shdoc">https://github.com/jmcantrell/bashful/blob/master/bin/shdoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>godocみたいなのないかな、と思って「shelldoc」とか「shdoc」とかでぐぐるとたくさん出てくる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://shellscript.sunone.me/tips.html">シェルスクリプト Tips | UNIX &amp;amp; Linux コマンド・シェルスクリプト リファレンス&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="microk8sを使ってみる">Microk8sを使ってみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/110630">UbuntuでKubernetesのテスト環境としてMicrok8sをセットアップした - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p></description></item><item><title>A: 2020-05-08</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200508/</link><pubDate>Fri, 08 May 2020 10:26:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200508/</guid><description>
&lt;h2 id="58">5/8&lt;/h2>
&lt;h3 id="terraformerをgcpで使ってみた">terraformerをGCPで使ってみた&lt;/h3>
&lt;p>GCPでdefault networkをimportしたいと思った。&lt;br>
ふつうに &lt;code>terraform import&lt;/code> を使えばいいのだが、terraformerのことを思い出したので、使ってみることにした。&lt;br>
terraformerを使えばHCLファイルを生成することができる。&lt;/p>
&lt;p>terraformerについての一般的な内容は&lt;a href="https://progrhy.me/tech-notes/a/software/terraform/terraformer/">terraformer&lt;/a>にメモしている。&lt;/p>
&lt;p>作業環境: macOS&lt;/p>
&lt;p>Install:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install terraformer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>準備として、 &lt;code>~/.terraform.d/plugins/darwin_amd64/&lt;/code> に &lt;code>terraform-provider-google_v3.20.0_x5&lt;/code> を置く。&lt;br>
今回はterraform実行ディレクトリの &lt;code>.terraform/plugins&lt;/code> からコピーした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>terraformer import google --projects&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>my-project &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --regions&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>asia-northeast1 --resources&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>networks,subnetworks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果:&lt;/p>
&lt;pre tabindex="0">&lt;code>% tree generated
generated
└── google
└── my-project
├── networks
│   └── asia-northeast1
│   ├── compute_network.tf
│   ├── outputs.tf
│   ├── provider.tf
│   └── terraform.tfstate
└── subnetworks
└── asia-northeast1
├── compute_subnetwork.tf
├── outputs.tf
├── provider.tf
├── terraform.tfstate
└── variables.tf
6 directories, 9 files
&lt;/code>&lt;/pre>&lt;p>tfファイルのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#204a87;font-weight:bold">cat&lt;/span> &lt;span style="color:#204a87;font-weight:bold">generated&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">google&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">my&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">project&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">networks&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">asia&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">northeast1&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">compute_network&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">resource&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_network&amp;#34; &amp;#34;tfer--default&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> auto_create_subnetworks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> delete_default_routes_on_create&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> description&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Default network for the project&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> project&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;my-project&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000"> routing_mode&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;REGIONAL&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>tfstateのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">generated/google/my-project/subnetworks/asia-northeast&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">/terraform.tfstate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;terraform_version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0.12.18&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;serial&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;lineage&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;XXXXXXXXXXXX&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;modules&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;outputs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork_tfer--default_self_link&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;sensitive&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://www.googleapis.com/compute/v1/projects/my-project/regions/asia-northeast1/subnetworks/default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;resources&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork.tfer--default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_subnetwork&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;depends_on&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;primary&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;attributes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;creation_timestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-05-07T02:07:01.455-07:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;gateway_address&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ip_cidr_range&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.0/20&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;log_config.#&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>terraform_version&lt;/code> がマシンにインストール済みのバージョンと違うのは、terraformerが同梱しているってことなのかな？&lt;/p>
&lt;h3 id="kubernetesのマニフェストをvcsで管理して削除まで正しく同期する方法">KubernetesのマニフェストをVCSで管理して、削除まで正しく同期する方法&lt;/h3>
&lt;p>※5/9 ブログを書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/09/125134">Kubernetesのマニフェストをリポジトリ管理しつつ、リソースの削除も反映したい件 - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>某所で聞いたりして情報を集めた。&lt;br>
このエントリは後掲の関連リンクの続きである。&lt;/p>
&lt;ol>
&lt;li>管理対象のリソースに &lt;code>label&lt;/code> でバージョン番号を振り、新しいバージョンのリソースを配置した後、古いバージョンのリソースを削除する&lt;/li>
&lt;li>&lt;code>kubectl apply&lt;/code> 時に &lt;code>--prune&lt;/code> オプションを付ける&lt;/li>
&lt;li>Argo CDのAutomatic Pruning機能を使う&lt;/li>
&lt;li>リソースをTerraformで管理する&lt;/li>
&lt;/ol>
&lt;p>関連:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../20200505/#kubernetes%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%81%AF%E5%85%A8%E9%83%A8export%E3%81%97%E3%81%A6%E7%AE%A1%E7%90%86%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%81%84%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AD%E3%81%A3%E3%81%A6%E6%80%9D%E3%81%A3%E3%81%9F">2020-05-05のメモ - Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-06</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200506/</link><pubDate>Wed, 06 May 2020 13:29:34 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200506/</guid><description>
&lt;h2 id="56">5/6&lt;/h2>
&lt;h3 id="githubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ">GitHubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ&lt;/h3>
&lt;p>なんかないかなと思ったけど、&lt;a href="https://github.com/Songmu/ghg">Songmu/ghg&lt;/a>以上のものは見つからないな。&lt;/p>
&lt;p>hubコマンドあたりで実装されてたりはしなかった。&lt;/p>
&lt;p>&lt;a href="https://hub.github.com/hub.1.html">https://hub.github.com/hub.1.html&lt;/a>&lt;/p>
&lt;h3 id="ghgでmdbookを入れようと思ったが失敗した">ghgでmdBookを入れようと思ったが失敗した&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% env &lt;span style="color:#000">GHG_HOME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$HOME&lt;/span> ghg get rust-lang/mdBook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fetch the GitHub release &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> rust-lang/mdBook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no assets available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>悲しい。&lt;br>
結局wget -&amp;gt; tar xvfで入れました。&lt;/p></description></item><item><title>A: 2020-05-05</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200505/</link><pubDate>Tue, 05 May 2020 07:25:57 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200505/</guid><description>
&lt;h2 id="55">5/5&lt;/h2>
&lt;h3 id="kubernetesのマニフェストは全部exportして管理した方がいいんじゃねって思った">Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/h3>
&lt;p>exportのやり方は調べて&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#%E5%85%A8%E3%81%A6%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%81%84">kubectlのページ#全てのマニフェストを取得したい&lt;/a>に書いた。&lt;/p>
&lt;p>…というか、exportしてないと不安である。&lt;/p>
&lt;p>kustomizeで管理していても、野良のリソースがないことを保証できない。&lt;br>
素のマニフェスト管理でも同様。&lt;/p>
&lt;p>&lt;code>kubectl apply&lt;/code> は、ふつうは削除同期をやってくれないので。&lt;/p>
&lt;p>（※…と思って、リファレンスを読み返していたら、 &lt;code>--prune&lt;/code> というオプションがα機能であるようだ。これについては、&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#apply">kubectl#apply&lt;/a>に書いた）&lt;/p>
&lt;p>定期的にdumpして差分がないかチェックした方がいいんじゃないかな。&lt;br>
特に、本番とstaging環境は。&lt;/p>
&lt;p>逆に、export -&amp;gt; applyの運用にしていれば、staging環境の差分をそのまま本番に適用する運用が可能ではないだろうか。&lt;br>
このやり方なら、仰々しいK8s対応のCI/CDツールなど使わなくても、kubectlとGitOpsだけで行けるかもしれない。&lt;/p>
&lt;p>まだ試してないので、実際にやってみたら色々と課題も出てくるだろうけど。&lt;/p>
&lt;h3 id="neobundleからdeinvimに乗り換えた">NeoBundleからdein.vimに乗り換えた&lt;/h3>
&lt;p>※5/6 ブログ書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/06/122034">今更だけどNeoBundleからdein.vimに乗り換えて、プラグインを6つ追加した - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>今更かよって感じだけど乗り換えた。&lt;br>
NeoBundleは2年ぐらい前に更新が止まっていた。&lt;/p>
&lt;p>作業マシンはUbuntu 18.04&lt;/p>
&lt;p>See also &lt;a href="https://progrhy.me/tech-notes/a/software/editor/vim/#deinvim">Vim#deinvim&lt;/a>&lt;/p>
&lt;h4 id="インストール">インストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/Shougo/dein.vim#quick-start">https://github.com/Shougo/dein.vim#quick-start&lt;/a> に従う。&lt;/p>
&lt;p>インストール先は &lt;code>~/.vim/dein&lt;/code> とした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh ./installer.sh ~/.vim/dein
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際は&lt;a href="https://github.com/progrhyme/dotfiles/commit/1ef6a75f2952407d6758eb0c1cef584943ed9ecc">こんな感じ&lt;/a>で、スクリプトで対応した。&lt;/p>
&lt;h4 id="vimrcの移行">vimrcの移行&lt;/h4>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/35f3be479a57e92d98a6182792b900366ab20beb">このコミット&lt;/a>で対応した。&lt;/p>
&lt;p>とりあえず使ってるのは全部移行しようかと思ったけど、次の行のプラグインについてはどう移行すればいいのかぱっとわからず、悩んだ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Vim" data-lang="Vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">NeoBundleLazy&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mopp/layoutplugin.vim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> { &lt;span style="color:#4e9a06">&amp;#39;autoload&amp;#39;&lt;/span> : { &lt;span style="color:#4e9a06">&amp;#39;commands&amp;#39;&lt;/span> : &lt;span style="color:#4e9a06">&amp;#39;LayoutPlugin&amp;#39;&lt;/span>} }&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そもそもこのプラグインはvim-pluginの雛形作成ツールで、今のところ使う予定がないので、消すことにした。&lt;/p>
&lt;p>あと、TOMLに対応したプラグインがなかったので、 &lt;code>'cespare/vim-toml'&lt;/code> を入れた。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;p>なんか、vim起動後にENTERが必要だったり、終了後に画面がクリアされなかったりする（NeoBundleの頃はそんなことはなかった）が、概ね問題なさそう。&lt;/p>
&lt;p>（追記）引き続き確認したところ、 &lt;code>'Align'&lt;/code> プラグインで警告が出ていることに気がついた。 &lt;code>'vim-scripts/Align'&lt;/code> に修正したら上の問題はなくなった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/dotfiles/commit/df90a50ffca16629bb0dbcf31f6405e249cac763">修正コミット&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-04</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200504/</link><pubDate>Mon, 04 May 2020 15:19:13 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200504/</guid><description>
&lt;h2 id="54">5/4&lt;/h2>
&lt;h3 id="git-pull---pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った">git pull &amp;ndash;pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った&lt;/h3>
&lt;p>何番煎じだよって感じだけど、いい加減面倒になったので作った。&lt;/p>
&lt;p>コード: &lt;a href="https://github.com/progrhyme/git-wraps/blob/5580b8cf19d62262392548a8fa66c737ae5c01c6/bin/git-branch-clean">git-wraps/bin/git-branch-clean&lt;/a>&lt;/p>
&lt;p>gitのaliasにも設定したかったので、オプションにも対応させた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% git bc -h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git-branch-clean - git subcommand to clean up merged &lt;span style="color:#204a87">local&lt;/span> branches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SYNOPSYS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git branch-clean &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DESCRIPTION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> This is a git subcommand to clean up merged &lt;span style="color:#204a87">local&lt;/span> branches.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Branches &lt;span style="color:#4e9a06">&amp;#34;master&amp;#34;&lt;/span> and &lt;span style="color:#4e9a06">&amp;#34;develop&amp;#34;&lt;/span> are whitelisted by default. You can
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> change the whitelist by &lt;span style="color:#4e9a06">&amp;#34;-a|--allow BRANCH&amp;#34;&lt;/span> option.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Current branch is always whitelisted.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OPTIONS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i Interactive mode. Show prompt before deleting branch.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -a&lt;span style="color:#000;font-weight:bold">|&lt;/span>--allow BRANCH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Add argument as branch name to whitelist which won&lt;span style="color:#a40000">&amp;#39;&lt;/span>t be deleted.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> This option can be specified multiple times.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ex&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Whitelist = (develop, master, CURRENT)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git branch-clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Whitelist = (foo, CURRENT)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git branch-clean -a foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Whitelist = (test, master, CURRENT)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git branch-clean -a &lt;span style="color:#204a87">test&lt;/span> -a master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p&lt;span style="color:#000;font-weight:bold">|&lt;/span>--pull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Execute &lt;span style="color:#4e9a06">&amp;#34;git pull --prune&amp;#34;&lt;/span> before deleting branches.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v&lt;span style="color:#000;font-weight:bold">|&lt;/span>--verbose
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Verbose output.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h&lt;span style="color:#000;font-weight:bold">|&lt;/span>--help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Show &lt;span style="color:#204a87">help&lt;/span> text.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスクリプトをPATHが通っている場所に置く。&lt;/p>
&lt;p>.gitconfigのaliasはこんな感じ:&lt;/p>
&lt;pre tabindex="0">&lt;code>[alias]
plr = pull --prune
bc = branch-clean --pull
bcp = branch-clean --pull
&lt;/code>&lt;/pre>&lt;p>&lt;code>git branch-clean&lt;/code> か &lt;code>git plr&lt;/code> か &lt;code>git bcp&lt;/code> か、利用頻度によってaliasを調整するかもしれない。（※追記あり）&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kenshiroh/items/44dcf4b094e841bb42a2">gitでbranchをお掃除する際のチートシート - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/yuichielectric/items/84cd61915a1236f19221">リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="59-追記">5/9 追記&lt;/h4>
&lt;p>&lt;code>git-branch-sweep&lt;/code> -&amp;gt; &lt;code>git-branch-clean&lt;/code> にリネームして、上を書き換えた。&lt;br>
エイリアスは3つ登録した。&lt;/p>
&lt;h3 id="ubuntuでkubectxをlinuxbrewで入れた">Ubuntuでkubectxをlinuxbrewで入れた&lt;/h3>
&lt;p>&lt;a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx&lt;/a>&lt;/p>
&lt;p>READMEには明記されてはいないのだけど、 &lt;code>brew install kubectx&lt;/code> でふつうにインストールできて使えた。&lt;br>
まあ、シェルスクリプトだしな。&lt;/p>
&lt;h3 id="memo-ページの階層を増やしたらhogoのサイト内ページ参照が壊れた">memo/ ページの階層を増やしたらHogoのサイト内ページ参照が壊れた&lt;/h3>
&lt;p>下の変更による:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/tech-notes/commit/325430dfd7d297186bc73aa2e53bf69e8da5a79c">[memo] Move some memos under 2020/ · progrhyme/tech-notes@325430d&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>例えば、20200502.md内のリンクを20200501へのリンクを &lt;code>{{\&amp;lt; ref &amp;quot;/a/memo/20200501.md&amp;quot; \&amp;gt;}}&lt;/code> に戻すと、次のエラーが出る:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% hugo -v --path-warnings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO 2020/05/05 06:53:45 Using config file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Building sites … INFO 2020/05/05 06:53:45 syncing static files to /home/progrhyme/my/repos/tech-notes/public/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO 2020/05/05 06:53:45 postcss: use config file /home/progrhyme/my/repos/tech-notes/themes/docsy/postcss.config.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR 2020/05/05 06:53:47 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ja&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> REF_NOT_FOUND: Ref &lt;span style="color:#4e9a06">&amp;#34;/a/memo/20200501.md&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;/home/progrhyme/my/repos/tech-notes/content/ja/a/memo/20200502.md:16:34&amp;#34;&lt;/span>: page not found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total in &lt;span style="color:#0000cf;font-weight:bold">2470&lt;/span> ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error: Error building site: logged &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> error&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-05-03</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200503/</link><pubDate>Sun, 03 May 2020 12:11:38 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200503/</guid><description>
&lt;h2 id="53">5/3&lt;/h2>
&lt;h3 id="github-actionsには今ビルドを手動トリガーするネイティブ機能はないが同等のことはできる">GitHub Actionsには今ビルドを手動トリガーするネイティブ機能はない（が、同等のことはできる）&lt;/h3>
&lt;p>Bitbucket Pipelinesの &lt;code>trigger: manual&lt;/code> みたいな機能がリファレンス見てもなさそうだなと思ってググってみたら、なさそうだとわかった。&lt;/p>
&lt;p>フィーチャーリクエストが出ている:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504">GitHub Actions Manual Trigger / Approvals - GitHub Community Forum&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>擬似的に同等のことはできる。以下、参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/proudust/items/51599abd2b107b708e1e">GitHub Actions で手動トリガーのワークフローを作る - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/58933155/manual-workflow-triggers-in-github-actions">docker - Manual workflow triggers in Github Actions - Stack Overflow&lt;/a>
&lt;ul>
&lt;li>&lt;code>on.watch.types: [stared]&lt;/code> でstarをフックにしている例が面白いw&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="github-actionsを使ってterraformでgcp構成をcicdする">GitHub Actionsを使ってTerraformでGCP構成をCI/CDする&lt;/h3>
&lt;p>Qiitaに投稿した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/6bde1e1807a65c7e2cb2">GitHub ActionsでGCPにTerraformでインフラCI/CDする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kentakozuka/items/e0d356df38f29ee7587e">Github Actions で GCPに向けてTerraform を実行する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gitにgpgで署名してgithubに署名キーを登録してみた">GitにGPGで署名してGitHubに署名キーを登録してみた&lt;/h3>
&lt;p>そんな設定があったけど、面倒なだけで特に意味はないのではないかと思っていたのでやってなかった。&lt;br>
まあ、でもなりすましを防ぐ意味では有意義か。&lt;/p>
&lt;p>作業環境はUbuntu 18.04 LTS.&lt;/p>
&lt;p>GitHubのドキュメント:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/managing-commit-signature-verification">コミット署名の検証を管理する - GitHub ヘルプ&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/checking-for-existing-gpg-keys">既存の GPG キーの確認 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/generating-a-new-gpg-key">新しい GPG キーを生成する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account">GitHub アカウントへの新しい GPG キーの追加 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/telling-git-about-your-signing-key">Git へ署名キーを伝える - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/signing-commits">コミットに署名する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>既存の GPG キーの確認を次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% gpg --list-secret-keys --keyid-format LONG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>何もなかったので、新しい GPG キーを生成する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% gpg --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>GnuPG&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 2.2.4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% gpg --full-generate-key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% gpg --list-secret-keys --keyid-format LONG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% gpg --armor --export XXXXXXXXXXXXXX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git へ署名キーを伝える&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% git config --global user.signingkey XXXXXXXXXXXXXX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以降、 &lt;code>git commit&lt;/code> に &lt;code>-S&lt;/code> オプションをつけると、コミットに署名がなされる。&lt;/p>
&lt;p>パスワードが要求されるが、パスワードマネージャーに保存しておくと以降、聞かれないで済む。&lt;/p>
&lt;p>常に署名したい場合、次のコマンドを実行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% git config --global commit.gpgsign &lt;span style="color:#204a87">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>パスワードをランダムで生成してしまったので、すぐに打てなくて困った。&lt;br>
パスワードを変更するには、次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>gpg --edit-key XXXXXXXXXXXXXX passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一応 &lt;code>$HOME/.gnupg&lt;/code> をバックアップしておいた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kent-hamaguchi/items/0e44f563caf39cd3eb9e">GitHubにgpg署名付きのコミットをする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://joemphilips.com/post/gpg_memo/">GPGで自分用の秘密鍵を1つに統一する · JoeMPhilips&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-02</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200502/</link><pubDate>Sat, 02 May 2020 00:06:02 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200502/</guid><description>
&lt;h2 id="52">5/2&lt;/h2>
&lt;h3 id="bitbucket-pipelinesでgcpに対してterraformを適用するには">Bitbucket PipelinesでGCPに対してTerraformを適用するには&lt;/h3>
&lt;p>※Qiitaに移しました:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/ed96d42dd811063a24c2">Bitbucket PipelinesでGCPに対してTerraformでインフラCI/CDする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../20200501/#ci%E3%81%A7gcp%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6terraform%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">2020-05-01に調べたログ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/web-service/bitbucket/">Bitbucketについてのメモ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>（5/3追記）&lt;/p>
&lt;p>下の記事を見て、 &lt;code>GOOGLE_CREDENTIALS&lt;/code> はパス名じゃなくてサービスアカウントキーのJSONままでも行けると気づいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kentakozuka/items/e0d356df38f29ee7587e">Github Actions で GCPに向けてTerraform を実行する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="yamlで配列のマージはできなさそう">YAMLで配列のマージはできなさそう&lt;/h3>
&lt;p>ハッシュのマージはアンカーとエイリアスでできるのだけど、配列のマージはできなさそう。&lt;/p>
&lt;p>参考: &lt;a href="https://stackoverflow.com/questions/24090177/how-to-merge-yaml-arrays">list - How to merge YAML arrays? - Stack Overflow&lt;/a>&lt;/p>
&lt;p>配列の1つ1つの要素にアンカーを付けて、再利用することは可能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#8f5902;font-style:italic">&amp;amp;mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: &lt;a href="https://magazine.rubyist.net/articles/0009/0009-YAML.html#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9">プログラマーのための YAML 入門 (初級編)&lt;/a>&lt;/p>
&lt;h3 id="dangerはbitbucketにどのように対応しているか">DangerはBitbucketにどのように対応しているか&lt;/h3>
&lt;p>tfnotifyをBitbucketに対応させたいなーと思いながら、参考にできるかなと思って見ていた。&lt;/p>
&lt;p>CIサーバからBitbucketのREST APIを叩いているようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danger/danger/pull/481/files">Bitbucket Server by HeEAaD · Pull Request #481 · danger/danger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danger.systems/js/usage/bitbucket_cloud.html">Danger + BitBucket Cloud&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-01</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200501/</link><pubDate>Fri, 01 May 2020 01:34:48 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200501/</guid><description>
&lt;h2 id="51">5/1&lt;/h2>
&lt;h3 id="ciでgcpに対してterraformするには">CIでGCPに対してTerraformするには&lt;/h3>
&lt;p>&lt;del>サービスアカウントのキーをJSONで作って、 &lt;code>GOOGLE_CREDENTIALS&lt;/code> or &lt;code>GOOGLE_BACKEND_CREDENTIALS&lt;/code> 環境変数に渡せば良さそう。&lt;/del>
（事例によって異なる環境変数を使っていることがある。）&lt;/p>
&lt;p>&lt;a href="https://www.terraform.io/docs/backends/types/gcs.html">https://www.terraform.io/docs/backends/types/gcs.html&lt;/a>&lt;/p>
&lt;p>（追記） &lt;code>terraform plan&lt;/code> のときには&lt;a href="https://cloud.google.com/docs/authentication/production">Application Credentials&lt;/a>が必要になる。&lt;br>
GCS backend認証も上記の環境変数がない場合は、Application Credentialsにフォールバックするので、環境変数 &lt;code>GOOGLE_APPLICATION_CREDENTIALS&lt;/code> にキーファイルのパスを設定するのがよい。&lt;/p>
&lt;p>事例:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/MisaKondo/cb46b0ecd106e9c824a641b14954b8e1">TerraformによるGCP環境の管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/community/tutorials/managing-gcp-projects-with-terraform">Managing Google Cloud projects with Terraform&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.devsamurai.com/ja/gcp-terraform-101/">Terraformツールを使ってGCPリソース管理 | DevSamurai&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以前に調べたログ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/2020/20200427/">2020-04-27&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tmuxのstatus-lineの色設定をいい感じにした">tmuxのstatus lineの色設定をいい感じにした&lt;/h3>
&lt;p>2ヶ月ちょっと前に .tmux.conf をv2.9+対応にしたのだけど、status lineの色設定がなんかイマイチになってたので調整した。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d">https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d&lt;/a>&lt;/p>
&lt;p>だいぶややこしい設定になっていて、どこを変えればいいかよくわからなくなっていたのと、tmuxプロセスを全て終了しないと再読込みされないっぽかったので更に混乱した。&lt;br>
tmuxプロセスA内でconfを編集しながら、tmuxプロセスBを起動して見た目を確認していたが、それだとtmuxプロセスAの設定が引き継がれるような挙動だった。&lt;/p>
&lt;p>参考にしたページ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/nojima/items/9bc576c922da3604a72b">tmux の status line の設定方法 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tokuhy/dotfiles/blob/master/.tmux.conf">dotfiles/.tmux.conf at master · tokuhy/dotfiles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="terraformでgcpのservice-account-keyを作成">TerraformでGCPのService Account Keyを作成&lt;/h3>
&lt;p>Qiitaにこういうエントリを上げた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/8603c0f6e350734c1739">TerraformでGCPのService Account Keyを作成し、ローカルにファイルとして保存する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>何度か実行して確かめたところ、次のことがわかった。&lt;/p>
&lt;ul>
&lt;li>Service Account Keyの内容はtfstateに保存される&lt;/li>
&lt;li>よって、local_fileに書き出すコードは後で足してもいいし、一度消しても復元できる&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-30</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200430/</link><pubDate>Thu, 30 Apr 2020 00:08:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200430/</guid><description>
&lt;h2 id="430">4/30&lt;/h2>
&lt;h3 id="ubuntuでhomebrewで入れたtfenvだとtfenv-installに失敗する">UbuntuでHomebrewで入れたtfenvだとtfenv installに失敗する&lt;/h3>
&lt;p>unzipで失敗する。&lt;/p>
&lt;p>デバッグしたところ、Homebrewの依存でインストールされたunzipが使われてしまうからのようだ。&lt;/p>
&lt;p>tfenvの &lt;code>libexec/helpers&lt;/code> 内に &lt;code>which unzip&lt;/code> を仕込んで確かめた。&lt;/p>
&lt;p>ログ:&lt;/p>
&lt;pre tabindex="0">&lt;code>% TFENV_DEBUG=true tfenv install 0.12.24
+ [tfenv:22] &amp;#39;[&amp;#39; -z &amp;#39;&amp;#39; &amp;#39;]&amp;#39;
++++ [tfenv:23] readlink_f /home/linuxbrew/.linuxbrew/bin/tfenv
:
（中略）
:
+ [tfenv-install:180] mkdir -p /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/versions/0.12.24
+ [tfenv-install:181] unzip tfenv_download.DtVL3N/terraform_0.12.24_linux_amd64.zip -d /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/version
s/0.12.24
UnZip 6.00 of 20 April 2009, by Debian. Original by Info-ZIP.
Usage: unzip [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir]
Default action is to extract files in list, except those in xlist, to exdir;
file[.zip] may be a wildcard. -Z =&amp;gt; ZipInfo mode (&amp;#34;unzip -Z&amp;#34; for usage).
-p extract files to pipe, no messages -l list files (short format)
-f freshen existing files, create none -t test compressed archive data
-u update files, create if necessary -z display archive comment only
-v list verbosely/show version info -T timestamp archive to latest
-x exclude files that follow (in xlist) -d extract files into exdir
modifiers:
-n never overwrite existing files -q quiet mode (-qq =&amp;gt; quieter)
-o overwrite files WITHOUT prompting -a auto-convert any text files
-j junk paths (do not make directories) -aa treat ALL files as text
-C match filenames case-insensitively -L make (some) names lowercase
-X restore UID/GID info -V retain VMS version numbers
-K keep setuid/setgid/tacky permissions -M pipe through &amp;#34;more&amp;#34; pager
See &amp;#34;unzip -hh&amp;#34; or unzip.txt for more help. Examples:
unzip data1 -x joe =&amp;gt; extract all files except joe from zipfile data1.zip
unzip -p foo | more =&amp;gt; send contents of foo.zip via pipe into program more
unzip -fo foo ReadMe =&amp;gt; quietly replace existing ReadMe if archive file newer
+ [tfenv-install:181] error_and_die &amp;#39;Tarball unzip failed&amp;#39;
++ [helpers:4] basename /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/libexec/tfenv-install
+ [helpers:4] echo -e &amp;#39;tfenv: tfenv-install: \033[0;31m[ERROR] Tarball unzip failed\033[0;39m&amp;#39;
tfenv: tfenv-install: [ERROR] Tarball unzip failed
+ [helpers:5] which unzip
/home/linuxbrew/.linuxbrew/bin/unzip
+ [helpers:6] exit 1
+ [helpers:1] rm -rf tfenv_download.DtVL3N
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>brew uninstall unzip --ignore-dependencies&lt;/code> した後、 &lt;code>tfenv install 0.12.24&lt;/code> したら成功した。&lt;/li>
&lt;li>&lt;code>/home/linuxbrew/.linuxbrew/bin/unzip some.zip -d somedir&lt;/code> は同じエラーで失敗する。&lt;/li>
&lt;li>&lt;code>/usr/bin/unzip some.zip -d somedir&lt;/code> は成功する。&lt;/li>
&lt;/ul>
&lt;p>単独でunzipコマンドを実行しても失敗しているので、Linuxbrewのunzipが壊れてるんだと思う。&lt;/p>
&lt;h4 id="59-追記">5/9 追記&lt;/h4>
&lt;p>これ、GCEにDebian 10とUbuntu 18.04とCent OS 8のVMを立てて追試したところ、全部linuxbrewのunzipが正常に動いた。&lt;/p>
&lt;p>なぜだ。。&lt;/p></description></item><item><title>A: 2020-04-29</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200429/</link><pubDate>Wed, 29 Apr 2020 10:49:46 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200429/</guid><description>
&lt;h2 id="429">4/29&lt;/h2>
&lt;h3 id="ubuntu-1804でintellij-ideaを20201にアップデート">Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート&lt;/h3>
&lt;p>久しぶりに起動したらアップデートする必要があった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2018/20180331#TOC-Ubuntu-16.04-IntelliJ-IDEA-">2018.1にアップデートしたときのログ&lt;/a>&lt;/p>
&lt;p>上と同じ手順で行けた。&lt;br>
以下はログ。&lt;/p>
&lt;p>tar.gzをダウンロードして解凍し、 &lt;code>$HOME/vendor/&lt;/code> に配置。&lt;br>
&lt;code>idea-IC -&amp;gt; idea-IC-181.4203.550&lt;/code> とsymlinkしていたので、付け替える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/vendor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm idea-IC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ln -s idea-IC-201.6668.121 idea-IC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.local/share/applications/jetbrains-idea-ce.desktop&lt;/code> を次のように編集:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Desktop Entry]
Version=2020.1.0
Type=Application
Name=IntelliJ IDEA Community Edition
Icon=$HOME/vendor/idea-IC/bin/idea.png
Exec=&amp;#34;$HOME/vendor/idea-IC/bin/idea.sh&amp;#34; %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=jetbrains-idea-ce
&lt;/code>&lt;/pre>&lt;p>※ &lt;code>$HOME&lt;/code> は展開して書き替えないといけないかも。&lt;/p>
&lt;h3 id="ubuntuに昔入れたminikubeをuninstall">Ubuntuに昔入れたminikubeをUninstall&lt;/h3>
&lt;p>localkubeというdaemonが動いていることに気がついたのがきっかけだけど、2〜3年使っていないので掃除することにした。&lt;/p>
&lt;p>実行したコマンド:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo systemctl stop localkube
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl disable localkube
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker system prune
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf ~/.minikube
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo rm /usr/local/bin/localkube /usr/local/bin/minikube
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo rm -rf /etc/kubernetes/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2017/20171118#TOC-Ubuntu-Minikube-">2017年の作業ログ&lt;/a>によると、dpkgで入れたみたいなんだけど、 &lt;code>dpkg -l&lt;/code> しても出てこなかった。はて。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@yudapramad/uninstall-minikube-5c032a7dd44f">Uninstall Minikube - yuda prama - Medium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/minikube/issues/1043">How to uninstall? · Issue #1043 · kubernetes/minikube&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-28</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200428/</link><pubDate>Tue, 28 Apr 2020 13:16:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200428/</guid><description>
&lt;h1 id="428">4/28&lt;/h1>
&lt;h2 id="macでanyenv経由のnodenv経由でnodejsを入れてみた">Macでanyenv経由のnodenv経由でNode.jsを入れてみた&lt;/h2>
&lt;p>以前はnodebrewを使っていたのだけど、anyenv押しの記事を見たので。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ucan-lab/items/ce35bcaf2562054917a8">Homebrew 経由の anyenv 経由の nodenv 経由で Node.js をインストールする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nodenv/nodenv">https://github.com/nodenv/nodenv&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>anyenv install&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install anyenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>anyenv init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 指示に従う&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vi .zshrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; eval &amp;#34;$(anyenv init -)&amp;#34; をいい感じに足す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#000">$SHELL&lt;/span> -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>nodenv install&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>anyenv install nodenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>nodenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nodenv install 12.16.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nodenv global 12.16.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>eval &amp;quot;$(nodenv init -)&amp;quot;&lt;/code> はインストール後に1度だけ実行が必要そう。&lt;br>
でないと、 &lt;code>~/.anyenv/envs/nodenv/shims/&lt;/code> 以下に実行ファイルができないっぽい。（ちょっとハマった。）&lt;/p></description></item><item><title>A: 2020-04-27</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200427/</link><pubDate>Mon, 27 Apr 2020 23:52:42 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200427/</guid><description>
&lt;h2 id="427">4/27&lt;/h2>
&lt;h3 id="cloud-build--terraformでインフラcicd">Cloud Build + TerraformでインフラCI/CD&lt;/h3>
&lt;p>参考記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/solutions/managing-infrastructure-as-code?hl=ja">Terraform、Cloud Build、GitOps を使用してインフラストラクチャをコードとして管理する | ソリューション&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/google-cloud/infrastructure-as-code-introduction-to-continuous-spark-cluster-deployment-with-cloud-build-and-9798a776bbb0">Infrastructure as Code: Introduction to Continuous Spark Cluster Deployment with Cloud Build and Terraform&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="bitbucket-pipelines--terraform">Bitbucket Pipelines + Terraform&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.slideshare.net/MasatomoIto/terraform-with-bitbucket-pipeline">Terraform with Bitbucket pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nicksantamaria.net/post/self-deploying-site-hugo-terraform-bitbucket-pipelines/">How to build self-deploying applications with Terraform and BitBucket Pipelines. | Nick Santamaria&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tfnotify対応">tfnotify対応&lt;/h4>
&lt;p>&lt;code>help wanted&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://github.com/mercari/tfnotify/issues/36">Support Bitbucket Pipelines · Issue #36 · mercari/tfnotify&lt;/a>&lt;/p>
&lt;h4 id="gcp対応">GCP対応&lt;/h4>
&lt;p>terraformのDockerイメージを使って、下の要領で認証情報を渡してあげれば行けると思われる。&lt;/p>
&lt;h3 id="bitbucket-pipelinesでgcpに継続的デリバリ">Bitbucket PipelinesでGCPに継続的デリバリ&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/deploy-to-google-cloud-900820342.html">Deploy to Google Cloud - Atlassian Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.primitivesense.com/case-studies/ci-with-testing-and-deploying-google-cloud-functions-within-bitbucket-pipelines/">Testing &amp;amp; deploying Google Cloud Functions in BitBucket Pipelines | PrimitiveSense - Web Design Newcastle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/adilsoncarvalho/e0e8da81dbf52bf90c671887ef7e04d3">Bitbucket Pipelines deployment to a Google Container Engine configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@puuga/dev-story-deploy-to-gcp-cloud-run-with-bitbucket-pipelines-4fef8f2ece27">Dev Story: Deploy to GCP Cloud Run with Bitbucket Pipelines&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-25</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200425/</link><pubDate>Sat, 25 Apr 2020 23:20:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200425/</guid><description>
&lt;h2 id="425">4/25&lt;/h2>
&lt;h3 id="技術メモ用のサイトをhugoで新設することにした">技術メモ用のサイトをHugoで新設することにした&lt;/h3>
&lt;p>&lt;a href="https://gsuiteupdates-ja.googleblog.com/2019/02/google-google.html">来年末には旧版のGoogleサイトが使えなくなるそう&lt;/a>なので、早く移行しないとなー、と前々から思っていた。
今回、ようやく重い腰を上げた形。&lt;/p>
&lt;p>今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://raahii.github.io/posts/automating-hugo-builds-with-github-actions/">HugoのビルドをGithub Actionで自動化する - 1ミリもわからん&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>…で、前々から目をつけていたHugoのテーマ「&lt;a href="https://learn.netlify.com/en/">LEARN&lt;/a>」を使うことにした。&lt;/p>
&lt;p>Googleが去年公開した&lt;a href="https://www.docsy.dev/">Docsy&lt;/a>というテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。&lt;/p>
&lt;h3 id="learnで気に入らなかったところ">LEARNで気に入らなかったところ&lt;/h3>
&lt;p>少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。&lt;/p>
&lt;ul>
&lt;li>chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが）&lt;/li>
&lt;li>検索が妙にヒットしすぎる&lt;/li>
&lt;li>ページの目次がちょっとわかりにくい。慣れれば問題ないけど&lt;/li>
&lt;/ul>
&lt;h3 id="gitbookを試してみたけどoss版は先行きが微妙">GitBookを試してみたけど、OSS版は先行きが微妙&lt;/h3>
&lt;p>GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。&lt;/p>
&lt;p>詳しくは&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/gitbook/">Software &amp;gt; GitBook&lt;/a>に書いた。&lt;/p>
&lt;p>手順:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>npm install -g gitbook-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir new-docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gitbook init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gitbook serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考にした記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/mebiusbox2/items/938af4b0d0bf7a4d3e33">GitBookによるドキュメント作成 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://morizyun.github.io/blog/gitbook-github-pages-deploy/index.html">GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/mitsuhisaT/items/8668b70586b9605040bd">gitbookの使い方 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="結局docsyへ">結局、Docsyへ&lt;/h3>
&lt;p>&lt;a href="https://efcl.info/2017/12/26/docusaurus-almin/">azuさんがGitBookからDocusaurusに移行していた&lt;/a>ので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。&lt;/p>
&lt;h2 id="426">4/26&lt;/h2>
&lt;h3 id="プロフィールサイトのgulpがつらい">プロフィールサイトのgulpがつらい&lt;/h3>
&lt;p>昨日、Docsyを扱うにあたって、UbuntuマシンのNode.jsをv8 -&amp;gt; v12に上げた。&lt;/p>
&lt;h4 id="referenceerror-primordials-is-not-defined">ReferenceError: primordials is not defined&lt;/h4>
&lt;p>今日、プロフィールサイト &lt;a href="https://progrhy.me">https://progrhy.me&lt;/a> の編集をしようとそのまま作業していたら、次とほぼ同じ問題に遭遇した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hepokon365.hatenablog.com/entry/2019/10/31/022524">Node.js v12にアップデートするとgulp v4でもfs.jsで「ReferenceError: primordials is not defined」エラーが発生 - 毎日へっぽこ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分の環境で問題になったのは &lt;code>natives&lt;/code> module.&lt;/p>
&lt;pre tabindex="0">&lt;code>% gulp
fs.js:35
} = primordials;
^
ReferenceError: primordials is not defined
at fs.js:35:5
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
at Module._compile (internal/modules/cjs/loader.js:1156:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1176:10)
at Module.load (internal/modules/cjs/loader.js:1000:32)
at Function.Module._load (internal/modules/cjs/loader.js:899:14)
at Module.require (internal/modules/cjs/loader.js:1042:19)
at require (internal/modules/cjs/helpers.js:77:18)
&lt;/code>&lt;/pre>&lt;p>自分の場合も、上の記事と同じように、 &lt;code>package-lock.json&lt;/code> 内に &lt;code>graceful-fs&lt;/code> のv3系への依存があった。&lt;br>
また、依存の解消は難しいようだった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/20200424#TOC-Gulp-3---4-">前回の挑戦&lt;/a>から、gulpのバージョンアップは今のところ諦めているので、Node.jsのバージョンをv10系に下げることにした。&lt;/p>
&lt;h4 id="referenceerror-internalbinding-is-not-defined">ReferenceError: internalBinding is not defined&lt;/h4>
&lt;p>次に出くわしたのは下のエラー:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://narunaru7638.hatenablog.com/entry/2019/05/04/124621">gulp利用時に「ReferenceError: internalBinding is not defined」のエラー - なるの備忘録&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>% gulp
internal/util/inspect.js:31
const types = internalBinding(&amp;#39;types&amp;#39;);
^
ReferenceError: internalBinding is not defined
at internal/util/inspect.js:31:15
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at util.js:25:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at fs.js:42:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
&lt;/code>&lt;/pre>&lt;p>上の記事にあったように、 &lt;code>npm i natives@latest --no-save&lt;/code> を実行したら解消した。&lt;/p></description></item><item><title>A: 2020-03-18</title><link>https://progrhy.me/tech-notes/a/memo/2020/20200318/</link><pubDate>Wed, 18 Mar 2020 12:19:36 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/20200318/</guid><description>
&lt;h2 id="318">3/18&lt;/h2>
&lt;h3 id="ubuntuでkrewを使ってkubectxkubensをinstall">Ubuntuでkrewを使ってkubectx/kubensをinstall&lt;/h3>
&lt;p>kubectxをUbuntuにどうやって入れようかとREADMEを見ていたら、kubectlにはkrewというプラグイン管理システムがあるそうな。&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/krew/">https://github.com/kubernetes-sigs/krew/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">https://krew.sigs.k8s.io/docs/user-guide/setup/install/&lt;/a> に従ってインストール&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">## bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">set&lt;/span> -x&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>mktemp -d&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curl -fsSLO &lt;span style="color:#4e9a06">&amp;#34;https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tar zxvf krew.tar.gz &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">KREW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./krew-&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>uname &lt;span style="color:#000;font-weight:bold">|&lt;/span> tr &lt;span style="color:#4e9a06">&amp;#39;[:upper:]&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;[:lower:]&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">_amd64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$KREW&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> install --manifest&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>krew.yaml --archive&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>krew.tar.gz &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$KREW&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>↓を.bashrcに追記&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">KREW_ROOT&lt;/span>&lt;span style="color:#204a87;font-weight:bold">:-&lt;/span>&lt;span style="color:#000">$HOME&lt;/span>&lt;span style="color:#000;font-weight:bold">/.krew&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/bin:&lt;/span>&lt;span style="color:#000">$PATH&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>…で、kubectx/kubensをinstall:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl krew install ctx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl krew install ns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>kubectx&lt;/code> &lt;code>kubens&lt;/code> ではなく &lt;code>kubectl ctx&lt;/code> &lt;code>kubectx ns&lt;/code> で使うことになる。&lt;/p>
&lt;h3 id="gkeのingressではgcsをバックエンドにできない">GKEのIngressではGCSをバックエンドにできない&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/mihirat/items/668a43a88547792cde7e">kubernetesを使った開発のベストプラクティスを求めて - Qiita&lt;/a>&lt;/p>
&lt;p>この記事は2年4ヶ月前のものなのだが、自分で試してもできなかった。&lt;br>
残念。&lt;/p></description></item></channel></rss>