<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-05-10</title><link>https://progrhy.me/tech-notes/a/memo/20200510/</link><pubDate>Sun, 10 May 2020 15:19:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200510/</guid><description>
&lt;h2 id="510">5/10&lt;/h2>
&lt;h3 id="terraformのkubernetes-providerを試してみる">TerraformのKubernetes Providerを試してみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/121145">TerraformのKubernetes ProviderでK8sのリソース管理にトライ - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;h3 id="ubuntuでもanyenvを使うことにした">Ubuntuでもanyenvを使うことにした&lt;/h3>
&lt;p>Ubuntuで最近Ruby触ってなかったので、入っているRubyが古いことに気づいたのだけど、rbenvも &lt;code>git clone&lt;/code> して入れたものなので、古い。&lt;br>
plenv, pyenvも同様である。&lt;/p>
&lt;p>&lt;a href="../2020/20200428/">4/28&lt;/a>にmacOSでanyenvを試したのだけど、Ubuntuでも使ってみることにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/p>
&lt;p>自分環境のセットアップスクリプトに &lt;code>setup-rbenv.sh&lt;/code> とか入れてるけど、anyenvで管理した方が筋がよさそう。&lt;/p>
&lt;h4 id="anyenv-install">anyenv install&lt;/h4>
&lt;p>Linuxbrewを入れてるので、brewでインストールできた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% brew install &lt;span style="color:#000">anyenv&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://linuxbrew.bintray.com/bottles/anyenv-1.1.1.x86_64_linux.bottle.tar.gz
&lt;span style="color:#8f5902;font-style:italic">######################################################################## 100.0%&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Pouring anyenv-1.1.1.x86_64_linux.bottle.tar.gz
🍺 /home/linuxbrew/.linuxbrew/Cellar/anyenv/1.1.1: &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> files, 48.4KB
% anyenv init
&lt;span style="color:#8f5902;font-style:italic"># Load anyenv automatically by adding&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the following to ~/.zshrc:&lt;/span>
&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
% &lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
ANYENV_DEFINITION_ROOT&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>/home/quiche/.config/anyenv/anyenv-install&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> doesn&lt;span style="color:#4e9a06">&amp;#39;t exist. You can initialize it by:
&lt;/span>&lt;span style="color:#4e9a06">&amp;gt; anyenv install --init
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">% anyenv install --init
&lt;/span>&lt;span style="color:#4e9a06">Manifest directory doesn&amp;#39;&lt;/span>t exist: /home/quiche/.config/anyenv/anyenv-install
Do you want to checkout ? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>y/N&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: y
Cloning https://github.com/anyenv/anyenv-install.git master to /home/quiche/.config/anyenv/anyenv-install...
Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/quiche/.config/anyenv/anyenv-install&amp;#39;&lt;/span>...
remote: Enumerating objects: 48, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
remote: Total &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, reused &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, pack-reused &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>
Unpacking objects: 100% &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>48/48&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
Completed!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまでやって &lt;code>exec $SHELL -l&lt;/code> してもまだPATHには変化なし。&lt;br>
どうも何かしら &lt;code>*env&lt;/code> をインストールしないといけないらしい。&lt;/p>
&lt;p>&lt;code>anyenv install rbenv&lt;/code> してからシェルに再ログインすると、PATHに &lt;code>$HOME/.anyenv/envs/rbenv/shims&lt;/code>, &lt;code>$HOME/.anyenv/envs/rbenv/bin&lt;/code> が追加された。&lt;/p>
&lt;h4 id="rubyのインストールでややハマった">rubyのインストールでややハマった&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% rbenv install 2.7.1 -v
:
ruby: error &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> loading shared libraries: libruby.so.2.7: cannot open shared object file: No such file or directory
uncommon.mk:1130: recipe &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> target &lt;span style="color:#4e9a06">&amp;#39;revision.tmp&amp;#39;&lt;/span> failed
make: *** &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>revision.tmp&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Error &lt;span style="color:#0000cf;font-weight:bold">127&lt;/span>
BUILD FAILED &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Ubuntu 18.04 using ruby-build 20200401-11-g12af1c3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のようなエラーで失敗した。&lt;br>
どうもこれはrdocの生成でコケているようだ。&lt;/p>
&lt;p>ただ、ビルドログを見たら下のようなエラーも出ていた。&lt;/p>
&lt;pre>&lt;code>% view /tmp/ruby-build.20200510143333.6198.log
:
1660 *** Following extensions are not compiled:$
1661 dbm:$
1662 &amp;gt;-Could not be configured. It will not be installed.$
1663 &amp;gt;-Check ext/dbm/mkmf.log for more details.$
1664 gdbm:$
1665 &amp;gt;-Could not be configured. It will not be installed.$
1666 &amp;gt;-Check ext/gdbm/mkmf.log for more details.$
1667 *** Fix the problems, then remove these directories and try again if you want.$
:
&lt;/code>&lt;/pre>&lt;p>よくわからないままビルドに必要そうなパッケージをインストールしてリトライした。&lt;/p>
&lt;pre>&lt;code>sudo apt install build-essential bison libffi-dev libgdbm-dev libgdbm-compat-dev \
libreadline-dev libssl-dev zlib1g-dev
&lt;/code>&lt;/pre>&lt;p>参考: &lt;a href="https://qiita.com/raccy/items/cd0b39a33dbe764480be">Rubyをソースからコンパイルするときの依存ライブラリ - Qiita&lt;/a>&lt;/p>
&lt;p>上で、いくつかのパッケージは既にインストールされていた。&lt;/p>
&lt;p>リトライした結果、結局、さっきと同じrubyのエラーで失敗した。&lt;br>
ビルドログから、dbm関連のエラーは消えていたので、そこは解消したらしい。&lt;/p>
&lt;p>闇雲に別のまっさらなシェルを立ち上げて再度インストールを試みたところ、成功した。&lt;/p>
&lt;p>まだ &lt;code>~/.rbenv&lt;/code> に古いrbenvが入っていて、 &lt;code>ruby&lt;/code> が &lt;code>~/.rbenv/shims/ruby&lt;/code> を向いていたので、その辺が悪さをしていたのかもしれない。&lt;/p>
&lt;p>これで駄目だったらrdocの生成をオフしようかと思っていた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackbaka.hatenablog.com/entry/2018/09/13/151242">Ruby インストール時の rdoc エラー[Ubuntu] - ハッキングバカ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="clenvでtravis-ciのビルド通知とバッジを修正した">clenvでTravis CIのビルド通知とバッジを修正した&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/clenv">https://github.com/progrhyme/clenv&lt;/a>&lt;/p>
&lt;p>昔、リポジトリを key-amb -&amp;gt; progrhyme に移したのだけど、そのせいでバッジとSlack通知がおかしくなっていた。&lt;/p>
&lt;p>Slackのインテグレーション自体は生きていたので、 &lt;code>travis&lt;/code> コマンドで設定をし直した。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gem i travis
travis encrypt &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;Slack Workspace&amp;gt;:&amp;lt;Slack Integration Token&amp;gt;&amp;#34;&lt;/span> --add notifications.slack.rooms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで .travis.yml が更新されたので、GitHubにpushして完了。&lt;/p>
&lt;p>バッジも新しいURLで取得した。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications">https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-09</title><link>https://progrhy.me/tech-notes/a/memo/20200509/</link><pubDate>Sat, 09 May 2020 15:48:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200509/</guid><description>
&lt;h2 id="59">5/9&lt;/h2>
&lt;h3 id="シェルスクリプトのドキュメントコメントをpodで書くのはもうやめていいかな">シェルスクリプトのドキュメントコメントをPODで書くのはもうやめていいかな&lt;/h3>
&lt;p>いつだったか、何かの本でそういう書き方を見てからずっとそうやってる。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
:
&lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
: &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;&amp;#39;__EOF__&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=encoding utf8
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=head1 NAME
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">B&amp;lt;my-script&amp;gt; - short description
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=head1 DESCRIPTION
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">:
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=cut
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">__EOF__&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでPODに食わせるとドキュメントとして解釈してくれるので、スクリプト内では &lt;code>pod2text $0&lt;/code> とかでヘルプを表示できる。&lt;/p>
&lt;p>…が、そろそろ &lt;code>pod2text&lt;/code> がどの環境にも入っていると想定すべきでないかも…という気がしてきた。&lt;br>
ところが、じゃあどう書いたらいいの？っていうのには決定版がない気がする。&lt;/p>
&lt;p>シェルスクリプトにちゃんとコメントを書こうとしている人たちの間では、主に2つの派閥がある気がする:&lt;/p>
&lt;ol>
&lt;li>スクリプトのヘッダや関数のヘッダとしてドキュメントコメントをそれなりのフォーマットで書きましょう派。&lt;a href="https://google.github.io/styleguide/shellguide.html#s4.1-file-header">Googleのコーディング規約&lt;/a>もこれ&lt;/li>
&lt;li>&lt;code>usage()&lt;/code> 関数内にヒアドキュメントで書きましょう派&lt;/li>
&lt;/ol>
&lt;p>いいとこ取りをしてる感じに見えるのは、 &lt;code>usage()&lt;/code> 関数でコメントをパースしてヘルプっぽく出力してるもの。&lt;br>
下のような例があった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ngyuki/items/673d6cb3b36360eaf5cc">シェルスクリプトでヘルプメッセージをコメントに書いて表示する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/TomKid/items/ab49f8d0cd15b18e5e4a">自作シェルスクリプトにヘルプやらバージョンメッセージを実装？する面白い方法があった - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分で独自フォーマットのコメントを書いている、という点では、下もこの類型にあたるか:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ssh0/items/0c14ee8949512a4dc98e">シェルスクリプト群のドキュメント書くの面倒だから自動でREADME.mdを生成する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jmcantrell/bashful/blob/master/bin/shdoc">https://github.com/jmcantrell/bashful/blob/master/bin/shdoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>godocみたいなのないかな、と思って「shelldoc」とか「shdoc」とかでぐぐるとたくさん出てくる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://shellscript.sunone.me/tips.html">シェルスクリプト Tips | UNIX &amp;amp; Linux コマンド・シェルスクリプト リファレンス&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="microk8sを使ってみる">Microk8sを使ってみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/110630">UbuntuでKubernetesのテスト環境としてMicrok8sをセットアップした - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p></description></item><item><title>A: 2020-05-08</title><link>https://progrhy.me/tech-notes/a/memo/20200508/</link><pubDate>Fri, 08 May 2020 10:26:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200508/</guid><description>
&lt;h2 id="58">5/8&lt;/h2>
&lt;h3 id="terraformerをgcpで使ってみた">terraformerをGCPで使ってみた&lt;/h3>
&lt;p>GCPでdefault networkをimportしたいと思った。&lt;br>
ふつうに &lt;code>terraform import&lt;/code> を使えばいいのだが、terraformerのことを思い出したので、使ってみることにした。&lt;br>
terraformerを使えばHCLファイルを生成することができる。&lt;/p>
&lt;p>terraformerについての一般的な内容は&lt;a href="https://progrhy.me/tech-notes/a/software/terraform/terraformer/">terraformer&lt;/a>にメモしている。&lt;/p>
&lt;p>作業環境: macOS&lt;/p>
&lt;p>Install:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew install terraformer
&lt;/code>&lt;/pre>&lt;/div>&lt;p>準備として、 &lt;code>~/.terraform.d/plugins/darwin_amd64/&lt;/code> に &lt;code>terraform-provider-google_v3.20.0_x5&lt;/code> を置く。&lt;br>
今回はterraform実行ディレクトリの &lt;code>.terraform/plugins&lt;/code> からコピーした。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">terraformer import google --projects&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>my-project &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --regions&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>asia-northeast1 --resources&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>networks,subnetworks
&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果:&lt;/p>
&lt;pre>&lt;code>% tree generated
generated
└── google
└── my-project
├── networks
│   └── asia-northeast1
│   ├── compute_network.tf
│   ├── outputs.tf
│   ├── provider.tf
│   └── terraform.tfstate
└── subnetworks
└── asia-northeast1
├── compute_subnetwork.tf
├── outputs.tf
├── provider.tf
├── terraform.tfstate
└── variables.tf
6 directories, 9 files
&lt;/code>&lt;/pre>&lt;p>tfファイルのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#204a87;font-weight:bold">cat&lt;/span> &lt;span style="color:#204a87;font-weight:bold">generated&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">google&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">my&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">project&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">networks&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">asia&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">northeast1&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">compute_network&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tf&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">resource&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_network&amp;#34; &amp;#34;tfer--default&amp;#34;&lt;/span> {
&lt;span style="color:#000"> auto_create_subnetworks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#000"> delete_default_routes_on_create&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>
&lt;span style="color:#000"> description&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Default network for the project&amp;#34;&lt;/span>
&lt;span style="color:#000"> name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#000"> project&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;my-project&amp;#34;&lt;/span>
&lt;span style="color:#000"> routing_mode&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;REGIONAL&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tfstateのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">generated/google/my-project/subnetworks/asia-northeast&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">/terraform.tfstate&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;terraform_version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0.12.18&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;serial&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;lineage&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;XXXXXXXXXXXX&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;modules&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;root&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;outputs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork_tfer--default_self_link&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;sensitive&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://www.googleapis.com/compute/v1/projects/my-project/regions/asia-northeast1/subnetworks/default&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;resources&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork.tfer--default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_subnetwork&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;depends_on&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;primary&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;attributes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;creation_timestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-05-07T02:07:01.455-07:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;gateway_address&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ip_cidr_range&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.0/20&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;log_config.#&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>terraform_version&lt;/code> がマシンにインストール済みのバージョンと違うのは、terraformerが同梱しているってことなのかな？&lt;/p>
&lt;h3 id="kubernetesのマニフェストをvcsで管理して削除まで正しく同期する方法">KubernetesのマニフェストをVCSで管理して、削除まで正しく同期する方法&lt;/h3>
&lt;p>※5/9 ブログを書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/09/125134">Kubernetesのマニフェストをリポジトリ管理しつつ、リソースの削除も反映したい件 - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>某所で聞いたりして情報を集めた。&lt;br>
このエントリは後掲の関連リンクの続きである。&lt;/p>
&lt;ol>
&lt;li>管理対象のリソースに &lt;code>label&lt;/code> でバージョン番号を振り、新しいバージョンのリソースを配置した後、古いバージョンのリソースを削除する&lt;/li>
&lt;li>&lt;code>kubectl apply&lt;/code> 時に &lt;code>--prune&lt;/code> オプションを付ける&lt;/li>
&lt;li>Argo CDのAutomatic Pruning機能を使う&lt;/li>
&lt;li>リソースをTerraformで管理する&lt;/li>
&lt;/ol>
&lt;p>関連:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../20200505/#kubernetes%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%81%AF%E5%85%A8%E9%83%A8export%E3%81%97%E3%81%A6%E7%AE%A1%E7%90%86%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%81%84%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AD%E3%81%A3%E3%81%A6%E6%80%9D%E3%81%A3%E3%81%9F">2020-05-05のメモ - Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-06</title><link>https://progrhy.me/tech-notes/a/memo/20200506/</link><pubDate>Wed, 06 May 2020 13:29:34 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200506/</guid><description>
&lt;h2 id="56">5/6&lt;/h2>
&lt;h3 id="githubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ">GitHubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ&lt;/h3>
&lt;p>なんかないかなと思ったけど、&lt;a href="https://github.com/Songmu/ghg">Songmu/ghg&lt;/a>以上のものは見つからないな。&lt;/p>
&lt;p>hubコマンドあたりで実装されてたりはしなかった。&lt;/p>
&lt;p>&lt;a href="https://hub.github.com/hub.1.html">https://hub.github.com/hub.1.html&lt;/a>&lt;/p>
&lt;h3 id="ghgでmdbookを入れようと思ったが失敗した">ghgでmdBookを入れようと思ったが失敗した&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% env &lt;span style="color:#000">GHG_HOME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$HOME&lt;/span> ghg get rust-lang/mdBook
fetch the GitHub release &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> rust-lang/mdBook
no assets available
&lt;/code>&lt;/pre>&lt;/div>&lt;p>悲しい。&lt;br>
結局wget -&amp;gt; tar xvfで入れました。&lt;/p></description></item><item><title>A: 2020-05-05</title><link>https://progrhy.me/tech-notes/a/memo/20200505/</link><pubDate>Tue, 05 May 2020 07:25:57 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200505/</guid><description>
&lt;h2 id="55">5/5&lt;/h2>
&lt;h3 id="kubernetesのマニフェストは全部exportして管理した方がいいんじゃねって思った">Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/h3>
&lt;p>exportのやり方は調べて&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#%E5%85%A8%E3%81%A6%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%81%84">kubectlのページ#全てのマニフェストを取得したい&lt;/a>に書いた。&lt;/p>
&lt;p>…というか、exportしてないと不安である。&lt;/p>
&lt;p>kustomizeで管理していても、野良のリソースがないことを保証できない。&lt;br>
素のマニフェスト管理でも同様。&lt;/p>
&lt;p>&lt;code>kubectl apply&lt;/code> は、ふつうは削除同期をやってくれないので。&lt;/p>
&lt;p>（※…と思って、リファレンスを読み返していたら、 &lt;code>--prune&lt;/code> というオプションがα機能であるようだ。これについては、&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#apply">kubectl#apply&lt;/a>に書いた）&lt;/p>
&lt;p>定期的にdumpして差分がないかチェックした方がいいんじゃないかな。&lt;br>
特に、本番とstaging環境は。&lt;/p>
&lt;p>逆に、export -&amp;gt; applyの運用にしていれば、staging環境の差分をそのまま本番に適用する運用が可能ではないだろうか。&lt;br>
このやり方なら、仰々しいK8s対応のCI/CDツールなど使わなくても、kubectlとGitOpsだけで行けるかもしれない。&lt;/p>
&lt;p>まだ試してないので、実際にやってみたら色々と課題も出てくるだろうけど。&lt;/p>
&lt;h3 id="neobundleからdeinvimに乗り換えた">NeoBundleからdein.vimに乗り換えた&lt;/h3>
&lt;p>※5/6 ブログ書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/06/122034">今更だけどNeoBundleからdein.vimに乗り換えて、プラグインを6つ追加した - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>今更かよって感じだけど乗り換えた。&lt;br>
NeoBundleは2年ぐらい前に更新が止まっていた。&lt;/p>
&lt;p>作業マシンはUbuntu 18.04&lt;/p>
&lt;p>See also &lt;a href="https://progrhy.me/tech-notes/a/program/vim/#deinvim">Vim#deinvim&lt;/a>&lt;/p>
&lt;h4 id="インストール">インストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/Shougo/dein.vim#quick-start">https://github.com/Shougo/dein.vim#quick-start&lt;/a> に従う。&lt;/p>
&lt;p>インストール先は &lt;code>~/.vim/dein&lt;/code> とした。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh
sh ./installer.sh ~/.vim/dein
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際は&lt;a href="https://github.com/progrhyme/dotfiles/commit/1ef6a75f2952407d6758eb0c1cef584943ed9ecc">こんな感じ&lt;/a>で、スクリプトで対応した。&lt;/p>
&lt;h4 id="vimrcの移行">vimrcの移行&lt;/h4>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/35f3be479a57e92d98a6182792b900366ab20beb">このコミット&lt;/a>で対応した。&lt;/p>
&lt;p>とりあえず使ってるのは全部移行しようかと思ったけど、次の行のプラグインについてはどう移行すればいいのかぱっとわからず、悩んだ:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Vim" data-lang="Vim">&lt;span style="color:#000">NeoBundleLazy&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mopp/layoutplugin.vim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> { &lt;span style="color:#4e9a06">&amp;#39;autoload&amp;#39;&lt;/span> : { &lt;span style="color:#4e9a06">&amp;#39;commands&amp;#39;&lt;/span> : &lt;span style="color:#4e9a06">&amp;#39;LayoutPlugin&amp;#39;&lt;/span>} }&lt;span style="color:#a40000">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そもそもこのプラグインはvim-pluginの雛形作成ツールで、今のところ使う予定がないので、消すことにした。&lt;/p>
&lt;p>あと、TOMLに対応したプラグインがなかったので、 &lt;code>'cespare/vim-toml'&lt;/code> を入れた。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;p>なんか、vim起動後にENTERが必要だったり、終了後に画面がクリアされなかったりする（NeoBundleの頃はそんなことはなかった）が、概ね問題なさそう。&lt;/p>
&lt;p>（追記）引き続き確認したところ、 &lt;code>'Align'&lt;/code> プラグインで警告が出ていることに気がついた。 &lt;code>'vim-scripts/Align'&lt;/code> に修正したら上の問題はなくなった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/dotfiles/commit/df90a50ffca16629bb0dbcf31f6405e249cac763">修正コミット&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-04</title><link>https://progrhy.me/tech-notes/a/memo/20200504/</link><pubDate>Mon, 04 May 2020 15:19:13 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200504/</guid><description>
&lt;h2 id="54">5/4&lt;/h2>
&lt;h3 id="git-pull---pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った">git pull &amp;ndash;pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った&lt;/h3>
&lt;p>何番煎じだよって感じだけど、いい加減面倒になったので作った。&lt;/p>
&lt;p>コード: &lt;a href="https://github.com/progrhyme/git-wraps/blob/5580b8cf19d62262392548a8fa66c737ae5c01c6/bin/git-branch-clean">git-wraps/bin/git-branch-clean&lt;/a>&lt;/p>
&lt;p>gitのaliasにも設定したかったので、オプションにも対応させた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git bc -h
NAME
git-branch-clean - git subcommand to clean up merged &lt;span style="color:#204a87">local&lt;/span> branches
SYNOPSYS
git branch-clean &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
DESCRIPTION
This is a git subcommand to clean up merged &lt;span style="color:#204a87">local&lt;/span> branches.
Branches &lt;span style="color:#4e9a06">&amp;#34;master&amp;#34;&lt;/span> and &lt;span style="color:#4e9a06">&amp;#34;develop&amp;#34;&lt;/span> are whitelisted by default. You can
change the whitelist by &lt;span style="color:#4e9a06">&amp;#34;-a|--allow BRANCH&amp;#34;&lt;/span> option.
Current branch is always whitelisted.
OPTIONS
-i Interactive mode. Show prompt before deleting branch.
-a&lt;span style="color:#000;font-weight:bold">|&lt;/span>--allow BRANCH
Add argument as branch name to whitelist which won&lt;span style="color:#a40000">&amp;#39;&lt;/span>t be deleted.
This option can be specified multiple times.
Ex&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Whitelist = (develop, master, CURRENT)&lt;/span>
git branch-clean
&lt;span style="color:#8f5902;font-style:italic"># Whitelist = (foo, CURRENT)&lt;/span>
git branch-clean -a foo
&lt;span style="color:#8f5902;font-style:italic"># Whitelist = (test, master, CURRENT)&lt;/span>
git branch-clean -a &lt;span style="color:#204a87">test&lt;/span> -a master
-p&lt;span style="color:#000;font-weight:bold">|&lt;/span>--pull
Execute &lt;span style="color:#4e9a06">&amp;#34;git pull --prune&amp;#34;&lt;/span> before deleting branches.
-v&lt;span style="color:#000;font-weight:bold">|&lt;/span>--verbose
Verbose output.
-h&lt;span style="color:#000;font-weight:bold">|&lt;/span>--help
Show &lt;span style="color:#204a87">help&lt;/span> text.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスクリプトをPATHが通っている場所に置く。&lt;/p>
&lt;p>.gitconfigのaliasはこんな感じ:&lt;/p>
&lt;pre>&lt;code>[alias]
plr = pull --prune
bc = branch-clean --pull
bcp = branch-clean --pull
&lt;/code>&lt;/pre>&lt;p>&lt;code>git branch-clean&lt;/code> か &lt;code>git plr&lt;/code> か &lt;code>git bcp&lt;/code> か、利用頻度によってaliasを調整するかもしれない。（※追記あり）&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kenshiroh/items/44dcf4b094e841bb42a2">gitでbranchをお掃除する際のチートシート - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/yuichielectric/items/84cd61915a1236f19221">リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="59-追記">5/9 追記&lt;/h4>
&lt;p>&lt;code>git-branch-sweep&lt;/code> -&amp;gt; &lt;code>git-branch-clean&lt;/code> にリネームして、上を書き換えた。&lt;br>
エイリアスは3つ登録した。&lt;/p>
&lt;h3 id="ubuntuでkubectxをlinuxbrewで入れた">Ubuntuでkubectxをlinuxbrewで入れた&lt;/h3>
&lt;p>&lt;a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx&lt;/a>&lt;/p>
&lt;p>READMEには明記されてはいないのだけど、 &lt;code>brew install kubectx&lt;/code> でふつうにインストールできて使えた。&lt;br>
まあ、シェルスクリプトだしな。&lt;/p>
&lt;h3 id="memo-ページの階層を増やしたらhogoのサイト内ページ参照が壊れた">memo/ ページの階層を増やしたらHogoのサイト内ページ参照が壊れた&lt;/h3>
&lt;p>下の変更による:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/tech-notes/commit/325430dfd7d297186bc73aa2e53bf69e8da5a79c">[memo] Move some memos under 2020/ · progrhyme/tech-notes@325430d&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>例えば、20200502.md内のリンクを20200501へのリンクを &lt;code>{{\&amp;lt; ref &amp;quot;/a/memo/20200501.md&amp;quot; \&amp;gt;}}&lt;/code> に戻すと、次のエラーが出る:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% hugo -v --path-warnings
INFO 2020/05/05 06:53:45 Using config file:
Building sites … INFO 2020/05/05 06:53:45 syncing static files to /home/progrhyme/my/repos/tech-notes/public/
INFO 2020/05/05 06:53:45 postcss: use config file /home/progrhyme/my/repos/tech-notes/themes/docsy/postcss.config.js
ERROR 2020/05/05 06:53:47 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ja&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> REF_NOT_FOUND: Ref &lt;span style="color:#4e9a06">&amp;#34;/a/memo/20200501.md&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;/home/progrhyme/my/repos/tech-notes/content/ja/a/memo/20200502.md:16:34&amp;#34;&lt;/span>: page not found
Total in &lt;span style="color:#0000cf;font-weight:bold">2470&lt;/span> ms
Error: Error building site: logged &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> error&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-05-03</title><link>https://progrhy.me/tech-notes/a/memo/20200503/</link><pubDate>Sun, 03 May 2020 12:11:38 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200503/</guid><description>
&lt;h2 id="53">5/3&lt;/h2>
&lt;h3 id="github-actionsには今ビルドを手動トリガーするネイティブ機能はないが同等のことはできる">GitHub Actionsには今ビルドを手動トリガーするネイティブ機能はない（が、同等のことはできる）&lt;/h3>
&lt;p>Bitbucket Pipelinesの &lt;code>trigger: manual&lt;/code> みたいな機能がリファレンス見てもなさそうだなと思ってググってみたら、なさそうだとわかった。&lt;/p>
&lt;p>フィーチャーリクエストが出ている:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504">GitHub Actions Manual Trigger / Approvals - GitHub Community Forum&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>擬似的に同等のことはできる。以下、参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/proudust/items/51599abd2b107b708e1e">GitHub Actions で手動トリガーのワークフローを作る - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/58933155/manual-workflow-triggers-in-github-actions">docker - Manual workflow triggers in Github Actions - Stack Overflow&lt;/a>
&lt;ul>
&lt;li>&lt;code>on.watch.types: [stared]&lt;/code> でstarをフックにしている例が面白いw&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="github-actionsを使ってterraformでgcp構成をcicdする">GitHub Actionsを使ってTerraformでGCP構成をCI/CDする&lt;/h3>
&lt;p>Qiitaに投稿した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/6bde1e1807a65c7e2cb2">GitHub ActionsでGCPにTerraformでインフラCI/CDする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kentakozuka/items/e0d356df38f29ee7587e">Github Actions で GCPに向けてTerraform を実行する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gitにgpgで署名してgithubに署名キーを登録してみた">GitにGPGで署名してGitHubに署名キーを登録してみた&lt;/h3>
&lt;p>そんな設定があったけど、面倒なだけで特に意味はないのではないかと思っていたのでやってなかった。&lt;br>
まあ、でもなりすましを防ぐ意味では有意義か。&lt;/p>
&lt;p>作業環境はUbuntu 18.04 LTS.&lt;/p>
&lt;p>GitHubのドキュメント:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/managing-commit-signature-verification">コミット署名の検証を管理する - GitHub ヘルプ&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/checking-for-existing-gpg-keys">既存の GPG キーの確認 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/generating-a-new-gpg-key">新しい GPG キーを生成する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account">GitHub アカウントへの新しい GPG キーの追加 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/telling-git-about-your-signing-key">Git へ署名キーを伝える - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/signing-commits">コミットに署名する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>既存の GPG キーの確認を次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% gpg --list-secret-keys --keyid-format LONG
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何もなかったので、新しい GPG キーを生成する。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% gpg --version
gpg &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>GnuPG&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 2.2.4
:
% gpg --full-generate-key
% gpg --list-secret-keys --keyid-format LONG
% gpg --armor --export XXXXXXXXXXXXXX
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git へ署名キーを伝える&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git config --global user.signingkey XXXXXXXXXXXXXX
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以降、 &lt;code>git commit&lt;/code> に &lt;code>-S&lt;/code> オプションをつけると、コミットに署名がなされる。&lt;/p>
&lt;p>パスワードが要求されるが、パスワードマネージャーに保存しておくと以降、聞かれないで済む。&lt;/p>
&lt;p>常に署名したい場合、次のコマンドを実行:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git config --global commit.gpgsign &lt;span style="color:#204a87">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>パスワードをランダムで生成してしまったので、すぐに打てなくて困った。&lt;br>
パスワードを変更するには、次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gpg --edit-key XXXXXXXXXXXXXX passwd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一応 &lt;code>$HOME/.gnupg&lt;/code> をバックアップしておいた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kent-hamaguchi/items/0e44f563caf39cd3eb9e">GitHubにgpg署名付きのコミットをする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://joemphilips.com/post/gpg_memo/">GPGで自分用の秘密鍵を1つに統一する · JoeMPhilips&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><pubDate>Wed, 01 Jan 2020 15:38:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/</guid><description/></item></channel></rss>