<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-05-14</title><link>https://progrhy.me/tech-notes/a/memo/20200514/</link><pubDate>Thu, 14 May 2020 00:51:16 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200514/</guid><description>
&lt;h2 id="514">5/14&lt;/h2>
&lt;h3 id="kubectlのctxnsをプロンプトに表示できるようにした">kubectlのctx/nsをプロンプトに表示できるようにした&lt;/h3>
&lt;p>とりあえず個人用のmacOSだけ。下のコミットで実現:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/a9363d648db469a493de55b60178ae5a2d25ce44">https://github.com/progrhyme/myenv/commit/a9363d648db469a493de55b60178ae5a2d25ce44&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>どうせみんなやってるだろうと思ってググったら、案の定いっぱい出てきた。&lt;br>
スパブラさんがzshのプラグイン的なものを作っていて、使いやすそうだったのでこれを使うことにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/superbrothers/zsh-kubectl-prompt">https://github.com/superbrothers/zsh-kubectl-prompt&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>vcs_info&lt;/code> と合わせるとごちゃごちゃしそうだったので、 &lt;code>precmd()&lt;/code> の中で &lt;code>RPROMPT&lt;/code> を料理するようにリファクタした。&lt;/p>
&lt;p>（追記）
Ubuntuでも設定した。&lt;/p>
&lt;p>GKEのcontextとか長すぎてつらいなって思ったら、 &lt;code>kubectl config rename-context&lt;/code> ってコマンドがあることを知った。&lt;/p>
&lt;h4 id="bash対応">bash対応&lt;/h4>
&lt;p>&lt;a href="https://github.com/jonmosco/kube-ps1">https://github.com/jonmosco/kube-ps1&lt;/a> を見つけた。zshにも対応してるので、最初からこっちでもよかったかも。&lt;br>
某現場では、一旦submoduleで組み込んだ。 &lt;code>.bashrc&lt;/code> に下のように追記した:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># kube-ps1&lt;/span>
toggle_kubectl_prompt&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> -n &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#204a87;font-weight:bold">:-&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$__base_ps1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\$(kube_ps1)\n&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __no_kubectl_configured &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! &lt;span style="color:#204a87">command&lt;/span> -v kubectl &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&amp;gt;/dev/null&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#000">__no_kubectl_configured&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> ! kubectl config current-context &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&amp;gt;/dev/null&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#000">__no_kubectl_configured&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __no_kubectl_configured &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#204a87">source&lt;/span> &lt;span style="color:#000">$MYENV_ROOT&lt;/span>/submodule/kube-ps1/kube-ps1.sh
&lt;span style="color:#000">KUBE_PS1_PREFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;lt;&amp;#39;&lt;/span>
&lt;span style="color:#000">KUBE_PS1_SUFFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;gt;&amp;#39;&lt;/span>
&lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$PS1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> ! -v __KUBECTL_PROMPT__ &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Show Kubernetes context/namespace on prompt.&amp;#34;&lt;/span>
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Exec \&amp;#34;toggle_kubectl_prompt\&amp;#34; to hide/unhide.&amp;#34;&lt;/span>
&lt;span style="color:#000">__KUBECTL_PROMPT__&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">PS1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\$(kube_ps1)\n&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">__base_ps1&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>&lt;code>toggle_kubectl_prompt&lt;/code> はzsh同様、ifの中でもいいかも&lt;/li>
&lt;li>&lt;code>KUBE_PS1_(PREFIX|SUFFIX)&lt;/code> は色変えられなかった&lt;/li>
&lt;/ul>
&lt;h3 id="pecoでkubectxns相当の操作">pecoでkubectx/ns相当の操作&lt;/h3>
&lt;ul>
&lt;li>Bash: &lt;a href="https://github.com/progrhyme/dotfiles/commit/65cb850e53a7006d065185e8ad12cb09a53c6127">https://github.com/progrhyme/dotfiles/commit/65cb850e53a7006d065185e8ad12cb09a53c6127&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-13</title><link>https://progrhy.me/tech-notes/a/memo/20200513/</link><pubDate>Wed, 13 May 2020 22:23:49 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200513/</guid><description>
&lt;h2 id="513">5/13&lt;/h2>
&lt;h3 id="iterm2はターミナルappと比べて何が良いのか">iTerm2はターミナル.appと比べて何が良いのか？&lt;/h3>
&lt;p>&lt;a href="https://progrhy.me/tech-notes/a/software/terminal/#iterm2">Software &amp;gt; ターミナル#iTerm2&lt;/a>にもメモったけど、「それ全部ターミナル.app + tmuxでできるな」って思った。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://webrandum.net/iterm2/">MacのターミナルアプリはiTerm2で決まり!!オススメの設定と基本的な機能まとめ – Webrandum&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>…って思って、Twitterで聞いてみたら、知り合いが教えてくれた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">Triggers (特定語句に反応して通知やハイライトが出来る)&lt;br>Smart Selection (ターミナル上でクアドラプル（4回）クリックすると&amp;quot;URLだけ&amp;quot;とか絶妙にいい感じの範囲選択をしてくれる)&lt;br>&lt;br>とかでしょうか！&lt;/p>&amp;mdash; たいぷらいたー (@no_clock) &lt;a href="https://twitter.com/no_clock/status/1260564766273175553?ref_src=twsrc%5Etfw">May 13, 2020&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">HotkeyとかNotificationをカスタムできることろとかですかね？ターミナル.appはあまりつかってないので、もしかしたらできるかもですが......&lt;a href="https://t.co/704RTHagLh">https://t.co/704RTHagLh&lt;/a>&lt;/p>&amp;mdash; blue (@blue_1617) &lt;a href="https://twitter.com/blue_1617/status/1260564811731161090?ref_src=twsrc%5Etfw">May 13, 2020&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>今度、入れてみるか。&lt;/p>
&lt;h3 id="fishでちょっといいと思った機能はzshでもできそう">fishでちょっといいと思った機能はzshでもできそう&lt;/h3>
&lt;ul>
&lt;li>プロンプトでpathを縮めるやつ: &lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path">ohmyzsh/plugins/shrink-path at master · ohmyzsh/ohmyzsh&lt;/a>&lt;/li>
&lt;li>historyから自動補完: &lt;a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-users/zsh-autosuggestions: Fish-like autosuggestions for zsh&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>powerline fontsはzshでも使えるし、自分にとってはこっちの方向性の方がトータルとしてハッピーになれるかも。&lt;/p></description></item><item><title>A: 2020-05-12</title><link>https://progrhy.me/tech-notes/a/memo/20200512/</link><pubDate>Tue, 12 May 2020 08:25:53 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200512/</guid><description>
&lt;h2 id="512">5/12&lt;/h2>
&lt;h3 id="macosのターミナルでフォントサイズのプリセットを変更">macOSのターミナルでフォントサイズのプリセットを変更&lt;/h3>
&lt;p>16ptにしたいんだけど16ptがプリセットにない、と思って試行錯誤していたら、変更方法を見つけた。&lt;/p>
&lt;ol>
&lt;li>環境設定からプロファイルを選択し、「テキスト」タブでフォント欄の「変更」を押す（ここまではわかっていた）&lt;/li>
&lt;li>フォント設定画面で、左上に歯車アイコンがあり、そこを押すとプルダウンメニューが出てくる。「サイズを編集」を選ぶ&lt;/li>
&lt;li>新しいサイズで「16」を入力し、「+」で追加できる&lt;/li>
&lt;/ol>
&lt;h3 id="macosでもfishを少しだけ試す">macOSでもfishを少しだけ試す&lt;/h3>
&lt;p>&lt;a href="../20200510/#ubuntu%E3%81%A7fish%E3%82%92%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F">5/10&lt;/a>の続き。&lt;br>
macOSの方がハマらないんじゃないかなと思って。&lt;/p>
&lt;h4 id="fish-fisher-テーマのインストール">fish, fisher, テーマのインストール&lt;/h4>
&lt;p>fishのInstallはbrewでOK.&lt;/p>
&lt;p>&lt;code>fish&lt;/code> コマンドで起動してUbuntuのときと同じコマンドでfisherをインストール。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fisher add oh-my-fish/theme-bobthefish&lt;/code> でテーマを入れたら、文字化けした。&lt;/p>
&lt;h4 id="powerline-fontsのインストール">powerline fontsのインストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts&lt;/a>&lt;/p>
&lt;p>install.sh がmacOSにも対応しているようだったので、 &lt;code>git clone&lt;/code> してinstall.shを実行。&lt;/p>
&lt;p>…で、ターミナルのフォントをpowerline対応フォントにしたら、それっぽい見た目になった。&lt;/p>
&lt;p>…が、bobthefishのスクリーンショットと違ってあまりカラフルでない。&lt;/p>
&lt;p>fish自体のカラースキームをいじらないといけないのかな？&lt;/p></description></item><item><title>A: 2020-05-11</title><link>https://progrhy.me/tech-notes/a/memo/20200511/</link><pubDate>Mon, 11 May 2020 23:14:25 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200511/</guid><description>
&lt;h2 id="511">5/11&lt;/h2>
&lt;h3 id="お名前comからgoogle-domainsに移行する">お名前.comからGoogle Domainsに移行する&lt;/h3>
&lt;p>メールとUXがうざいし、サイトUIがとってもわかりにくくて不便なので。&lt;br>
前々からやりたかったけど、やる気がある今の内にやってしまう。&lt;/p>
&lt;p>手順は下を参考にした:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/fnifni/items/0daca17e0750659f2866">お名前comからgoogle domainsにドメイン移管する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>URLやUIが変わっていて、全くこのままというわけではなかったが、大まかな流れは同じだった。&lt;/p>
&lt;p>Google Domainsは別にGCPプロジェクトなくても使えるんですね。&lt;br>
TerraformでDNSレコード管理しようかと思ってたけど、やりたかったらCloud DNSに移譲しないといけないのかな？&lt;/p>
&lt;h4 id="トランスファー申請不承認のご連絡">「トランスファー申請不承認のご連絡」&lt;/h4>
&lt;p>Google Domains側で手続きして約20分後に、お名前.comから上の題のメールが。&lt;/p>
&lt;pre>&lt;code>上記ドメインのトランスファー申請につきまして、下記いずれかに該当する
ため申請を不承認といたしました。
1.該当URLより不承認処理が行われた
2.Whois情報公開代行サービスの設定が行われている
3.ドメインの契約終了日まで7日以内（JPドメインのみ）
4.期限内に承認処理が行われなかった
再度申請を行う場合は、上記事項に該当しないことを確認した上で申請を
行ってください。
&lt;/code>&lt;/pre>&lt;p>2.のWhois情報公開代行サービスを設定しているからですね。&lt;br>
早速解除して、Google Domainsから払い戻しが来たタイミングで再度、移管申請。&lt;/p>
&lt;p>今度は大丈夫だろう。（フラグ）&lt;/p>
&lt;h4 id="重要トランスファー申請に関する確認のご連絡">「【重要】トランスファー申請に関する確認のご連絡」&lt;/h4>
&lt;pre>&lt;code>お名前.com by GMOは、上記ドメインについて に他社
レジストラへのトランスファー申請を承りました。
トランスファー手続きにつきまして、他社レジストラへ移管をご希望の場合は
期日までに以下URLから承認のお手続きをお願いいたします。
&lt;/code>&lt;/pre>&lt;p>再申請から約25分後、無事フラグを回避できた。&lt;/p>
&lt;h4 id="google-domains---cloudflareにns移譲設定">Google Domains -&amp;gt; CloudflareにNS移譲設定&lt;/h4>
&lt;p>お名前.comから移譲設定をしていたが、さすがにその設定は引き継がれていなかった。&lt;br>
Cloudflareの管理画面でDNSサーバを確認して、Google Domainsでカスタムネームサーバとして設定。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-progrhyme.hatenablog.com/entry/2018/09/02/my-new-landing-page">プロフィールサイトをGitHub Page + CloudFlareによる独自ドメイン×SSL配信に移行しました - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ついでに、Cloudflareで&lt;a href="https://progrhy.me/tech-notes/a/network/dns/#dnssec">DNSSEC&lt;/a>の対応ができたので、DSレコードを生成して、Google Domains側で設定した。&lt;/p>
&lt;h3 id="ss--l-オプションの誤解---解決">ss -l オプションの誤解？ -&amp;gt; 解決&lt;/h3>
&lt;p>&lt;code>hugo server&lt;/code> はデフォルト1313ポートで起動して待ち受け状態になるので、 &lt;code>ss -l | grep '\b1313\b'&lt;/code> で取れるだろうと思ったら、取れなかった。&lt;/p>
&lt;p>&lt;code>ss -ant | grep '\b1313\b'&lt;/code> なら取れた。&lt;/p>
&lt;p>…と、ここまで書いて原因がわかった。&lt;br>
&lt;code>-n&lt;/code> が足りなかった。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% ss -ltp &lt;span style="color:#000;font-weight:bold">|&lt;/span>grep LISTEN &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep hugo
LISTEN &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span> 127.0.0.1:xtel 0.0.0.0:* users:&lt;span style="color:#ce5c00;font-weight:bold">((&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hugo&amp;#34;&lt;/span>,pid&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1532,fd&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>11&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
% ss -ltnp &lt;span style="color:#000;font-weight:bold">|&lt;/span>grep LISTEN &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep hugo
LISTEN &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span> 127.0.0.1:1313 0.0.0.0:* users:&lt;span style="color:#ce5c00;font-weight:bold">((&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hugo&amp;#34;&lt;/span>,pid&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1532,fd&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>11&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>そういうことですね。&lt;/p></description></item><item><title>A: 2020-05-10</title><link>https://progrhy.me/tech-notes/a/memo/20200510/</link><pubDate>Sun, 10 May 2020 15:19:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200510/</guid><description>
&lt;h2 id="510">5/10&lt;/h2>
&lt;h3 id="terraformのkubernetes-providerを試してみる">TerraformのKubernetes Providerを試してみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/121145">TerraformのKubernetes ProviderでK8sのリソース管理にトライ - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;h3 id="ubuntuでもanyenvを使うことにした">Ubuntuでもanyenvを使うことにした&lt;/h3>
&lt;p>Ubuntuで最近Ruby触ってなかったので、入っているRubyが古いことに気づいたのだけど、rbenvも &lt;code>git clone&lt;/code> して入れたものなので、古い。&lt;br>
plenv, pyenvも同様である。&lt;/p>
&lt;p>&lt;a href="../2020/20200428/">4/28&lt;/a>にmacOSでanyenvを試したのだけど、Ubuntuでも使ってみることにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/p>
&lt;p>自分環境のセットアップスクリプトに &lt;code>setup-rbenv.sh&lt;/code> とか入れてるけど、anyenvで管理した方が筋がよさそう。&lt;/p>
&lt;h4 id="anyenv-install">anyenv install&lt;/h4>
&lt;p>Linuxbrewを入れてるので、brewでインストールできた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% brew install &lt;span style="color:#000">anyenv&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://linuxbrew.bintray.com/bottles/anyenv-1.1.1.x86_64_linux.bottle.tar.gz
&lt;span style="color:#8f5902;font-style:italic">######################################################################## 100.0%&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Pouring anyenv-1.1.1.x86_64_linux.bottle.tar.gz
🍺 /home/linuxbrew/.linuxbrew/Cellar/anyenv/1.1.1: &lt;span style="color:#0000cf;font-weight:bold">23&lt;/span> files, 48.4KB
% anyenv init
&lt;span style="color:#8f5902;font-style:italic"># Load anyenv automatically by adding&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the following to ~/.zshrc:&lt;/span>
&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
% &lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>anyenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
ANYENV_DEFINITION_ROOT&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>/home/quiche/.config/anyenv/anyenv-install&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> doesn&lt;span style="color:#4e9a06">&amp;#39;t exist. You can initialize it by:
&lt;/span>&lt;span style="color:#4e9a06">&amp;gt; anyenv install --init
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">% anyenv install --init
&lt;/span>&lt;span style="color:#4e9a06">Manifest directory doesn&amp;#39;&lt;/span>t exist: /home/quiche/.config/anyenv/anyenv-install
Do you want to checkout ? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>y/N&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: y
Cloning https://github.com/anyenv/anyenv-install.git master to /home/quiche/.config/anyenv/anyenv-install...
Cloning into &lt;span style="color:#4e9a06">&amp;#39;/home/quiche/.config/anyenv/anyenv-install&amp;#39;&lt;/span>...
remote: Enumerating objects: 48, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
remote: Total &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, reused &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>delta 0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, pack-reused &lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>
Unpacking objects: 100% &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>48/48&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
Completed!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここまでやって &lt;code>exec $SHELL -l&lt;/code> してもまだPATHには変化なし。&lt;br>
どうも何かしら &lt;code>*env&lt;/code> をインストールしないといけないらしい。&lt;/p>
&lt;p>&lt;code>anyenv install rbenv&lt;/code> してからシェルに再ログインすると、PATHに &lt;code>$HOME/.anyenv/envs/rbenv/shims&lt;/code>, &lt;code>$HOME/.anyenv/envs/rbenv/bin&lt;/code> が追加された。&lt;/p>
&lt;h4 id="rubyのインストールでややハマった">rubyのインストールでややハマった&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% rbenv install 2.7.1 -v
:
ruby: error &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> loading shared libraries: libruby.so.2.7: cannot open shared object file: No such file or directory
uncommon.mk:1130: recipe &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> target &lt;span style="color:#4e9a06">&amp;#39;revision.tmp&amp;#39;&lt;/span> failed
make: *** &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>revision.tmp&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Error &lt;span style="color:#0000cf;font-weight:bold">127&lt;/span>
BUILD FAILED &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Ubuntu 18.04 using ruby-build 20200401-11-g12af1c3&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のようなエラーで失敗した。&lt;br>
どうもこれはrdocの生成でコケているようだ。&lt;/p>
&lt;p>ただ、ビルドログを見たら下のようなエラーも出ていた。&lt;/p>
&lt;pre>&lt;code>% view /tmp/ruby-build.20200510143333.6198.log
:
1660 *** Following extensions are not compiled:$
1661 dbm:$
1662 &amp;gt;-Could not be configured. It will not be installed.$
1663 &amp;gt;-Check ext/dbm/mkmf.log for more details.$
1664 gdbm:$
1665 &amp;gt;-Could not be configured. It will not be installed.$
1666 &amp;gt;-Check ext/gdbm/mkmf.log for more details.$
1667 *** Fix the problems, then remove these directories and try again if you want.$
:
&lt;/code>&lt;/pre>&lt;p>よくわからないままビルドに必要そうなパッケージをインストールしてリトライした。&lt;/p>
&lt;pre>&lt;code>sudo apt install build-essential bison libffi-dev libgdbm-dev libgdbm-compat-dev \
libreadline-dev libssl-dev zlib1g-dev
&lt;/code>&lt;/pre>&lt;p>参考: &lt;a href="https://qiita.com/raccy/items/cd0b39a33dbe764480be">Rubyをソースからコンパイルするときの依存ライブラリ - Qiita&lt;/a>&lt;/p>
&lt;p>上で、いくつかのパッケージは既にインストールされていた。&lt;/p>
&lt;p>リトライした結果、結局、さっきと同じrubyのエラーで失敗した。&lt;br>
ビルドログから、dbm関連のエラーは消えていたので、そこは解消したらしい。&lt;/p>
&lt;p>闇雲に別のまっさらなシェルを立ち上げて再度インストールを試みたところ、成功した。&lt;/p>
&lt;p>まだ &lt;code>~/.rbenv&lt;/code> に古いrbenvが入っていて、 &lt;code>ruby&lt;/code> が &lt;code>~/.rbenv/shims/ruby&lt;/code> を向いていたので、その辺が悪さをしていたのかもしれない。&lt;/p>
&lt;p>これで駄目だったらrdocの生成をオフしようかと思っていた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackbaka.hatenablog.com/entry/2018/09/13/151242">Ruby インストール時の rdoc エラー[Ubuntu] - ハッキングバカ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="clenvでtravis-ciのビルド通知とバッジを修正した">clenvでTravis CIのビルド通知とバッジを修正した&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/clenv">https://github.com/progrhyme/clenv&lt;/a>&lt;/p>
&lt;p>昔、リポジトリを key-amb -&amp;gt; progrhyme に移したのだけど、そのせいでバッジとSlack通知がおかしくなっていた。&lt;/p>
&lt;p>Slackのインテグレーション自体は生きていたので、 &lt;code>travis&lt;/code> コマンドで設定をし直した。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gem i travis
travis encrypt &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;Slack Workspace&amp;gt;:&amp;lt;Slack Integration Token&amp;gt;&amp;#34;&lt;/span> --add notifications.slack.rooms
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで .travis.yml が更新されたので、GitHubにpushして完了。&lt;/p>
&lt;p>バッジも新しいURLで取得した。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications">https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="次世代のシェルとは">次世代のシェルとは&lt;/h3>
&lt;p>&lt;a href="https://ngs-lang.org/">https://ngs-lang.org/&lt;/a>&lt;/p>
&lt;p>4年前にもブクマしてたやつ。&lt;/p>
&lt;p>これC言語製だったか。&lt;/p>
&lt;p>今さっきググったらGolang製のフォーマッタ/パーサ/インタープリタを見つけた。&lt;/p>
&lt;p>&lt;a href="https://github.com/mvdan/sh">https://github.com/mvdan/sh&lt;/a>&lt;/p>
&lt;p>なんか、そのうち全部JavaScriptになるんじゃないかな、って気もするんだよなぁ。&lt;/p>
&lt;p>macOSはJavaScriptでOSと対話できるようになったし、GNOME ShellもJavaScriptで拡張できるらしいし。&lt;/p>
&lt;p>まあ、よくできたプログラム言語がごろごろある現状、敢えて0から再実装する必要ないよねってことか。&lt;/p>
&lt;p>そんなわけでclenvを再開するモチベーションが湧かない今日この頃。&lt;/p>
&lt;p>Node.jsが筆頭だけど、JavaScriptで実装されたシェルも色々あるみたい。&lt;br>
※ただ、OSのシェルとはどれもちょっと違うかも。&lt;/p>
&lt;p>POSIXはもう気にしなくてもいいだろうと思うものの、どの環境でもスッと動いてほしいとは思う。&lt;br>
そういえばfishってどうだっけと思って、改めてチラ見して&lt;a href="https://progrhy.me/tech-notes/a/cli/shell/#fish-shell">シェル&lt;/a>にメモした。&lt;br>
これはC++製なんですね。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/zakuroishikuro/items/1b02378bf9e940602d87">知らないうちにMacがシステム標準でJavaScriptで操作できるようになってた (JXA) - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gihyo.jp/admin/serial/01/ubuntu-recipe/0492">第492回 GNOME Shellの拡張機能を作ってみよう：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/ja/docs/JavaScript/Shells">JavaScript シェル - JavaScript リダイレクト 1 | MDN&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="ubuntuでfishを少しだけ試してみた">Ubuntuでfishを少しだけ試してみた&lt;/h3>
&lt;p>Install:&lt;/p>
&lt;p>&lt;a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3">https://launchpad.net/~fish-shell/+archive/ubuntu/release-3&lt;/a> の通り:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo apt-add-repository ppa:fish-shell/release-3
sudo apt-get update
sudo apt-get install fish
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fish&lt;/code> で起動する。&lt;/p>
&lt;p>体感そんな悪くない。&lt;br>
bashで書いたスクリプトはシバン書いてるから実行したら普通に動くし、特に戸惑うことはない感じ。&lt;/p>
&lt;p>少しカスタマイズしたら十分使いやすくなりそう。&lt;/p>
&lt;h4 id="fisherを試す">fisherを試す&lt;/h4>
&lt;p>テーマを使ってみたかったので、fisherを入れてテーマを入れてみる。&lt;/p>
&lt;p>&lt;a href="https://github.com/jorgebucaran/fisher">https://github.com/jorgebucaran/fisher&lt;/a>&lt;/p>
&lt;p>READMEに従ってインストール&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
&lt;/code>&lt;/pre>&lt;/div>&lt;p>色々ハマったんだけど、最終的に次の要領で、まあまあいい感じになった:&lt;/p>
&lt;h5 id="powerlineのインストール">powerlineのインストール&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo apt install powerline
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/TrentSPalmer/63a85b582d42ab4bff665fc2dbba42e2">fish powerline on ubuntu the easy way&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>※↑に書かれている &lt;code>~/.config/fish/config.fish&lt;/code> の設定をすると、fishでpowerlineは使えるが、他のテーマを入れるとおかしくなる。（カニバってしまう？）&lt;/p>
&lt;p>powerlineを使うには対応したフォントが必要らしい。これに中々気づかなかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://news.mynavi.jp/itsearch/article/hardware/4775">【連載】にわか管理者のためのLinux運用入門 [210] Powerlineでカッコよく - シェル編（bash、zsh、fish）｜サーバ/ストレージ｜IT製品の事例・解説記事&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/microsoft/cascadia-code/releases">https://github.com/microsoft/cascadia-code/releases&lt;/a> から、最新版を &lt;code>~/.fonts&lt;/code> にインストールした。&lt;/p>
&lt;p>参考: &lt;a href="http://omoiyari.nishinari.coop/ubuntu-tips/%e3%83%95%e3%82%a9%e3%83%b3%e3%83%88%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab/">フォントのインストール | Ubuntu初心者の集いブログ&lt;/a>&lt;/p>
&lt;h5 id="テーマの追加">テーマの追加&lt;/h5>
&lt;p>この後、fishを起動し、 &lt;code>fisher add oh-my-fish/theme-bobthefish&lt;/code> で、まあまあいい感じになった。&lt;/p>
&lt;p>ただ、プロンプトの左端が &lt;code>I&lt;/code> となっていて、これはスクリーンショットによると本来は矢印記号が出るはずなんじゃないかと思う。&lt;/p>
&lt;p>theme-bobthefish のガイドに従って、 &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases">https://github.com/ryanoasis/nerd-fonts/releases&lt;/a> も入れてみたけど、特に変わらない。&lt;/p>
&lt;h5 id="上手く行かなかったこと">上手く行かなかったこと&lt;/h5>
&lt;p>上まで辿りついたが、 &lt;code>theme-budspencer&lt;/code> だと上手く行かなかった。&lt;br>
プロンプトでENTERだけを押しても改行されない感じになってしまう。&lt;/p>
&lt;h5 id="参考">参考&lt;/h5>
&lt;ul>
&lt;li>&lt;a href="https://nodaki.hatenablog.com/entry/2018/09/24/213942">【Ubuntu】 shellをfish + fisherman に変えた話 - 0.5から始める機械学習&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/minako-ph/items/dba6d65b741e3a30ad16#fisherman%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B">【2019年版】macのターミナルにFishとFishermanを導入する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gasでwebアプリ作るテスト">GASでWebアプリ作るテスト&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/hyt48/items/2534237d96f991f31966">Google Apps ScriptでWebアプリケーションをつくる - Qiita&lt;/a>を写経。
ステップ5の「データをGoogleスプレッドシートに保存」はまだできていない。&lt;/p>
&lt;p>JS, CSSを分割したところから上手く行かなくなった。
原因は以下の2つ:&lt;/p>
&lt;ul>
&lt;li>Qiita上ではJS, CSSのコードが省略されている。&lt;a href="https://github.com/mio3io/cr-vue/tree/master/codes/tutorial-todo">GitHubの完全版&lt;/a>からコピる必要があった。&lt;/li>
&lt;li>コード.gsの &lt;code>doGet()&lt;/code> 関数を下に従って変更する必要があった:
&lt;ul>
&lt;li>&lt;a href="https://tonari-it.com/gas-web-html-css-scriptlet/">GASでWebページを作るときにHTMLとCSSを別ファイルに記述する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-09</title><link>https://progrhy.me/tech-notes/a/memo/20200509/</link><pubDate>Sat, 09 May 2020 15:48:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200509/</guid><description>
&lt;h2 id="59">5/9&lt;/h2>
&lt;h3 id="シェルスクリプトのドキュメントコメントをpodで書くのはもうやめていいかな">シェルスクリプトのドキュメントコメントをPODで書くのはもうやめていいかな&lt;/h3>
&lt;p>いつだったか、何かの本でそういう書き方を見てからずっとそうやってる。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env bash
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
:
&lt;span style="color:#204a87">exit&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
: &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;&amp;#39;__EOF__&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=encoding utf8
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=head1 NAME
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">B&amp;lt;my-script&amp;gt; - short description
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=head1 DESCRIPTION
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">:
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">=cut
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">__EOF__&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでPODに食わせるとドキュメントとして解釈してくれるので、スクリプト内では &lt;code>pod2text $0&lt;/code> とかでヘルプを表示できる。&lt;/p>
&lt;p>…が、そろそろ &lt;code>pod2text&lt;/code> がどの環境にも入っていると想定すべきでないかも…という気がしてきた。&lt;br>
ところが、じゃあどう書いたらいいの？っていうのには決定版がない気がする。&lt;/p>
&lt;p>シェルスクリプトにちゃんとコメントを書こうとしている人たちの間では、主に2つの派閥がある気がする:&lt;/p>
&lt;ol>
&lt;li>スクリプトのヘッダや関数のヘッダとしてドキュメントコメントをそれなりのフォーマットで書きましょう派。&lt;a href="https://google.github.io/styleguide/shellguide.html#s4.1-file-header">Googleのコーディング規約&lt;/a>もこれ&lt;/li>
&lt;li>&lt;code>usage()&lt;/code> 関数内にヒアドキュメントで書きましょう派&lt;/li>
&lt;/ol>
&lt;p>いいとこ取りをしてる感じに見えるのは、 &lt;code>usage()&lt;/code> 関数でコメントをパースしてヘルプっぽく出力してるもの。&lt;br>
下のような例があった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ngyuki/items/673d6cb3b36360eaf5cc">シェルスクリプトでヘルプメッセージをコメントに書いて表示する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/TomKid/items/ab49f8d0cd15b18e5e4a">自作シェルスクリプトにヘルプやらバージョンメッセージを実装？する面白い方法があった - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分で独自フォーマットのコメントを書いている、という点では、下もこの類型にあたるか:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ssh0/items/0c14ee8949512a4dc98e">シェルスクリプト群のドキュメント書くの面倒だから自動でREADME.mdを生成する - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jmcantrell/bashful/blob/master/bin/shdoc">https://github.com/jmcantrell/bashful/blob/master/bin/shdoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>godocみたいなのないかな、と思って「shelldoc」とか「shdoc」とかでぐぐるとたくさん出てくる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://shellscript.sunone.me/tips.html">シェルスクリプト Tips | UNIX &amp;amp; Linux コマンド・シェルスクリプト リファレンス&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="microk8sを使ってみる">Microk8sを使ってみる&lt;/h3>
&lt;p>※ブログに移した: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/10/110630">UbuntuでKubernetesのテスト環境としてMicrok8sをセットアップした - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p></description></item><item><title>A: 2020-05-08</title><link>https://progrhy.me/tech-notes/a/memo/20200508/</link><pubDate>Fri, 08 May 2020 10:26:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200508/</guid><description>
&lt;h2 id="58">5/8&lt;/h2>
&lt;h3 id="terraformerをgcpで使ってみた">terraformerをGCPで使ってみた&lt;/h3>
&lt;p>GCPでdefault networkをimportしたいと思った。&lt;br>
ふつうに &lt;code>terraform import&lt;/code> を使えばいいのだが、terraformerのことを思い出したので、使ってみることにした。&lt;br>
terraformerを使えばHCLファイルを生成することができる。&lt;/p>
&lt;p>terraformerについての一般的な内容は&lt;a href="https://progrhy.me/tech-notes/a/software/terraform/terraformer/">terraformer&lt;/a>にメモしている。&lt;/p>
&lt;p>作業環境: macOS&lt;/p>
&lt;p>Install:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew install terraformer
&lt;/code>&lt;/pre>&lt;/div>&lt;p>準備として、 &lt;code>~/.terraform.d/plugins/darwin_amd64/&lt;/code> に &lt;code>terraform-provider-google_v3.20.0_x5&lt;/code> を置く。&lt;br>
今回はterraform実行ディレクトリの &lt;code>.terraform/plugins&lt;/code> からコピーした。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">terraformer import google --projects&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>my-project &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --regions&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>asia-northeast1 --resources&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>networks,subnetworks
&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果:&lt;/p>
&lt;pre>&lt;code>% tree generated
generated
└── google
└── my-project
├── networks
│   └── asia-northeast1
│   ├── compute_network.tf
│   ├── outputs.tf
│   ├── provider.tf
│   └── terraform.tfstate
└── subnetworks
└── asia-northeast1
├── compute_subnetwork.tf
├── outputs.tf
├── provider.tf
├── terraform.tfstate
└── variables.tf
6 directories, 9 files
&lt;/code>&lt;/pre>&lt;p>tfファイルのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#204a87;font-weight:bold">cat&lt;/span> &lt;span style="color:#204a87;font-weight:bold">generated&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">google&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">my&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">project&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">networks&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">asia&lt;/span>&lt;span style="color:#a40000">-&lt;/span>&lt;span style="color:#204a87;font-weight:bold">northeast1&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">compute_network&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tf&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">resource&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_network&amp;#34; &amp;#34;tfer--default&amp;#34;&lt;/span> {
&lt;span style="color:#000"> auto_create_subnetworks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>
&lt;span style="color:#000"> delete_default_routes_on_create&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>
&lt;span style="color:#000"> description&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Default network for the project&amp;#34;&lt;/span>
&lt;span style="color:#000"> name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>
&lt;span style="color:#000"> project&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;my-project&amp;#34;&lt;/span>
&lt;span style="color:#000"> routing_mode&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;REGIONAL&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tfstateのサンプル:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="color:#a40000">%&lt;/span> &lt;span style="color:#a40000">cat&lt;/span> &lt;span style="color:#a40000">generated/google/my-project/subnetworks/asia-northeast&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">/terraform.tfstate&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;terraform_version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0.12.18&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;serial&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;lineage&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;XXXXXXXXXXXX&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;modules&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;root&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;outputs&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork_tfer--default_self_link&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;sensitive&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://www.googleapis.com/compute/v1/projects/my-project/regions/asia-northeast1/subnetworks/default&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;resources&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;google_compute_subnetwork.tfer--default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google_compute_subnetwork&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;depends_on&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[],&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;primary&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;attributes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;creation_timestamp&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2020-05-07T02:07:01.455-07:00&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;description&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;gateway_address&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ip_cidr_range&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;10.146.0.0/20&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;log_config.#&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>terraform_version&lt;/code> がマシンにインストール済みのバージョンと違うのは、terraformerが同梱しているってことなのかな？&lt;/p>
&lt;h3 id="kubernetesのマニフェストをvcsで管理して削除まで正しく同期する方法">KubernetesのマニフェストをVCSで管理して、削除まで正しく同期する方法&lt;/h3>
&lt;p>※5/9 ブログを書いた: &lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/05/09/125134">Kubernetesのマニフェストをリポジトリ管理しつつ、リソースの削除も反映したい件 - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/p>
&lt;p>某所で聞いたりして情報を集めた。&lt;br>
このエントリは後掲の関連リンクの続きである。&lt;/p>
&lt;ol>
&lt;li>管理対象のリソースに &lt;code>label&lt;/code> でバージョン番号を振り、新しいバージョンのリソースを配置した後、古いバージョンのリソースを削除する&lt;/li>
&lt;li>&lt;code>kubectl apply&lt;/code> 時に &lt;code>--prune&lt;/code> オプションを付ける&lt;/li>
&lt;li>Argo CDのAutomatic Pruning機能を使う&lt;/li>
&lt;li>リソースをTerraformで管理する&lt;/li>
&lt;/ol>
&lt;p>関連:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../20200505/#kubernetes%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%81%AF%E5%85%A8%E9%83%A8export%E3%81%97%E3%81%A6%E7%AE%A1%E7%90%86%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%81%84%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AD%E3%81%A3%E3%81%A6%E6%80%9D%E3%81%A3%E3%81%9F">2020-05-05のメモ - Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><pubDate>Wed, 01 Jan 2020 15:38:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/</guid><description/></item></channel></rss>