<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-06-10</title><link>https://progrhy.me/tech-notes/a/memo/20200610/</link><pubDate>Wed, 10 Jun 2020 14:40:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200610/</guid><description>
&lt;h2 id="610">6/10&lt;/h2>
&lt;h3 id="google-cloud-sdkでpython-3を使う">Google Cloud SDKでPython 3を使う&lt;/h3>
&lt;p>&lt;code>gcloud components update&lt;/code> を打ったら次のようなメッセージが出ていることに気づいた:&lt;/p>
&lt;pre>&lt;code> Note: Cloud SDK introduced support for Python 3 in release 274.0.0 and
users are strongly encouraged to migrate to Python 3. Support for Python 2
will be deprecated on July 31, 2020. See also Python 2 Sunset
(https://cloud.google.com/python/docs/python2-sunset/) and Using Python 3
(https://cloud.google.com/sdk/gcloud/reference/topic/startup).
&lt;/code>&lt;/pre>&lt;p>pyenvでpython3入れてるんだけどなんで使われないのかな、と思ったら、まだデフォルトはpython2らしい。&lt;/p>
&lt;p>&lt;a href="https://cloud.google.com/sdk/gcloud/reference/topic/startup">https://cloud.google.com/sdk/gcloud/reference/topic/startup&lt;/a> によると、次の順番でpythonインタプリタを探すとある:&lt;/p>
&lt;ul>
&lt;li>python2&lt;/li>
&lt;li>python27&lt;/li>
&lt;li>python&lt;/li>
&lt;li>python3&lt;/li>
&lt;/ul>
&lt;p>pyenvのpythonを使いたいなら、環境変数 &lt;code>CLOUDSDK_PYTHON&lt;/code> に設定してあげればいい。&lt;br>
私は最近anyenvを使うようになったので、下のようになった:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">CLOUDSDK_PYTHON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>which python&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$CLOUDSDK_PYTHON&lt;/span>
/Users/progrhyme/.anyenv/envs/pyenv/shims/python
&lt;/code>&lt;/pre>&lt;/div>&lt;p>いまどのpythonを使っているかは、gcloud infoで確認できた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ gcloud info
Google Cloud SDK &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>296.0.0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
:
Locale: &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ja_JP&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;UTF-8&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
Python Version: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>3.8.1 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>...&lt;span style="color:#ce5c00;font-weight:bold">)]]&lt;/span>
Python Location: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>/Users/progrhyme/.anyenv/envs/pyenv/versions/3.8.1/bin/python&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
:
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-06-08</title><link>https://progrhy.me/tech-notes/a/memo/20200608/</link><pubDate>Mon, 08 Jun 2020 02:22:21 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200608/</guid><description>
&lt;h2 id="68">6/8&lt;/h2>
&lt;h3 id="はじめてのgo-module">はじめてのGo Module&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/shelp">shelp&lt;/a>をGo Module対応して作ったところ、tagをつけてGitHubに公開しただけで pkg.dev.go にもindexされた。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/mod/github.com/progrhyme/shelp">https://pkg.go.dev/mod/github.com/progrhyme/shelp&lt;/a>&lt;/p>
&lt;p>今のところmodule / packageとしての利用は想定してないけど、それはそれとしてmoduleを作ってリリースするまでの流れをメモしておく。&lt;/p>
&lt;p>基本的に、 &lt;a href="https://github.com/golang/go/wiki/Modules#how-to-use-modules">https://github.com/golang/go/wiki/Modules#how-to-use-modules&lt;/a> の流れに従えばよい。&lt;/p>
&lt;p>作業環境:&lt;/p>
&lt;ul>
&lt;li>Ubuntu 18.04 LTS&lt;/li>
&lt;li>go v1.14.2&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.golang.org/using-go-modules">Using Go Modules - The Go Blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.golang.org/publishing-go-modules">Publishing Go Modules - The Go Blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="コンパイラの用意">①コンパイラの用意&lt;/h4>
&lt;p>Go 1.14以上なら何もしなくていい。&lt;br>
Go 1.11〜1.13の場合、環境変数の設定が必要:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GO111MODULE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>on
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="moduleの初期化">②Moduleの初期化&lt;/h4>
&lt;p>GOPATHの外のディレクトリでモジュールのディレクトリを作る。&lt;br>
私の環境ではGOPATH設定してない。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">cd&lt;/span> somewhere/shelp
git init
git commit --allow-empty -m &lt;span style="color:#4e9a06">&amp;#34;Initial commit&amp;#34;&lt;/span>
go mod init github.com/progrhyme/shelp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これによって次のような &lt;code>go.mod&lt;/code> ファイルが作られる:&lt;/p>
&lt;pre>&lt;code>module github.com/progrhyme/shelp
go 1.14
&lt;/code>&lt;/pre>&lt;h4 id="依存ライブラリの追加">③依存ライブラリの追加&lt;/h4>
&lt;p>VS Codeでプラグインを入れて作業してたら勝手にgo.mod, go.sumが更新されていったので、あまり意識的に作業はしていない。&lt;/p>
&lt;p>shelp v0.1.0 時点では、次のようになった。&lt;/p>
&lt;pre>&lt;code>$ cat go.mod
module github.com/progrhyme/shelp
go 1.14
require (
github.com/spf13/pflag v1.0.5
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9
)
$ cat go.sum
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9 h1:vEg9joUBmeBcK9iSJftGNf3coIG4HqZElCPehJsfAYM=
golang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190412213103-97732733099d h1:+R4KGOnez64A81RvjARKc4UT5/tI9ujCIVX+P5KiHuI=
golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
&lt;/code>&lt;/pre>&lt;p>それぞれのファイルは、RubyのbundlerでいうところのGemfileとGemfile.lockに相当すると見ていいのだろう。&lt;br>
npmならpackage.jsonとpackage-lock.json. （以下略）&lt;/p>
&lt;h4 id="リリース">④リリース&lt;/h4>
&lt;p>公式手順だと &lt;code>go mod tidy&lt;/code> や &lt;code>go test all&lt;/code> をやるべしとあるが、何もやっていない。（ひょっとしたらVS Codeプラグインの機能で &lt;code>go mod tidy&lt;/code> は掛かっているのかもしれない）&lt;/p>
&lt;p>やったことは、タグを付けてGitHubにpushし、goreleaserを使ってバイナリをリリースしただけ。&lt;/p>
&lt;p>これだけで pkg.go.dev にインデックスされるようだ。&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>semverじゃないと駄目、みたいな仕様はあるのかも？&lt;/li>
&lt;/ul>
&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>goreleaserについては&lt;a href="https://progrhy.me/tech-notes/a/program/go/ecosystem/goreleaser/">Golang &amp;gt; エコシステム &amp;gt; goreleaser&lt;/a>に書いた。&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-06-05</title><link>https://progrhy.me/tech-notes/a/memo/20200605/</link><pubDate>Fri, 05 Jun 2020 03:21:07 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200605/</guid><description>
&lt;h2 id="65">6/5&lt;/h2>
&lt;h3 id="shallow-cloneしたgitのリポジトリを同じdepthでpullするには">shallow cloneしたgitのリポジトリを同じdepthでpullするには&lt;/h3>
&lt;p>動作環境:&lt;/p>
&lt;ul>
&lt;li>Ubuntu 18.04&lt;/li>
&lt;li>git v2.17.1&lt;/li>
&lt;/ul>
&lt;p>前提:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git clone --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>でcloneした。&lt;/p>
&lt;p>バッチ実行で掲題の操作を安全確実にやる方法がなかなか見つからなかった。&lt;br>
色々試していたところ、以下で行けるとわかった。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
git pull
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Read Onlyな使い方しかしないなら、 &lt;code>git fetch --depth=1 &amp;amp;&amp;amp; git checkout origin/master&lt;/code> でもいいかと思ったけど、上で済むならそれでいいや。&lt;br>
上が動かなかったら、下のように強引にやる手もあった:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
git checkout origin/master
git branch -D master
git checkout -b master
&lt;span style="color:#8f5902;font-style:italic"># git branch --set-upstream-to=origin/master&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後の行はなくてもまあなんとかなるけど、ブランチ作り直すと追跡ブランチの情報が消えるので。&lt;/p>
&lt;h4 id="ng集">NG集&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># ふつうにpull&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 動くけど、shallow clone以降の履歴が全部残る&lt;/span>
$ git pull
&lt;span style="color:#8f5902;font-style:italic"># 一応動いてるようだけどエラーが出る&lt;/span>
$ git pull --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--update-shallow&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
:
+ f22f6e5...caec91c master -&amp;gt; origin/master &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>forced update&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
error: Could not &lt;span style="color:#204a87">read&lt;/span> 843b95a87c496da6eac6160744854af3070db0fd
error: Could not &lt;span style="color:#204a87">read&lt;/span> 843b95a87c496da6eac6160744854af3070db0fd
First, rewinding head to replay your work on top of it...
$ git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span> git rebase origin/master
&lt;span style="color:#8f5902;font-style:italic"># たまにCONFLICTする&lt;/span>
$ git fetch --depth&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1&lt;span style="color:#000;font-weight:bold">;&lt;/span> git merge origin/master &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--squash&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
fatal: refusing to merge unrelated histories
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--update-shallow&lt;/code> は &lt;code>.git/shallow&lt;/code> の更新を許すオプション&lt;/li>
&lt;/ul>
&lt;h3 id="zoomの定期ミーティング生成やgoogleカレンダーへの反映を自動化できないか">Zoomの定期ミーティング生成やGoogleカレンダーへの反映を自動化できないか&lt;/h3>
&lt;p>ZoomとGoogleのAPIでなんとかできるかも。&lt;/p>
&lt;p>&lt;a href="https://marketplace.zoom.us/docs/api-reference/zoom-api">https://marketplace.zoom.us/docs/api-reference/zoom-api&lt;/a>&lt;/p>
&lt;p>Zoom APIについて:&lt;/p>
&lt;ul>
&lt;li>OAuth 2認証&lt;/li>
&lt;li>public/privateアプリを作れる&lt;/li>
&lt;li>Chatbotも作れるっぽい&lt;/li>
&lt;/ul>
&lt;p>やればできるのでは。&lt;/p>
&lt;p>先行者がいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kudota/items/b480610cc3f575a8ec6f">Zoom APIでミーティングの作成をGASから行う - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>できそう。&lt;/p></description></item><item><title>A: 2020-05-31</title><link>https://progrhy.me/tech-notes/a/memo/20200531/</link><pubDate>Sun, 31 May 2020 07:47:55 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200531/</guid><description>
&lt;h2 id="531">5/31&lt;/h2>
&lt;h3 id="docsyでgoogleカスタム検索エンジンを使う">DocsyでGoogleカスタム検索エンジンを使う&lt;/h3>
&lt;p>そろそろLunr.jsに限界を感じてきたので、導入する。&lt;br>
具体的には「k8s」や「k9s」などが検索でヒットしない。&lt;/p>
&lt;p>やり方は公式ドキュメントの&lt;a href="https://www.docsy.dev/docs/adding-content/navigation/#configure-search-with-a-google-custom-search-engine">Navigation and Search | Docsy&lt;/a>の通り。&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://cse.google.com/cse/all">https://cse.google.com/cse/all&lt;/a> にアクセスし、新しい検索エンジンを追加。
&lt;ul>
&lt;li>対象は「progrhy.me/tech-notes/*」&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オプションの設定
&lt;ul>
&lt;li>「デザイン &amp;gt; レイアウト」で「結果のみ」を選ぶ&lt;/li>
&lt;li>「検索機能 &amp;gt; 詳細設定 &amp;gt; ウェブ検索の設定」で、「リンクターゲット」を「_parent」にする。これで現在のタブで（新しいタブを開かずに）検索結果に遷移できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>config.toml 編集
&lt;ul>
&lt;li>&lt;code>params.gcs_engine_id&lt;/code> に作成した検索エンジンのIDを設定&lt;/li>
&lt;li>&lt;code>params.offlineSearch = false&lt;/code> として、Lunr.jsを無効化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="ローカルではlunrjsを使う">ローカルではLunr.jsを使う&lt;/h4>
&lt;p>カスタム検索エンジンを使うと当然 &lt;a href="https://progrhy.me/tech-notes/">https://progrhy.me/tech-notes/&lt;/a> に遷移してしまうので、ローカル作業時はLunr.jsの方が都合が良い。&lt;/p>
&lt;p>Hugoで、オプションによって設定を切替える方法について調べて&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#configuration">Hugo#Configuration&lt;/a>に記した。&lt;/p>
&lt;p>初め、環境変数で以下を指定してやろうとした:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">HUGO_PARAMS_GCS_ENGINE_ID&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">HUGO_PARAMS_OFFLINESEARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>試したところ、 &lt;code>offlineSearch = true&lt;/code> は設定できたようだが、 &lt;code>gcs_engine_id&lt;/code> の指定を無効化することはできなかった。&lt;br>
config.tomlではコメントアウトしておいて、公開サイトビルド時に環境変数で &lt;code>gcs_engine_id&lt;/code> を設定するやり方も考えられるが、バグったときに面倒なので、CIの設定はなるべく変えたくない。&lt;/p>
&lt;p>同じページ（Hugoのドキュメント）を見ていたところ、 &lt;code>hugo --config a.toml,b.toml&lt;/code> のように設定ファイルを複数指定できることに気がついたので、下のような &lt;code>config-local.toml&lt;/code> を用意した:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-TOML" data-lang="TOML">&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">gcs_engine_id&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000">offlineSearch&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>…で、ローカルでは &lt;code>hugo server --config config.toml,config-local.toml&lt;/code> と指定してサーバを起動するようにしたら、上手く行った。&lt;/p>
&lt;p>ちなみに、こんなの毎回打ってられないので、少し前から&lt;a href="https://github.com/progrhyme/dotfiles/blob/9ae6af2874f5ffabd9560df8d5b0205b64230ce8/script/run-hugo-server.sh">ラッパースクリプト&lt;/a>を使っていて、 &lt;code>HUGO_CONFIG=config.toml,config-local.toml&lt;/code> とシェル変数を設定ファイルに書いて読み込ませて対応している。&lt;/p>
&lt;h4 id="--config-オプションを使わなくてもよかった">&lt;code>--config&lt;/code> オプションを使わなくてもよかった&lt;/h4>
&lt;p>Hugoには所定のディレクトリに設定ファイルを配置すると、コンテキストに基づいて設定ファイルを読み込んでマージしてくれる機能があると知った。&lt;br>
やり方は&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90">Hugo#Configuration-ディレクトリ構成&lt;/a>に記した。&lt;/p>
&lt;p>&lt;code>hugo server&lt;/code> ではデフォルトで &lt;code>development&lt;/code> で起動するので、 &lt;code>config-local.toml&lt;/code> を &lt;code>config/development/config.toml&lt;/code> に移動することで、 &lt;code>--config&lt;/code> オプション無しでも読み込んでくれるようになった。&lt;/p>
&lt;h3 id="新しいgoogle-search-consoleでurlの再クロールをgoogleにリクエスト">新しいGoogle Search ConsoleでURLの再クロールをGoogleにリクエスト&lt;/h3>
&lt;p>&lt;a href="https://search.google.com/search-console">https://search.google.com/search-console&lt;/a>&lt;/p>
&lt;p>最近全然使ってなかったから、いつ変わったのかわからないけど、Search ConsoleがスタイリッシュなUIに生まれ変わっていた。&lt;/p>
&lt;p>URLの再クロールの依頼方法がわからなかったが、ググったらヘルプページが見つかった:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.google.com/webmasters/answer/6065812?hl=ja">URL の再クロールを Google にリクエストする - Search Console ヘルプ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そして見つけた時には既にサイトマップを送信済みだった。&lt;/p>
&lt;p>（追記）&lt;/p>
&lt;p>なぜかページの古い状態がキャッシュ（？）に残ってるっぽくて、アーカイブ済みのメモページにヒットすると404になったりすることがしばし。&lt;/p>
&lt;h3 id="golangのcliパッケージを改めて探した">GolangのCLIパッケージを改めて探した&lt;/h3>
&lt;p>たぶん3〜4年ぶりぐらいかな。&lt;br>
高機能なものは相変わらず下の2つが強そう:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/urfave/cli">https://github.com/urfave/cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>サブコマンドやフラグに対応しており、だいたいできないことはなさそう。&lt;/p>
&lt;h4 id="jessevdkgo-flags">jessevdk/go-flags&lt;/h4>
&lt;p>もう少し軽量な感じのだと以前は &lt;a href="https://github.com/jessevdk/go-flags">https://github.com/jessevdk/go-flags&lt;/a> というのが人気だったのだが、2年前で更新が止まっている。&lt;br>
go.mod がないのでGo Modulesにも対応してないみたい。&lt;br>
いま使うのはちょっとイマイチかも？&lt;/p>
&lt;h4 id="spf13pflag">spf13/pflag&lt;/h4>
&lt;p>その代わりになるかわからないが、 &lt;a href="https://github.com/spf13/pflag">https://github.com/spf13/pflag&lt;/a> というのを見つけた。&lt;br>
これも標準パッケージの flag の強化版で、ショートオプションを簡単に加えられたり、GNUスタイルの &lt;code>--help&lt;/code> のようなロングオプションを追加できる。&lt;/p>
&lt;p>flagの拡張版のようで、サブコマンドにも対応できるようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/program/go/3rd-pkg/#spf13pflag">プログラミング &amp;gt; Golang &amp;gt; pkg (3rd)#spf13/pflag&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="googlesubcommands">google/subcommands&lt;/h4>
&lt;p>サブコマンドで行くと &lt;a href="https://github.com/google/subcommands">https://github.com/google/subcommands&lt;/a> というのも見つけた。&lt;br>
これも依存がなくてシンプルのようだが、README読んだだけだと、使い方がイマイチわからん。&lt;/p>
&lt;p>検索したり、 pkg.go.dev で使っているコードを探して見たりした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.soushi.me/entry/2017/01/22/214441/">みんGO を読んでec2インスンスリストをタグ検索するコマンドラインツールを作ってみた - 平日インプット週末アウトプットぶろぐ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chromium.googlesource.com/infra/infra/+/1adef5a2cd6b/go/src/infra/cros/cmd/lucifer/admintaskcmd.go">https://chromium.googlesource.com/infra/infra/+/1adef5a2cd6b/go/src/infra/cros/cmd/lucifer/admintaskcmd.go&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フラグにも対応しており、いい感じにヘルプが生成できたりと、シンプルだけど必要十分な機能がまとまってるっぽい雰囲気を感じる。&lt;/p>
&lt;h4 id="posenercmd">posener/cmd&lt;/h4>
&lt;p>&lt;a href="https://github.com/posener/cmd">posener/cmd: The standard library flag package with its missing features&lt;/a>&lt;/p>
&lt;p>これは&lt;a href="https://awesome-go.com/#command-line">Awesome Go&lt;/a>から気になって開いて見た。&lt;br>
17 starsしかないが、google/subcommands相当のことはできそうで、google/subcommandsよりドキュメントがわかりやすい。&lt;/p></description></item><item><title>A: 2020-05-30</title><link>https://progrhy.me/tech-notes/a/memo/20200530/</link><pubDate>Sat, 30 May 2020 07:05:50 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200530/</guid><description>
&lt;h2 id="530">5/30&lt;/h2>
&lt;h3 id="ubuntuデスクトップのvs-codeでフォント変更">UbuntuデスクトップのVS Codeでフォント変更&lt;/h3>
&lt;p>ターミナルで記号が豆腐になってしまったので、Nerdフォントにしたのだが、すぐに反映されないような気がしたら、VS Codeの再起動が必要だった。&lt;/p>
&lt;p>キーワード: Visual Studio Code, Powerline Fonts&lt;/p>
&lt;h3 id="vs-codeでrustのプラグインがインストールできない">VS CodeでRustのプラグインがインストールできない&lt;/h3>
&lt;p>作業環境はUbuntuデスクトップ。&lt;br>
久しぶりにRustを触ったのがいけなかったのか、本来はVS Code上でポップアップ通知に従ってrlsやanalyzerをインストールすればいいはずなのだが、次のエラーで失敗した。&lt;/p>
&lt;pre>&lt;code>error: toolchain 'stable-x86_64-unknown-linux-gnu' does not contain component 'rls' for target 'x86_64-unknown-linux-gnu'
&lt;/code>&lt;/pre>&lt;p>ググると次のイシューにヒットし、再インストールで解消した。&lt;/p>
&lt;p>&lt;a href="https://github.com/rust-lang/rls/issues/1273">https://github.com/rust-lang/rls/issues/1273&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">rustup uninstall stable
rustup install stable
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/chikoski/items/53590914cc6aacc8916d">Visual Studio Code で Rust 開発を始めるには - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="cargo-editというのがある">cargo-editというのがある&lt;/h3>
&lt;p>2018-02-06更新の記事: &lt;a href="https://qiita.com/i2tsuki/items/8d90f7aa872671404a15">Cargo.toml の編集に cargo-edit を使う - Qiita&lt;/a>&lt;/p>
&lt;p>Rustのパッケージ管理ツールである &lt;code>cargo&lt;/code> CLIに以下の機能を追加してくれる:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cargo add &amp;lt;Package&amp;gt;&lt;/code> &amp;hellip; 依存パッケージを追加&lt;/li>
&lt;li>&lt;code>cargo rm &amp;lt;Package&amp;gt;&lt;/code> &amp;hellip; 依存パッケージの削除&lt;/li>
&lt;li>&lt;code>cargo list&lt;/code> &amp;hellip; 依存パッケージ一覧&lt;/li>
&lt;/ul>
&lt;p>絶対必要というほどではないが、便利かも。&lt;/p>
&lt;h3 id="rustのcli作成チュートリアル">RustのCLI作成チュートリアル&lt;/h3>
&lt;p>&lt;a href="https://rust-cli.github.io/book/tutorial/">A command line app in 15 minutes - Command Line Applications in Rust&lt;/a>をやっている。&lt;/p>
&lt;p>初めて出くわしたライブラリや言語仕様を都度、調べながらなので遅々として進まないが、いま&lt;a href="https://rust-cli.github.io/book/tutorial/impl-draft.html">1.3. First implementation&lt;/a>まで来たところ。&lt;/p>
&lt;h4 id="わからなかったこと">わからなかったこと&lt;/h4>
&lt;p>&lt;a href="https://rust-cli.github.io/book/tutorial/errors.html">Nicer error reporting - Command Line Applications in Rust&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Box&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">dyn&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">std&lt;/span>::&lt;span style="color:#000">error&lt;/span>::&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>:
&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>のように、main()でResult型を返すようにしたところ、下のようにコンパイルエラーになってしまう。&lt;/p>
&lt;pre>&lt;code>error[E0308]: mismatched types
--&amp;gt; src/main.rs:13:14
|
13 | fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
| ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`
| |
| implicitly returns `()` as its body has no tail or `return` expression
...
28 | Ok(());
| - help: consider removing this semicolon
|
= note: expected enum `std::result::Result&amp;lt;(), std::boxed::Box&amp;lt;(dyn std::error::Error + 'static)&amp;gt;&amp;gt;`
found unit type `()`
error: aborting due to previous error
For more information about this error, try `rustc --explain E0308`.
error: could not compile `grrs`.
&lt;/code>&lt;/pre>&lt;p>そういえばエラー情報を見てなかったので、見てみた。&lt;/p>
&lt;pre>&lt;code>$ rustc --explain E0308 | cat
This error occurs when the compiler was unable to infer the concrete type of a
variable. It can occur for several cases, the most common of which is a
mismatch in the expected type that the compiler inferred for a variable's
initializing expression, and the actual type explicitly assigned to the
variable.
For example:
let x: i32 = &amp;quot;I am not a number!&amp;quot;;
// ~~~ ~~~~~~~~~~~~~~~~~~~~
// | |
// | initializing expression;
// | compiler infers type `&amp;amp;str`
// |
// type `i32` assigned to variable `x`
&lt;/code>&lt;/pre>&lt;p>まあ型のミスマッチが起こっているようだが、動かないコードを初心者向けのサンプルにしないでほしいという気持ちはなきにしもあらず。&lt;/p>
&lt;p>また、次のように書き換えたところ、別のエラーが出た。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cli&lt;/span>::&lt;span style="color:#000">from_args&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">content&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">std&lt;/span>::&lt;span style="color:#000">fs&lt;/span>::&lt;span style="color:#000">read_to_string&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map_err&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Error reading `{}`: {}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>:
&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>エラー:&lt;/p>
&lt;pre>&lt;code>error[E0277]: `std::path::PathBuf` doesn't implement `std::fmt::Display`
--&amp;gt; src/main.rs:20:70
|
20 | .map_err(|err| CustomError(format!(&amp;quot;Error reading `{}`: {}&amp;quot;, &amp;amp;args.path, err)))?;
| ^^^^^^^^^^ `std::path::PathBuf` cannot be formatted with the default formatter
|
= help: the trait `std::fmt::Display` is not implemented for `std::path::PathBuf`
= note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
= note: required because of the requirements on the impl of `std::fmt::Display` for `&amp;amp;std::path::PathBuf`
= note: required by `std::fmt::Display::fmt`
= note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
&lt;/code>&lt;/pre>&lt;p>&lt;code>rustc --explain E0277&lt;/code> を見ると下のようだった:&lt;/p>
&lt;blockquote>
&lt;p>You tried to use a type which doesn&amp;rsquo;t implement some trait in a place which expected that trait.&lt;/p>
&lt;/blockquote>
&lt;p>traitが期待されているところで、traitが実装されていない型を使ってしまった、ということのようだ。&lt;/p>
&lt;blockquote>
&lt;p>Erroneous code example:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="color:#8f5902;font-style:italic">// here we declare the Foo trait with a bar method
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// we now declare a function which takes an object implementing the Foo trait
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span>: &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>: &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// we now call the method with the i32 type, which doesn&amp;#39;t implement
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// the Foo trait
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error: the trait bound `i32 : Foo` is not satisfied
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下、略。&lt;/p>
&lt;p>これはPathBufの型がイカンようなので、&lt;code>format!&lt;/code> 氏が期待している型にしてあげれば動きそうな気がする。&lt;/p>
&lt;p>&lt;code>&amp;amp;args.path.display()&lt;/code> としたら動くようになった🎉&lt;/p>
&lt;ul>
&lt;li>該当コミット: &lt;a href="https://github.com/progrhyme/tutorials/commit/06cc24ffd7493dd2c3707db5c89e536e2941680d">https://github.com/progrhyme/tutorials/commit/06cc24ffd7493dd2c3707db5c89e536e2941680d&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="karabiner-elementsでかなキーでimeトグル">Karabiner-Elementsで「かな」キーでIMEトグル&lt;/h3>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2019/20191107">2019-11-07&lt;/a>にも同じことをやったのだけど、いつものMac機では&lt;a href="https://ei-kana.appspot.com/">⌘英かな&lt;/a>というアプリを使っていた。&lt;/p>
&lt;p>「⌘英かな」だと、トグルのキーを押してもまずモーダルウィンドウが表示されて、さくっと「日本語」&amp;lt;-&amp;gt;「英数」に切り替わってくれない。&lt;br>
ので、このMac機でもKarabiner-Elementsを使うことにした。&lt;/p>
&lt;p>作業時のOSバージョンはmacOS Catalina.&lt;/p>
&lt;p>設定は前回と同じで動いた。&lt;br>
dotfiles (myenv)にpushしておいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/myenv/commit/a99cf5f96c84567e17036456782dabd42815cf6a">https://github.com/progrhyme/myenv/commit/a99cf5f96c84567e17036456782dabd42815cf6a&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>メニューバーのアイコンは毎回ちゃんと切り替わってくれるが、実際にはIMEが切り替わっていないことが、2回に1回ぐらい発生する&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-24</title><link>https://progrhy.me/tech-notes/a/memo/20200524/</link><pubDate>Sun, 24 May 2020 05:11:54 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200524/</guid><description>
&lt;h2 id="524">5/24&lt;/h2>
&lt;h3 id="macosでターミナルの操作動画をタイプしたキーと共に録画する">macOSでターミナルの操作動画をタイプしたキーと共に録画する&lt;/h3>
&lt;p>ブログ用にキャプチャ動画を撮りたいと思った。&lt;/p>
&lt;p>やり方は前に調べて&lt;a href="https://progrhy.me/tech-notes/a/os/mac/#%E7%94%BB%E9%9D%A2%E3%82%92%E5%8B%95%E7%94%BB%E3%81%A7%E6%92%AE%E5%BD%B1%E3%81%97%E3%81%A6gif%E3%82%A2%E3%83%8B%E3%83%A1%E3%81%AB%E5%A4%89%E6%8F%9B">OS &amp;gt; macOS#画面を動画で撮影してGIFアニメに変換&lt;/a>に書いておいた。&lt;/p>
&lt;h4 id="keycastrのインストールとセットアップ">KeyCastrのインストールとセットアップ&lt;/h4>
&lt;p>まず、キー入力を表示するためにKeyCastrを入れる。これは一択である。&lt;/p>
&lt;p>dmgボリュームをマウントし、アプリケーションをいつものフォルダにインストール。&lt;/p>
&lt;p>開発者が未確認のため実行できないようなので、FinderからCtrlキーを押しながらアプリをクリックして「開く」を選ぶ。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://support.apple.com/ja-jp/guide/mac-help/mh40616/mac">開発元が未確認のMacアプリケーションを開く - Apple サポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また、たぶんキーボード入力とかディスプレイとか（想像）にアクセスするため、アプリにアクセシビリティを与えてあげないといけない。　　
macOSの「システム環境設定」を開き、「セキュリティとプライバシー &amp;gt; アクセシビリティ &amp;gt; プライバシー」設定画面で、「下のアプリケーションにコンピュータの制御を許可。」のリストにKeyCastrを加える。&lt;br>
設定したら、KeyCastrを再起動する。&lt;/p>
&lt;p>これでタイプしたキーがKeyCastrのウィンドウに表示されるようになった。&lt;br>
ウィンドウが消える前にクリックアンドドラッグすることで、画面上の任意の位置に動かすことができる。&lt;br>
録画のため、ターミナル画面の右下隅あたりに移動しておく。&lt;br>
5文字ぐらいタイプしてみて、右側にはみ出さない程度の位置がベスト。&lt;/p>
&lt;h5 id="追記-macos-catalinaでの設定箇所の違い">追記: macOS Catalinaでの設定箇所の違い&lt;/h5>
&lt;p>Catalinaの場合、アクセシビリティの設定箇所が異なる。&lt;/p>
&lt;p>「システム環境設定」を開き、「セキュリティとプライバシー &amp;gt; 入力監視 &amp;gt; プライバシー」設定画面で、「ほかのアプリケーションの使用中でも、下のアプリケーションにキーボードからの入力の監視を許可。」のリストにKeyCastrを加える。&lt;/p>
&lt;h4 id="ターミナル画面の録画">ターミナル画面の録画&lt;/h4>
&lt;p>いま私はmacOS Mojaveを使っているので、「⌘⇧5」キーを押すことでスクリーンキャプチャを録ることができる。&lt;br>
やってみて気づいたが、このショートカットキーから静止画も撮れるようだ。&lt;/p>
&lt;p>ショートカットキーを押すと撮影位置を表す破線枠と、その下にメニューバーが現れる。
動画を録るには、破線枠で撮影位置を調整した後、メニューバーの真ん中右側の「選択部分を収録」を選んでENTERキーを押す。
すると、録画が開始される。&lt;/p>
&lt;p>録画が終わったらもう一度「⌘⇧5」キーを押して、メニューバーを呼び出し、停止ボタンを押す。すると、動画がデスクトップに保存される。&lt;/p>
&lt;p>なお、ターミナル画面を撮影するときは、以下に気をつけるとよいと思う:&lt;/p>
&lt;ul>
&lt;li>ウィンドウの透過はオフにしておく&lt;/li>
&lt;li>文字サイズを大きめにしておく&lt;/li>
&lt;li>入力するコマンドやキーのアンチョコを用意しておく&lt;/li>
&lt;/ul>
&lt;h4 id="動画をgifアニメ化">動画をGIFアニメ化&lt;/h4>
&lt;p>GIFアニメ化のアプリには、GiftedかPicGIF Liteかの選択肢があったが、Appストアの評価を見てPicGIF Liteに決めた。&lt;br>
使ってみたところ、無料でも機能が充実していて素晴らしいと思った。&lt;/p>
&lt;p>PicGIF Liteを起動し、先ほど録画した動画のmovファイルをドラッグアンドドロップすると、取り込むことができる。&lt;br>
ここでフレームレートを指定できる。
今回は秒間4フレームとした。&lt;/p>
&lt;p>動画を取り込んだ後、余分なフレームを削除したり、順番を入れ替えたりできるようだ。
最初と最後の余計な部分を削った。&lt;/p>
&lt;p>初期状態だとキャンバスが360x240と小さく、画像がぼやけてしまうので、大きめにしておくといい。&lt;br>
今回はプリセットに合わせることを考えておらず、余白が少し大きくなってしまったので、カスタムのキャンバスサイズを定義した。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;h3 id="gitpodというクラウドideがよさそう">GitpodというクラウドIDEがよさそう&lt;/h3>
&lt;p>&lt;a href="https://www.gitpod.io/">https://www.gitpod.io/&lt;/a>&lt;/p>
&lt;p>クラウドIDEでもあるEclipse TheiaベースのオンラインIDE.&lt;br>
GitHub, GitLabの既存プロジェクトをインポートしてワンクリックで開発環境を立ち上げられるそうだ。&lt;/p>
&lt;p>Eclipse TheiaとともにTypeFox社がファウンダー / 開発元。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kai_kou/items/40a7a579f1bce31d6a16">クラウドIDE「Gitpod」を試してみたら予想以上に使えそうだった - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/mouse_484/items/394a4984f749cc201422">Gitpodが最強過ぎる件について - Qiita&lt;/a>&lt;/li>
&lt;li>2020-04-03 &lt;a href="https://thinkit.co.jp/news/bn/17456">クラウド・デスクトップ環境コードエディタ「Eclipse Theia 1.0」リリース | Think IT（シンクイット）&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mbaをcatalinaに上げた">MBAをCatalinaに上げた&lt;/h3>
&lt;p>Macに関する記事をQiitaに上げようと思ったが、せめてその前にCatalinaに上げるべきだろうという謎の義務感によりアップグレードを実行。&lt;/p>
&lt;p>KeyCastrが32ビット版で動かなくなったので、どうやら非公式のサイトからインストールしてしまっていたらしいと気づいた。&lt;/p>
&lt;p>&lt;code>brew cask&lt;/code> でインストールできると知ったので、その方式に変えた。&lt;/p>
&lt;ul>
&lt;li>Brewfileの更新: &lt;a href="https://github.com/progrhyme/myenv/commit/a6bc1671c49a786b16918b12e0b33010e94d5b52">https://github.com/progrhyme/myenv/commit/a6bc1671c49a786b16918b12e0b33010e94d5b52&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="macosのウイルス対策ソフト">macOSのウイルス対策ソフト&lt;/h3>
&lt;p>たまに調べる。&lt;br>
やはりノートンが老舗でバランス良く、安心感ある印象。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://thehikaku.net/security/hikaku.html">セキュリティソフトの比較 2020 - the比較&lt;/a> &amp;hellip; これ表になっててわかりやすい&lt;/li>
&lt;li>&lt;a href="http://monomania.sblo.jp/article/60532423.html">比較2020&amp;rsquo;【Mac用】ウイルス対策ソフト31点のおすすめ；軽いセキュリティソフト: 家電批評モノマニア&lt;/a> &amp;hellip; 縦に長い。ざっと流し見した&lt;/li>
&lt;/ul>
&lt;h3 id="久しぶりにrustを触った">久しぶりにRustを触った&lt;/h3>
&lt;p>最後に触ったのは2年前ぐらいかな？&lt;br>
MacBookにツールチェインをインストールしていたが、 &lt;code>rustup update&lt;/code> で最新化できたっぽい。
1回目は一部コンポーネントの更新に失敗したが、再実行したら完璧になったっぽい。&lt;/p></description></item><item><title>A: 2020-05-23</title><link>https://progrhy.me/tech-notes/a/memo/20200523/</link><pubDate>Sat, 23 May 2020 16:42:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200523/</guid><description>
&lt;h2 id="523">5/23&lt;/h2>
&lt;h3 id="gcloud-promptにテストとciを足した">gcloud-promptにテストとCIを足した&lt;/h3>
&lt;p>&lt;a href="https://github.com/progrhyme/gcloud-prompt/pull/1">https://github.com/progrhyme/gcloud-prompt/pull/1&lt;/a>&lt;/p>
&lt;p>複数のシェルから同時に触っても表示が壊れたりしないように、排他制御機構を入れたのだけど、逆にエンバグしそうで怖くなったので、テストを足した。&lt;/p>
&lt;p>テストのため、 &lt;code>gcloud&lt;/code> コマンドの挙動をなんちゃって実装したシェルスクリプトを書いたけど、これはスタブなのだろうか、モックなのだろうかというのが気になった。&lt;br>
とりあえずコメントでは「stub」ということにしておいたけど。&lt;/p>
&lt;p>See &lt;a href="https://progrhy.me/tech-notes/a/software/test/#%E3%82%B9%E3%82%BF%E3%83%96%E3%81%A8%E3%83%A2%E3%83%83%E3%82%AF%E3%81%AE%E9%81%95%E3%81%84">Software &amp;gt; テスト#スタブとモックの違い&lt;/a>&lt;/p>
&lt;p>今回実装した機能を鑑みるに、&lt;/p>
&lt;ul>
&lt;li>&lt;code>gcloud info&lt;/code> や &lt;code>gcloud config&lt;/code> が呼ばれたときに決まった結果を返す -&amp;gt; スタブ&lt;/li>
&lt;li>gcloud-prompt.shから &lt;code>gcloud config&lt;/code> コマンドが呼ばれたときに、呼ばれた回数を記録 -&amp;gt; モック&lt;/li>
&lt;/ul>
&lt;p>両方の性質を合わせ持ってることになるのかな？&lt;/p>
&lt;p>詳しい人いたら教えてほしい。&lt;/p>
&lt;h3 id="basher-link-がmacosで動かなかった">&lt;code>basher link&lt;/code> がmacOSで動かなかった&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/progrhyme/items/3a31282dfd0512a402cc#macos%E3%81%A7coreutils%E3%81%8C%E5%BF%85%E8%A6%81">シェルスクリプトのパッケージマネージャー「basher」の機能概要と使い方 - Qiita&lt;/a>に追記した通り。&lt;/p>
&lt;p>既に修正PRも送っている:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/basherpm/basher/pull/80">modify: Don&amp;rsquo;t use &amp;quot;readlink -f&amp;quot; in &amp;quot;resolve_link&amp;quot; by progrhyme · Pull Request #80 · basherpm/basher&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>デバッグに苦しんだ副産物として、 &lt;code>realpath&lt;/code> をエミュレートするBashスクリプトが出来た:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/bash-realpath">https://github.com/progrhyme/bash-realpath&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>デバッグコードがたくさん残っているので、実験的な意味合いが強いが。&lt;/p></description></item><item><title>A: 2020-05-22</title><link>https://progrhy.me/tech-notes/a/memo/20200522/</link><pubDate>Fri, 22 May 2020 21:47:32 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200522/</guid><description>
&lt;h2 id="522">5/22&lt;/h2>
&lt;h3 id="ubuntu-1804でzsh-syntax-highlightingを入れた">Ubuntu 18.04でzsh-syntax-highlightingを入れた&lt;/h3>
&lt;p>zshでの &lt;code>help&lt;/code> コマンドを探していたら &lt;a href="https://wiki.archlinux.jp/index.php/Zsh">https://wiki.archlinux.jp/index.php/Zsh&lt;/a> にたどり着き、&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting&lt;/a>の存在を知った。&lt;/p>
&lt;p>fish shellのようなシンタックスハイライトを提供してくれるプラグインらしい。&lt;br>
早速試してみることにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">INSTALL.md&lt;/a>によれば、UbuntuだとxenialかOBSのリポジトリからパッケージで入れるとよさそうだったが、macOSならHomebrewで入れれるようだったので、Linuxbrewでも行けるかまずはやってみることにした。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ brew install zsh-syntax-highlighting
:
&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Installing dependencies &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> zsh-syntax-highlighting: patchelf, ncurses,
zlib, pcre, gettext, libbsd, expat,gdbm, openssl@1.1, berkeley-db, perl,
texinfo and zsh
:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>けっこう依存が色々あったが、無事にインストールできた。&lt;/p>
&lt;p>試しに &lt;code>source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code> を実行してみると、ちゃんとコマンドなどにハイライトが効くようになった。&lt;/p>
&lt;p>dotfilesの対応は &lt;a href="https://github.com/progrhyme/myenv/commit/63ce3a305e6cfa6b5b247e9eba1f8ef58edb94b5">https://github.com/progrhyme/myenv/commit/63ce3a305e6cfa6b5b247e9eba1f8ef58edb94b5&lt;/a> こんな感じで。&lt;/p>
&lt;p>これで私のZsh環境がまた一歩fish shellに近づいた。&lt;/p>
&lt;p>（追記）macOSにも入れた: &lt;a href="https://github.com/progrhyme/myenv/commit/71cf5a49b5ebc5fbd3dc190e5d3f46fa25d23d3b">https://github.com/progrhyme/myenv/commit/71cf5a49b5ebc5fbd3dc190e5d3f46fa25d23d3b&lt;/a>&lt;/p></description></item><item><title>A: 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><pubDate>Wed, 01 Jan 2020 15:38:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/</guid><description/></item></channel></rss>