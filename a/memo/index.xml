<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-05-05</title><link>https://progrhy.me/tech-notes/a/memo/20200505/</link><pubDate>Tue, 05 May 2020 07:25:57 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200505/</guid><description>
&lt;h1 id="55">5/5&lt;/h1>
&lt;h2 id="kubernetesのマニフェストは全部exportして管理した方がいいんじゃねって思った">Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った&lt;/h2>
&lt;p>exportのやり方は調べて&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#%E5%85%A8%E3%81%A6%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%95%E3%82%A7%E3%82%B9%E3%83%88%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%81%84">kubectlのページ#全てのマニフェストを取得したい&lt;/a>に書いた。&lt;/p>
&lt;p>…というか、exportしてないと不安である。&lt;/p>
&lt;p>kustomizeで管理していても、野良のリソースがないことを保証できない。&lt;br>
素のマニフェスト管理でも同様。&lt;/p>
&lt;p>&lt;code>kubectl apply&lt;/code> は、ふつうは削除同期をやってくれないので。&lt;/p>
&lt;p>（※…と思って、リファレンスを読み返していたら、 &lt;code>--prune&lt;/code> というオプションがα機能であるようだ。これについては、&lt;a href="https://progrhy.me/tech-notes/a/software/k8s/kubectl/#apply">kubectl#apply&lt;/a>に書いた）&lt;/p>
&lt;p>定期的にdumpして差分がないかチェックした方がいいんじゃないかな。&lt;br>
特に、本番とstaging環境は。&lt;/p>
&lt;p>逆に、export -&amp;gt; applyの運用にしていれば、staging環境の差分をそのまま本番に適用する運用が可能ではないだろうか。&lt;br>
このやり方なら、仰々しいK8s対応のCI/CDツールなど使わなくても、kubectlとGitOpsだけで行けるかもしれない。&lt;/p>
&lt;p>まだ試してないので、実際にやってみたら色々と課題も出てくるだろうけど。&lt;/p>
&lt;h3 id="neobundleからdeinvimに乗り換えた">NeoBundleからdein.vimに乗り換えた&lt;/h3>
&lt;p>今更かよって感じだけど乗り換えた。&lt;br>
NeoBundleは2年ぐらい前に更新が止まっていた。&lt;/p>
&lt;p>作業マシンはUbuntu 18.04&lt;/p>
&lt;h4 id="インストール">インストール&lt;/h4>
&lt;p>&lt;a href="https://github.com/Shougo/dein.vim#quick-start">https://github.com/Shougo/dein.vim#quick-start&lt;/a> に従う。&lt;/p>
&lt;p>インストール先は &lt;code>~/.vim/dein&lt;/code> とした。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh
sh ./installer.sh ~/.vim/dein
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際は&lt;a href="https://github.com/progrhyme/dotfiles/commit/1ef6a75f2952407d6758eb0c1cef584943ed9ecc">こんな感じ&lt;/a>で、スクリプトで対応した。&lt;/p>
&lt;h4 id="vimrcの移行">vimrcの移行&lt;/h4>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/35f3be479a57e92d98a6182792b900366ab20beb">このコミット&lt;/a>で対応した。&lt;/p>
&lt;p>とりあえず使ってるのは全部移行しようかと思ったけど、次の行のプラグインについてはどう移行すればいいのかぱっとわからず、悩んだ:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Vim" data-lang="Vim">&lt;span style="color:#000">NeoBundleLazy&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mopp/layoutplugin.vim&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> { &lt;span style="color:#4e9a06">&amp;#39;autoload&amp;#39;&lt;/span> : { &lt;span style="color:#4e9a06">&amp;#39;commands&amp;#39;&lt;/span> : &lt;span style="color:#4e9a06">&amp;#39;LayoutPlugin&amp;#39;&lt;/span>} }&lt;span style="color:#a40000">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そもそもこのプラグインはvim-pluginの雛形作成ツールで、今のところ使う予定がないので、消すことにした。&lt;/p>
&lt;p>あと、TOMLに対応したプラグインがなかったので、 &lt;code>'cespare/vim-toml'&lt;/code> を入れた。&lt;/p>
&lt;p>以上。&lt;/p>
&lt;p>なんか、vim起動後にENTERが必要だったり、終了後に画面がクリアされなかったりする（NeoBundleの頃はそんなことはなかった）が、概ね問題なさそう。&lt;/p></description></item><item><title>A: 2020-05-04</title><link>https://progrhy.me/tech-notes/a/memo/20200504/</link><pubDate>Mon, 04 May 2020 15:19:13 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200504/</guid><description>
&lt;h2 id="54">5/4&lt;/h2>
&lt;h3 id="git-pull---pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った">git pull &amp;ndash;pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った&lt;/h3>
&lt;p>何番煎じだよって感じだけど、いい加減面倒になったので作った。&lt;/p>
&lt;p>コード: &lt;a href="https://github.com/progrhyme/git-wraps/blob/e06f3238a5c6e0d1605e3de96b1a56d74a046953/bin/git-branch-sweep">git-wraps/bin/git-branch-sweep&lt;/a>&lt;/p>
&lt;p>gitのaliasにも設定したかったので、オプションにも対応させた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git bsp -h
NAME
git-branch-sweep - git subcommand to clean up merged &lt;span style="color:#204a87">local&lt;/span> branches
SYNOPSYS
&lt;span style="color:#8f5902;font-style:italic"># Basic execution&lt;/span>
git branch-sweep
&lt;span style="color:#8f5902;font-style:italic"># Interactive mode&lt;/span>
git branch-sweep -i
&lt;span style="color:#8f5902;font-style:italic"># pull before sweep&lt;/span>
git branch-sweep -p&lt;span style="color:#000;font-weight:bold">|&lt;/span>--pull
&lt;span style="color:#8f5902;font-style:italic"># Specify both options&lt;/span>
git branch-sweep -i -p
Help:
git branch-sweep -h&lt;span style="color:#000;font-weight:bold">|&lt;/span>--help
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスクリプトをPATHが通っている場所に置く。&lt;/p>
&lt;p>.gitconfigのaliasはこんな感じ:&lt;/p>
&lt;pre>&lt;code>[alias]
plr = pull --prune
bsp = branch-sweep --pull
&lt;/code>&lt;/pre>&lt;p>&lt;code>git branch-sweep&lt;/code> か &lt;code>git plr&lt;/code> か &lt;code>git bsp&lt;/code> か、利用頻度によってaliasを調整するかもしれない。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kenshiroh/items/44dcf4b094e841bb42a2">gitでbranchをお掃除する際のチートシート - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/yuichielectric/items/84cd61915a1236f19221">リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="ubuntuでkubectxをlinuxbrewで入れた">Ubuntuでkubectxをlinuxbrewで入れた&lt;/h3>
&lt;p>&lt;a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx&lt;/a>&lt;/p>
&lt;p>READMEには明記されてはいないのだけど、 &lt;code>brew install kubectx&lt;/code> でふつうにインストールできて使えた。&lt;br>
まあ、シェルスクリプトだしな。&lt;/p>
&lt;h3 id="memo-ページの階層を増やしたらhogoのサイト内ページ参照が壊れた">memo/ ページの階層を増やしたらHogoのサイト内ページ参照が壊れた&lt;/h3>
&lt;p>下の変更による:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/tech-notes/commit/325430dfd7d297186bc73aa2e53bf69e8da5a79c">[memo] Move some memos under 2020/ · progrhyme/tech-notes@325430d&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>例えば、20200502.md内のリンクを20200501へのリンクを &lt;code>{{\&amp;lt; ref &amp;quot;/a/memo/20200501.md&amp;quot; \&amp;gt;}}&lt;/code> に戻すと、次のエラーが出る:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% hugo -v --path-warnings
INFO 2020/05/05 06:53:45 Using config file:
Building sites … INFO 2020/05/05 06:53:45 syncing static files to /home/progrhyme/my/repos/tech-notes/public/
INFO 2020/05/05 06:53:45 postcss: use config file /home/progrhyme/my/repos/tech-notes/themes/docsy/postcss.config.js
ERROR 2020/05/05 06:53:47 &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ja&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> REF_NOT_FOUND: Ref &lt;span style="color:#4e9a06">&amp;#34;/a/memo/20200501.md&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;/home/progrhyme/my/repos/tech-notes/content/ja/a/memo/20200502.md:16:34&amp;#34;&lt;/span>: page not found
Total in &lt;span style="color:#0000cf;font-weight:bold">2470&lt;/span> ms
Error: Error building site: logged &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> error&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-05-03</title><link>https://progrhy.me/tech-notes/a/memo/20200503/</link><pubDate>Sun, 03 May 2020 12:11:38 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200503/</guid><description>
&lt;h2 id="53">5/3&lt;/h2>
&lt;h3 id="github-actionsには今ビルドを手動トリガーするネイティブ機能はないが同等のことはできる">GitHub Actionsには今ビルドを手動トリガーするネイティブ機能はない（が、同等のことはできる）&lt;/h3>
&lt;p>Bitbucket Pipelinesの &lt;code>trigger: manual&lt;/code> みたいな機能がリファレンス見てもなさそうだなと思ってググってみたら、なさそうだとわかった。&lt;/p>
&lt;p>フィーチャーリクエストが出ている:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504">GitHub Actions Manual Trigger / Approvals - GitHub Community Forum&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>擬似的に同等のことはできる。以下、参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/proudust/items/51599abd2b107b708e1e">GitHub Actions で手動トリガーのワークフローを作る - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/58933155/manual-workflow-triggers-in-github-actions">docker - Manual workflow triggers in Github Actions - Stack Overflow&lt;/a>
&lt;ul>
&lt;li>&lt;code>on.watch.types: [stared]&lt;/code> でstarをフックにしている例が面白いw&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="github-actionsを使ってterraformでgcp構成をcicdする">GitHub Actionsを使ってTerraformでGCP構成をCI/CDする&lt;/h3>
&lt;p>Qiitaに投稿した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/6bde1e1807a65c7e2cb2">GitHub ActionsでGCPにTerraformでインフラCI/CDする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kentakozuka/items/e0d356df38f29ee7587e">Github Actions で GCPに向けてTerraform を実行する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gitにgpgで署名してgithubに署名キーを登録してみた">GitにGPGで署名してGitHubに署名キーを登録してみた&lt;/h3>
&lt;p>そんな設定があったけど、面倒なだけで特に意味はないのではないかと思っていたのでやってなかった。&lt;br>
まあ、でもなりすましを防ぐ意味では有意義か。&lt;/p>
&lt;p>作業環境はUbuntu 18.04 LTS.&lt;/p>
&lt;p>GitHubのドキュメント:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/managing-commit-signature-verification">コミット署名の検証を管理する - GitHub ヘルプ&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/checking-for-existing-gpg-keys">既存の GPG キーの確認 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/generating-a-new-gpg-key">新しい GPG キーを生成する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account">GitHub アカウントへの新しい GPG キーの追加 - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/telling-git-about-your-signing-key">Git へ署名キーを伝える - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.github.com/ja/github/authenticating-to-github/signing-commits">コミットに署名する - GitHub ヘルプ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>既存の GPG キーの確認を次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% gpg --list-secret-keys --keyid-format LONG
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何もなかったので、新しい GPG キーを生成する。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% gpg --version
gpg &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>GnuPG&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 2.2.4
:
% gpg --full-generate-key
% gpg --list-secret-keys --keyid-format LONG
% gpg --armor --export XXXXXXXXXXXXXX
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git へ署名キーを伝える&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git config --global user.signingkey XXXXXXXXXXXXXX
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以降、 &lt;code>git commit&lt;/code> に &lt;code>-S&lt;/code> オプションをつけると、コミットに署名がなされる。&lt;/p>
&lt;p>パスワードが要求されるが、パスワードマネージャーに保存しておくと以降、聞かれないで済む。&lt;/p>
&lt;p>常に署名したい場合、次のコマンドを実行:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% git config --global commit.gpgsign &lt;span style="color:#204a87">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>パスワードをランダムで生成してしまったので、すぐに打てなくて困った。&lt;br>
パスワードを変更するには、次のコマンドで:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gpg --edit-key XXXXXXXXXXXXXX passwd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一応 &lt;code>$HOME/.gnupg&lt;/code> をバックアップしておいた。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kent-hamaguchi/items/0e44f563caf39cd3eb9e">GitHubにgpg署名付きのコミットをする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://joemphilips.com/post/gpg_memo/">GPGで自分用の秘密鍵を1つに統一する · JoeMPhilips&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-02</title><link>https://progrhy.me/tech-notes/a/memo/20200502/</link><pubDate>Sat, 02 May 2020 00:06:02 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200502/</guid><description>
&lt;h2 id="52">5/2&lt;/h2>
&lt;h3 id="bitbucket-pipelinesでgcpに対してterraformを適用するには">Bitbucket PipelinesでGCPに対してTerraformを適用するには&lt;/h3>
&lt;p>※Qiitaに移しました:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/ed96d42dd811063a24c2">Bitbucket PipelinesでGCPに対してTerraformでインフラCI/CDする - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../20200501/#ci%E3%81%A7gcp%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6terraform%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">2020-05-01に調べたログ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/web-service/bitbucket/">Bitbucketについてのメモ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>（5/3追記）&lt;/p>
&lt;p>下の記事を見て、 &lt;code>GOOGLE_CREDENTIALS&lt;/code> はパス名じゃなくてサービスアカウントキーのJSONままでも行けると気づいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kentakozuka/items/e0d356df38f29ee7587e">Github Actions で GCPに向けてTerraform を実行する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="yamlで配列のマージはできなさそう">YAMLで配列のマージはできなさそう&lt;/h3>
&lt;p>ハッシュのマージはアンカーとエイリアスでできるのだけど、配列のマージはできなさそう。&lt;/p>
&lt;p>参考: &lt;a href="https://stackoverflow.com/questions/24090177/how-to-merge-yaml-arrays">list - How to merge YAML arrays? - Stack Overflow&lt;/a>&lt;/p>
&lt;p>配列の1つ1つの要素にアンカーを付けて、再利用することは可能。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">- &lt;span style="color:#8f5902;font-style:italic">&amp;amp;mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>foo&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- bar&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: &lt;a href="https://magazine.rubyist.net/articles/0009/0009-YAML.html#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9">プログラマーのための YAML 入門 (初級編)&lt;/a>&lt;/p>
&lt;h3 id="dangerはbitbucketにどのように対応しているか">DangerはBitbucketにどのように対応しているか&lt;/h3>
&lt;p>tfnotifyをBitbucketに対応させたいなーと思いながら、参考にできるかなと思って見ていた。&lt;/p>
&lt;p>CIサーバからBitbucketのREST APIを叩いているようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danger/danger/pull/481/files">Bitbucket Server by HeEAaD · Pull Request #481 · danger/danger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danger.systems/js/usage/bitbucket_cloud.html">Danger + BitBucket Cloud&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-01</title><link>https://progrhy.me/tech-notes/a/memo/20200501/</link><pubDate>Fri, 01 May 2020 01:34:48 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200501/</guid><description>
&lt;h2 id="51">5/1&lt;/h2>
&lt;h3 id="ciでgcpに対してterraformするには">CIでGCPに対してTerraformするには&lt;/h3>
&lt;p>&lt;del>サービスアカウントのキーをJSONで作って、 &lt;code>GOOGLE_CREDENTIALS&lt;/code> or &lt;code>GOOGLE_BACKEND_CREDENTIALS&lt;/code> 環境変数に渡せば良さそう。&lt;/del>
（事例によって異なる環境変数を使っていることがある。）&lt;/p>
&lt;p>&lt;a href="https://www.terraform.io/docs/backends/types/gcs.html">https://www.terraform.io/docs/backends/types/gcs.html&lt;/a>&lt;/p>
&lt;p>（追記） &lt;code>terraform plan&lt;/code> のときには&lt;a href="https://cloud.google.com/docs/authentication/production">Application Credentials&lt;/a>が必要になる。&lt;br>
GCS backend認証も上記の環境変数がない場合は、Application Credentialsにフォールバックするので、環境変数 &lt;code>GOOGLE_APPLICATION_CREDENTIALS&lt;/code> にキーファイルのパスを設定するのがよい。&lt;/p>
&lt;p>事例:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/MisaKondo/cb46b0ecd106e9c824a641b14954b8e1">TerraformによるGCP環境の管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/community/tutorials/managing-gcp-projects-with-terraform">Managing Google Cloud projects with Terraform&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.devsamurai.com/ja/gcp-terraform-101/">Terraformツールを使ってGCPリソース管理 | DevSamurai&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以前に調べたログ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/2020/20200427/">2020-04-27&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tmuxのstatus-lineの色設定をいい感じにした">tmuxのstatus lineの色設定をいい感じにした&lt;/h3>
&lt;p>2ヶ月ちょっと前に .tmux.conf をv2.9+対応にしたのだけど、status lineの色設定がなんかイマイチになってたので調整した。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d">https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d&lt;/a>&lt;/p>
&lt;p>だいぶややこしい設定になっていて、どこを変えればいいかよくわからなくなっていたのと、tmuxプロセスを全て終了しないと再読込みされないっぽかったので更に混乱した。&lt;br>
tmuxプロセスA内でconfを編集しながら、tmuxプロセスBを起動して見た目を確認していたが、それだとtmuxプロセスAの設定が引き継がれるような挙動だった。&lt;/p>
&lt;p>参考にしたページ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/nojima/items/9bc576c922da3604a72b">tmux の status line の設定方法 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tokuhy/dotfiles/blob/master/.tmux.conf">dotfiles/.tmux.conf at master · tokuhy/dotfiles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="terraformでgcpのservice-account-keyを作成">TerraformでGCPのService Account Keyを作成&lt;/h3>
&lt;p>Qiitaにこういうエントリを上げた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/8603c0f6e350734c1739">TerraformでGCPのService Account Keyを作成し、ローカルにファイルとして保存する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>何度か実行して確かめたところ、次のことがわかった。&lt;/p>
&lt;ul>
&lt;li>Service Account Keyの内容はtfstateに保存される&lt;/li>
&lt;li>よって、local_fileに書き出すコードは後で足してもいいし、一度消しても復元できる&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-30</title><link>https://progrhy.me/tech-notes/a/memo/20200430/</link><pubDate>Thu, 30 Apr 2020 00:08:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200430/</guid><description>
&lt;h2 id="430">4/30&lt;/h2>
&lt;h3 id="ubuntuでhomebrewで入れたtfenvだとtfenv-installに失敗する">UbuntuでHomebrewで入れたtfenvだとtfenv installに失敗する&lt;/h3>
&lt;p>unzipで失敗する。&lt;/p>
&lt;p>デバッグしたところ、Homebrewの依存でインストールされたunzipが使われてしまうからのようだ。&lt;/p>
&lt;p>tfenvの &lt;code>libexec/helpers&lt;/code> 内に &lt;code>which unzip&lt;/code> を仕込んで確かめた。&lt;/p>
&lt;p>ログ:&lt;/p>
&lt;pre>&lt;code>% TFENV_DEBUG=true tfenv install 0.12.24
+ [tfenv:22] '[' -z '' ']'
++++ [tfenv:23] readlink_f /home/linuxbrew/.linuxbrew/bin/tfenv
:
（中略）
:
+ [tfenv-install:180] mkdir -p /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/versions/0.12.24
+ [tfenv-install:181] unzip tfenv_download.DtVL3N/terraform_0.12.24_linux_amd64.zip -d /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/version
s/0.12.24
UnZip 6.00 of 20 April 2009, by Debian. Original by Info-ZIP.
Usage: unzip [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir]
Default action is to extract files in list, except those in xlist, to exdir;
file[.zip] may be a wildcard. -Z =&amp;gt; ZipInfo mode (&amp;quot;unzip -Z&amp;quot; for usage).
-p extract files to pipe, no messages -l list files (short format)
-f freshen existing files, create none -t test compressed archive data
-u update files, create if necessary -z display archive comment only
-v list verbosely/show version info -T timestamp archive to latest
-x exclude files that follow (in xlist) -d extract files into exdir
modifiers:
-n never overwrite existing files -q quiet mode (-qq =&amp;gt; quieter)
-o overwrite files WITHOUT prompting -a auto-convert any text files
-j junk paths (do not make directories) -aa treat ALL files as text
-C match filenames case-insensitively -L make (some) names lowercase
-X restore UID/GID info -V retain VMS version numbers
-K keep setuid/setgid/tacky permissions -M pipe through &amp;quot;more&amp;quot; pager
See &amp;quot;unzip -hh&amp;quot; or unzip.txt for more help. Examples:
unzip data1 -x joe =&amp;gt; extract all files except joe from zipfile data1.zip
unzip -p foo | more =&amp;gt; send contents of foo.zip via pipe into program more
unzip -fo foo ReadMe =&amp;gt; quietly replace existing ReadMe if archive file newer
+ [tfenv-install:181] error_and_die 'Tarball unzip failed'
++ [helpers:4] basename /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/libexec/tfenv-install
+ [helpers:4] echo -e 'tfenv: tfenv-install: \033[0;31m[ERROR] Tarball unzip failed\033[0;39m'
tfenv: tfenv-install: [ERROR] Tarball unzip failed
+ [helpers:5] which unzip
/home/linuxbrew/.linuxbrew/bin/unzip
+ [helpers:6] exit 1
+ [helpers:1] rm -rf tfenv_download.DtVL3N
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>brew uninstall unzip --ignore-dependencies&lt;/code> した後、 &lt;code>tfenv install 0.12.24&lt;/code> したら成功した。&lt;/li>
&lt;li>&lt;code>/home/linuxbrew/.linuxbrew/bin/unzip some.zip -d somedir&lt;/code> は同じエラーで失敗する。&lt;/li>
&lt;li>&lt;code>/usr/bin/unzip some.zip -d somedir&lt;/code> は成功する。&lt;/li>
&lt;/ul>
&lt;p>単独でunzipコマンドを実行しても失敗しているので、Linuxbrewのunzipが壊れてるんだと思う。&lt;/p></description></item><item><title>A: 2020-04-29</title><link>https://progrhy.me/tech-notes/a/memo/20200429/</link><pubDate>Wed, 29 Apr 2020 10:49:46 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200429/</guid><description>
&lt;h2 id="429">4/29&lt;/h2>
&lt;h3 id="ubuntu-1804でintellij-ideaを20201にアップデート">Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート&lt;/h3>
&lt;p>久しぶりに起動したらアップデートする必要があった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2018/20180331#TOC-Ubuntu-16.04-IntelliJ-IDEA-">2018.1にアップデートしたときのログ&lt;/a>&lt;/p>
&lt;p>上と同じ手順で行けた。&lt;br>
以下はログ。&lt;/p>
&lt;p>tar.gzをダウンロードして解凍し、 &lt;code>$HOME/vendor/&lt;/code> に配置。&lt;br>
&lt;code>idea-IC -&amp;gt; idea-IC-181.4203.550&lt;/code> とsymlinkしていたので、付け替える。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">cd&lt;/span> ~/vendor
rm idea-IC
ln -s idea-IC-201.6668.121 idea-IC
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.local/share/applications/jetbrains-idea-ce.desktop&lt;/code> を次のように編集:&lt;/p>
&lt;pre>&lt;code>[Desktop Entry]
Version=2020.1.0
Type=Application
Name=IntelliJ IDEA Community Edition
Icon=$HOME/vendor/idea-IC/bin/idea.png
Exec=&amp;quot;$HOME/vendor/idea-IC/bin/idea.sh&amp;quot; %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=jetbrains-idea-ce
&lt;/code>&lt;/pre>&lt;p>※ &lt;code>$HOME&lt;/code> は展開して書き替えないといけないかも。&lt;/p>
&lt;h3 id="ubuntuに昔入れたminikubeをuninstall">Ubuntuに昔入れたminikubeをUninstall&lt;/h3>
&lt;p>localkubeというdaemonが動いていることに気がついたのがきっかけだけど、2〜3年使っていないので掃除することにした。&lt;/p>
&lt;p>実行したコマンド:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo systemctl stop localkube
sudo systemctl disable localkube
docker system prune
rm -rf ~/.minikube
sudo rm /usr/local/bin/localkube /usr/local/bin/minikube
sudo rm -rf /etc/kubernetes/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2017/20171118#TOC-Ubuntu-Minikube-">2017年の作業ログ&lt;/a>によると、dpkgで入れたみたいなんだけど、 &lt;code>dpkg -l&lt;/code> しても出てこなかった。はて。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@yudapramad/uninstall-minikube-5c032a7dd44f">Uninstall Minikube - yuda prama - Medium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/minikube/issues/1043">How to uninstall? · Issue #1043 · kubernetes/minikube&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mdbookについて少し機能を調べた">mdBookについて少し機能を調べた&lt;/h3>
&lt;p>&lt;a href="https://rust-lang.github.io/mdBook/">https://rust-lang.github.io/mdBook/&lt;/a>&lt;/p>
&lt;p>Rust製のGitBookみたいなもの。&lt;br>
高速でよさそう。&lt;/p>
&lt;p>MEMO:&lt;/p>
&lt;ul>
&lt;li>config: &lt;a href="https://rust-lang.github.io/mdBook/format/config.html">https://rust-lang.github.io/mdBook/format/config.html&lt;/a>&lt;/li>
&lt;li>サイドバーに目次ツリーが表示されているが、 &lt;code>[output.html.fold]&lt;/code> で挙動を変えられそう。
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/pull/1027">https://github.com/rust-lang/mdBook/pull/1027&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>目次（Table of Contents）は公式サポートないのかも。イシューになってる
&lt;ul>
&lt;li>&lt;code>{{#toc}}{{/toc}}&lt;/code> で行けるんじゃないのかな？
&lt;ul>
&lt;li>&lt;a href="https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc">https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/issues/153">https://github.com/rust-lang/mdBook/issues/153&lt;/a>&lt;/li>
&lt;li>自作している人がいる
&lt;ul>
&lt;li>&lt;a href="https://github.com/badboy/mdbook-toc">https://github.com/badboy/mdbook-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A: 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><pubDate>Wed, 01 Jan 2020 15:38:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/</guid><description/></item></channel></rss>