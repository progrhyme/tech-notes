<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-12-09</title><link>https://progrhy.me/tech-notes/a/memo/20201209/</link><pubDate>Wed, 09 Dec 2020 08:38:39 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20201209/</guid><description>
&lt;h2 id="129">12/9&lt;/h2>
&lt;h3 id="最近のknown_hostsはホスト部が暗号化されている">最近のknown_hostsはホスト部が暗号化されている&lt;/h3>
&lt;p>ssh configでHashKnownHostsがYesになってるみたい。&lt;/p>
&lt;p>これを復号する方法を調べてみたが、まだ見つかっていない。ハッシュ化=一方向変換なら、無理か。&lt;/p>
&lt;p>次の操作は可能:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 該当ホストがknown_hostsに存在するか探す&lt;/span>
ssh-keygen -F &lt;span style="color:#000">$host&lt;/span> -f ~/.ssh/known_hosts
&lt;span style="color:#8f5902;font-style:italic"># 該当ホストをknown_hostsから削除&lt;/span>
ssh-keygen -R &lt;span style="color:#000">$host&lt;/span> -f ~/.ssh/known_hosts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>いまのところ考えられるやり方は、次の手順:&lt;/p>
&lt;ol>
&lt;li>ユーザの ~/.ssh/configでHashKnownHostsをnoにする&lt;/li>
&lt;li>known_hostsからエントリを消して再接続する&lt;/li>
&lt;/ol>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.mothule.com/tools/ssh/tools-ssh-keygen-basic">SSH公開鍵認証で必要なssh-keygenの使い方を理解する - もちゅろぐ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/kamijin_fanta/items/323c14facdf87d723b01">SSHでいつもやる設定 (ControlMaster / Bash補完) - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-12-02</title><link>https://progrhy.me/tech-notes/a/memo/20201202/</link><pubDate>Wed, 02 Dec 2020 13:31:30 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20201202/</guid><description>
&lt;h2 id="122">12/2&lt;/h2>
&lt;h3 id="binqにargocdを追加">binqにargocdを追加&lt;/h3>
&lt;p>すっかり使い方が記憶の彼方だったが、過去ログとかGitHub Pages上の他の設定を見たらなんとかなった。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">binq new &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://github.com/argoproj/argo-cd/releases/download/v{{.Version}}/argocd-{{.OS}}-{{.Arch}}{{.BinExt}}&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -v 1.7.10 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --rename &lt;span style="color:#4e9a06">&amp;#34;argocd-{{.OS}}-{{.Arch}}:argocd,argocd-{{.OS}}-{{.Arch}}.exe:argocd.exe&amp;#34;&lt;/span>
binq register index/index.json tmp/argocd.json -p github.com/argoproj/argo-cd/index.json
binq verify github.com/argoproj/argo-cd/index.json
binq verify github.com/argoproj/argo-cd/index.json --os linux
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-10-02</title><link>https://progrhy.me/tech-notes/a/memo/20201002/</link><pubDate>Fri, 02 Oct 2020 16:43:01 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20201002/</guid><description>
&lt;h2 id="102">10/2&lt;/h2>
&lt;h3 id="terraform-v013へのアップグレード">terraform v0.13へのアップグレード&lt;/h3>
&lt;p>最近、何度かv0.12からアップグレードする機会があった。&lt;br>
というか、tfenv等でバージョン固定してなかったために、不意にバージョンが上がってしまった。&lt;/p>
&lt;p>まずここを読んでから作業すべし:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.terraform.io/upgrade-guides/0-13.html">https://www.terraform.io/upgrade-guides/0-13.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本来あるべき手順:&lt;/p>
&lt;ol>
&lt;li>アップグレード前にterraform planで差分がないことを確認&lt;/li>
&lt;li>v0.13へアップグレード&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>適宜HCLを修正する。 &lt;code>required_providers&lt;/code> の追記については後述&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>アップグレード後にterraformを実行して問題ないことを確認&lt;/li>
&lt;/ol>
&lt;p>事前に差分を確認せずにアップグレードして、その後にterraform plan/applyすると、こういうエラーが出ることがある（あった）:&lt;/p>
&lt;pre>&lt;code>Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
Error: Provider configuration not present
To work with google_xxx.yyy its
original provider configuration at provider[&amp;quot;registry.terraform.io/-/google&amp;quot;]
is required, but it has been removed. This occurs when a provider
configuration is removed while objects created by that provider still exist in
the state. Re-add the provider configuration to destroy
google_xxx.yyy, after which you can remove the provider configuration again.
&lt;/code>&lt;/pre>&lt;p>ここで &lt;code>google_xxx.yyy&lt;/code> には色んなリソースが入ってくる。&lt;br>
こういうエラーがずらっと並んでいたのを見た。&lt;/p>
&lt;p>このエラーについては上のアップグレードガイドにも書いてあるが、tfstateにあるリソースがなくなっているケースが多いようだ。&lt;br>
ありがちなのは、コンソールやCLIでリソースを消して、terraform側に反映してないとか、そういうケース。&lt;/p>
&lt;p>対応としては、消していいものであれば、 &lt;code>terraform state rm google_xxx.yyy&lt;/code> でOK.&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/terraform/#v013">Terraform#v0.13&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="terraformrequired_providersエントリの追加">terraform.required_providersエントリの追加&lt;/h4>
&lt;p>必須ではないかもしれないが、利用するプロバイダをterraformブロックの中に記述するようになった。&lt;/p>
&lt;p>例:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-HCL" data-lang="HCL">&lt;span style="color:#204a87;font-weight:bold">terraform&lt;/span> {
&lt;span style="color:#000"> required_version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 0.13.0&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">required_providers&lt;/span> {
&lt;span style="color:#000"> google&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> {
&lt;span style="color:#000"> source&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hashicorp/google&amp;#34;&lt;/span>
&lt;span style="color:#000"> version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 3.41&amp;#34;&lt;/span>
}
&lt;span style="color:#000"> google-beta&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> {
&lt;span style="color:#000"> source&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hashicorp/google-beta&amp;#34;&lt;/span>
&lt;span style="color:#000"> version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;~&amp;gt; 3.41&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-09-18</title><link>https://progrhy.me/tech-notes/a/memo/20200918/</link><pubDate>Fri, 18 Sep 2020 10:02:21 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200918/</guid><description>
&lt;h2 id="918">9/18&lt;/h2>
&lt;h3 id="binqにhelmを追加">binqにhelmを追加&lt;/h3>
&lt;p>&lt;a href="https://github.com/binqry/index/commit/ad137519978c9a5c1e1ba94b8d091563e99e8365">https://github.com/binqry/index/commit/ad137519978c9a5c1e1ba94b8d091563e99e8365&lt;/a>&lt;/p>
&lt;p>コマンドメモ&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">binq new &lt;span style="color:#4e9a06">&amp;#34;https://get.helm.sh/helm-v{{.Version}}-{{.OS}}-{{.Arch}}{{.Ext}}&amp;#34;&lt;/span> -e default:.tar.gz,windows:.zip -v 3.3.2 -f tmp/helm.json
binq register index/index.json tmp/helm.json -p helm/index.json
&lt;span style="color:#8f5902;font-style:italic"># add checksum&lt;/span>
binq verify helm/index.json
binq verify helm/index.json --os linux
&lt;span style="color:#8f5902;font-style:italic"># add v3.1.1&lt;/span>
binq revise helm/index.json -v 3.1.1
binq verify helm/index.json -v 3.1.1
binq verify helm/index.json -v 3.1.1 --os linux
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rds-mysqlからgcp-cloud-sqlにレプリ可能か">RDS MySQLからGCP Cloud SQLにレプリ可能か？&lt;/h3>
&lt;p>Cloud SQLはVPCに対応しているので、AWS - GCPのVPCが閉域網でつながっていれば、閉域網通信で行けそうな気がする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/sql/docs/mysql/private-ip?hl=ja">プライベート IP | Cloud SQL for MySQL | Google Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>GCPのドキュメントだとPublic IPでつなぐ前提になっているようだ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/sql/docs/mysql/replication/replication-from-external?hl=ja#setup">外部サーバーから Cloud SQL への移行 | Cloud SQL for MySQL | Google Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>2019年12月 &lt;a href="https://qiita.com/hkame/items/9cff6117bc1763ac7810">Aurora-&amp;gt;CloudSQLへMySQLレプリケーションはできるのか - Qiita&lt;/a>&lt;/li>
&lt;li>2018年12月 &lt;a href="https://www.wantedly.com/companies/whiteplus/post_articles/148698">MySQLをRDSからCloud SQLに移行するときに考えたこと | ADVENT CALENDAR2018&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-08-28</title><link>https://progrhy.me/tech-notes/a/memo/20200828/</link><pubDate>Fri, 28 Aug 2020 16:49:31 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200828/</guid><description>
&lt;h2 id="828">8/28&lt;/h2>
&lt;h3 id="macosでecs-cliをセットアップ">macOSでecs-cliをセットアップ&lt;/h3>
&lt;h4 id="インストール">インストール&lt;/h4>
&lt;p>公式には書いてないが、Homebrewに対応していた。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew install amazon-ecs-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://formulae.brew.sh/formula/amazon-ecs-cli">https://formulae.brew.sh/formula/amazon-ecs-cli&lt;/a>&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ECS_CLI_installation.html">Amazon ECS CLI のインストール - Amazon Elastic Container Service&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="セットアップ">セットアップ&lt;/h4>
&lt;p>&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ECS_CLI_Configuration.html">Amazon ECS CLI の設定 - Amazon Elastic Container Service&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ecs-cli configure profile --profile-name PROFILE_NAME --access-key &lt;span style="color:#000">$AWS_ACCESS_KEY_ID&lt;/span> --secret-key &lt;span style="color:#000">$AWS_SECRET_ACCESS_KEY&lt;/span>
ecs-cli configure --cluster CLUSTER --default-launch-type LAUNCH_TYPE --region REGION --config-name NAME
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A: 2020-07-30</title><link>https://progrhy.me/tech-notes/a/memo/20200730/</link><pubDate>Thu, 30 Jul 2020 11:02:26 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200730/</guid><description>
&lt;h2 id="730">7/30&lt;/h2>
&lt;h3 id="scp時にシェルが予期しない挙動をする">scp時にシェルが予期しない挙動をする&lt;/h3>
&lt;p>自分のdotfilesで考慮できていないのがよくない。&lt;br>
下を参考に設定を見直す:&lt;/p>
&lt;p>-&lt;a href="https://linux.just4fun.biz/?Linux%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/scp%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95%E3%83%BBbashrc%E7%B7%A8">Linux環境設定/scpができなくなった時の対処法・bashrc編 - Linuxと過ごす&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/montblanc18/items/b93fa4082e3bc2702a7f">.bashrc内にechoを入れておくとscpに失敗する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たぶん下のような感じで行けるのではないか:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[[&lt;/span> -t &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># ログイン&lt;/span>
:
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># scpなど&lt;/span>
:
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/10022323/check-isatty-in-bash">shell - check isatty in bash - Stack Overflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="731">7/31&lt;/h2>
&lt;h3 id="vs-code--pythonで内部モジュールのimportエラー">VS Code + Pythonで内部モジュールのimportエラー&lt;/h3>
&lt;p>&lt;code>oreno/modules&lt;/code> 以下に内部モジュールを置いているとする。&lt;br>
次の2設定でエラー回避できそう。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;python.autoComplete.extraPaths&amp;quot;: [&amp;quot;./oreno/modules&amp;quot;]&lt;/code>&lt;/li>
&lt;li>ワークスペースのルートに次の内容で pylintrc ファイルを作る:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>init-hook=&amp;quot;./oreno/modules&amp;quot;
&lt;/code>&lt;/pre>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/kurikou02/items/beb3d638f93cc372b3c3">VSCodeで自作モジュールimport時のエラー表示(unresolved import &amp;lsquo;hoge&amp;rsquo;)が消えない - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/New_enpitsu_15/items/c1e680cc0c24cf87c581">VSCodeのPylintがimportでうざい！！！！ - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-07-18</title><link>https://progrhy.me/tech-notes/a/memo/20200718/</link><pubDate>Sat, 18 Jul 2020 14:40:19 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200718/</guid><description>
&lt;h2 id="718">7/18&lt;/h2>
&lt;h3 id="goreleaserでhomebrewのformulaを作るようにした">GoReleaserでHomebrewのFormulaを作るようにした&lt;/h3>
&lt;p>なんとそれができるということをつい昨日知った。&lt;/p>
&lt;p>See &lt;a href="https://progrhy.me/tech-notes/a/program/go/ecosystem/goreleaser/#homebrew-formula%E7%94%9F%E6%88%90">Golang &amp;gt; GoReleaser#Homebrew Formula生成&lt;/a>&lt;/p>
&lt;p>ひとまずbinq-ghで試してみたところ、上手く行った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/progrhyme/homebrew-taps/commit/fa4b730603f2a350220a4d345c4b2c4a245c60ca">https://github.com/progrhyme/homebrew-taps/commit/fa4b730603f2a350220a4d345c4b2c4a245c60ca&lt;/a> &amp;hellip; GoReleaserによるFormula更新&lt;/li>
&lt;li>&lt;a href="https://github.com/binqry/binq-gh/commit/e7012eb2f8dc72777c2ee4ee0fbfc45151e90f41">.goreleaser.ymlとGitHub Actionsの設定変更&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>homepage&lt;/code> の設定が漏れて空になってしまったが、修正済み。&lt;/p>
&lt;p>この後、binqとshelpも同様の設定を入れたので、もう手動でFormulaを更新する必要はなくなると思われる。&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>これ用に新しくPersonal Access Tokenを払い出した。公開リポジトリを更新するだけなので、権限は &lt;code>repo:public_repo&lt;/code> のみでOK
&lt;ul>
&lt;li>参考: &lt;a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/">Understanding scopes for OAuth Apps | GitHub Developer Guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secretの設定でこのAccess Tokenの名前に初め &lt;code>GITHUB_TOKEN_HOMEBREW_TAP&lt;/code> と付けようとしたら、エラーで設定できなかった。GitHubの仕様っぽい（？）&lt;/li>
&lt;/ul>
&lt;h2 id="719">7/19&lt;/h2>
&lt;h3 id="ubuntu-1804---2004-ltsにアップグレード">Ubuntu 18.04 -&amp;gt; 20.04 LTSにアップグレード&lt;/h3>
&lt;p>普段使いのデスクトップPCでアップグレードを行った。&lt;br>
7月に入ったらやろうと思っていたが、binqの開発を優先していたりして、今になった。&lt;/p>
&lt;p>参考にした記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.imuza.com/entry/ubuntu2004">Ubuntu 20.04 LTS にアップグレード - IMUZA.com&lt;/a>&lt;/li>
&lt;li>公式Wiki（日本語） &lt;a href="https://wiki.ubuntu.com/FocalFossa/ReleaseNotes/Ja">FocalFossa/ReleaseNotes/Ja - Ubuntu Wiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/hitobb/items/2ee9b1c2c49760976e0f">Ubuntu 18.04(LTS)→20.04(LTS)アップグレード方法 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前回（18.04アップグレード時）のログ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/2018/20180922/#ubuntu-1804-lts%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89">2018-09-22#Ubuntu 18.04 LTSにアップグレード&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以下、実施手順。&lt;/p>
&lt;h4 id="アップグレード実施手順と詳細">アップグレード実施手順と詳細&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo apt update
sudo apt upgrade
sudo apt autoremove
&lt;/code>&lt;/pre>&lt;/div>&lt;p>※実際はパッケージは最新状態だったので、上のコマンド実行は不要だったと思われる。&lt;/p>
&lt;p>GUIの「ソフトウェアの更新」を確認したところ、Ubuntuの新バージョンの通知（LTS）は有効になっていたが、まだ通知は来ていなかった。&lt;/p>
&lt;p>結局、1つ目の参考記事に従い、「Alt + F2」を押した後、フォームに &lt;code>update-manager -c -d&lt;/code> を入力してEnterを押すと、20.04 LTSへのアップグレードが可能になった。&lt;/p>
&lt;p>新規追加されるパッケージが1,800弱あり、1時間弱は掛かった気がする。&lt;/p>
&lt;h5 id="etcsysctlconfのリセット">/etc/sysctl.confのリセット&lt;/h5>
&lt;p>途中でダイアログが出てきて、「なんかカスタマイズされてるけど、リセットしてもいい？」みたいなことを聞かれた。&lt;/p>
&lt;p>何やってたっけと思ってdiffを見ると、VS Codeで変更検知するために &lt;code>fs.inotify.max_user_watches&lt;/code> を引き上げていたのだった。&lt;br>
リセットによる差分はコメント行の変更しかなかったので、そのままにしておいてもらった。&lt;/p>
&lt;h4 id="アップグレード後の作業">アップグレード後の作業&lt;/h4>
&lt;h5 id="etcaptsourceslistの確認">/etc/apt/sources.listの確認&lt;/h5>
&lt;p>なんかアップグレード中に「デフォルトじゃないやつは無効にするから、必要なら後で足してね」みたいなメッセージがあったので、確認した。&lt;br>
元のやつは sources.list.save として残っているようだった。&lt;br>
差分を見たが特に独自に足したものはなかったようだったので、何もしない。&lt;br>
Dockerかpecoか何かで弄ってなかったっけ？&lt;/p>
&lt;h5 id="設定--外観">設定 &amp;gt; 外観&lt;/h5>
&lt;ul>
&lt;li>ダークモードが選べたので、それにした。&lt;/li>
&lt;li>アイコンサイズが小さくなってちょっと見づらかったので少し大きくした。&lt;/li>
&lt;/ul>
&lt;h5 id="テキストエディタ">テキストエディタ&lt;/h5>
&lt;p>中身はいつものgedit.&lt;br>
ダークモードにしたせいかカーソル位置が見づらくなったので、カラースキームをSolarized Lightにした。&lt;br>
ついでにフォントを見慣れたRoboto Mono for Powerlineに変えた。&lt;/p>
&lt;h5 id="xkbキーマップの設定">xkbキーマップの設定&lt;/h5>
&lt;p>いつものキーマップ変更:&lt;/p>
&lt;ul>
&lt;li>「変換」 -&amp;gt; 「全角/半角」&lt;/li>
&lt;li>「無変換」 -&amp;gt; 「Esc」&lt;/li>
&lt;li>「Esc」 -&amp;gt; 「無変換」&lt;/li>
&lt;li>「全角/半角」 -&amp;gt; 「変換」&lt;/li>
&lt;/ul>
&lt;p>設定手順: &lt;a href="https://keyamb.hatenablog.com/entry/2016/06/04/130022">Ubuntu + xkb で JISキーボードのキー配置入れ替え - weblog of key_amb&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 設定ファイルの編集&lt;/span>
$ sudo vim /usr/share/X11/xkb/symbols/inet
&lt;span style="color:#8f5902;font-style:italic"># 設定の反映&lt;/span>
$ setxkbmap -layout jp,us
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何かあればまたここに追記するかも。&lt;/p>
&lt;h3 id="slackアプリなどについて少し調べて触った">Slackアプリなどについて少し調べて触った&lt;/h3>
&lt;p>Slackアプリを作ったことがなかったが、Incoming WebhookもSlackアプリへの移行が推奨されているので、そろそろ多少はわかっておきたいと思った。&lt;/p>
&lt;p>やったこと:&lt;/p>
&lt;ul>
&lt;li>適当にアプリを作ってIncoming Webhookを有効にしてcurlでメッセージをPOST&lt;/li>
&lt;/ul>
&lt;p>これは思っていたよりずっと簡単だった。&lt;br>
Single-Workspaceで使うだけなら、あまり考えるべきことはなさそう。&lt;/p>
&lt;p>その他、調べたことは&lt;a href="https://progrhy.me/tech-notes/a/web-service/slack/">Webサービス &amp;gt; Slack&lt;/a>にまとめた。&lt;/p>
&lt;p>メモ:&lt;/p>
&lt;ul>
&lt;li>GASでもOAuth 2.0に対応したエンドポイント（redirect url等）をそれっぽく作れば配布可能なアプリは作れそうな気がする&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-07-12</title><link>https://progrhy.me/tech-notes/a/memo/20200712/</link><pubDate>Sun, 12 Jul 2020 01:44:36 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200712/</guid><description>
&lt;h2 id="712">7/12&lt;/h2>
&lt;h3 id="hugoでmemo用のarchetypeを作る">Hugoでmemo用のarchetypeを作る&lt;/h3>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/static-site-generator/hugo/#archetypes">Hugo#Archetypes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>上手く行ったパターン①:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ dateFormat &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; .Date }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">linkTitle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ dateFormat &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; .Date }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">date&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">.Date }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在日時から日付を作る場合は上で良いが、たまに昨日のメモとか作りたくなることがあるので、ファイル名を元に作るようにした。&lt;/p>
&lt;p>上手く行ったパターン②:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr .Name 0 4 }}-{{ substr .Name 4 2 }}-{{ substr .Name 6 2 }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">linkTitle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr .Name 0 4 }}-{{ substr .Name 4 2 }}-{{ substr .Name 6 2 }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">date&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{{&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">.Date }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">---&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>工夫すればもう少しすっきり書けるかもしれない。&lt;/p>
&lt;p>駄目だったパターン:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#8f5902;font-style:italic"># Hugoのリファレンスに載ってるのにエラーになる。 .Dateが文字列扱いで、 .Format ってメソッドはない的な&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ .Date.Format &amp;#34;&lt;/span>&lt;span style="color:#000">2006-01-02&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># sprigのリファレンスを見たらこれが正しいかと思ったが、Hugoだと違った&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ substr 0 3 .Name }}-{{ substr 4 5 .Name }}-{{ substr 6 7 .Name }}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/functions/format/">https://gohugo.io/functions/format/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/functions/substr/">https://gohugo.io/functions/substr/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://masterminds.github.io/sprig/strings.html">http://masterminds.github.io/sprig/strings.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="binqのメタデータサーバによるメタデータの公開は著作権やライセンス侵害にあたるのか">binqのメタデータサーバによるメタデータの公開は著作権やライセンス侵害にあたるのか？&lt;/h3>
&lt;p>少し前から作っていたbinqについて、先ほどようやくブログを書くことができた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-progrhyme.hatenablog.com/entry/2020/07/binq-v0.6.1">GitHub Pagesをメタデータサーバとする簡易インストーラー「binq」をGo言語で作った - progrhyme&amp;rsquo;s tech blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>「免責事項」として書いたのだけど、こういうメタデータの収集・公開が著作権やライセンス侵害に当たるのかが気になったので、少し調べた。&lt;/p>
&lt;p>あまりそのものズバリな事例はないのだけど、少なくとも、元々コピーや再配布を許可しているライセンスで問題になることはないだろう。&lt;/p>
&lt;p>ゆるいOSSライセンスはそういうものもある。&lt;/p>
&lt;p>逆に、著作権法上の「公表権」や「頒布権」を理由に、「絶対に自分のHPに来てダウンロードしなきゃ駄目」みたいに書いているソフトウェアがあったら、それをbinqのインデックスに載せると怒られるかもしれない。&lt;br>
そもそもインターネットにOSSとして公開しているソフトウェアで、そんな風に書いているものがあるのか知らないが。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.vector.co.jp/for_users/study/chosakuken.html">フリーソフト、シェアウェアの基礎知識 - フリーソフトの著作権&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://e-words.jp/w/%E5%86%8D%E9%85%8D%E5%B8%83.html">再配布（二次配布）とは - IT用語辞典 e-Words&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://onm-tm.jp/news/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E7%AD%89%E3%81%AE%E8%91%97%E4%BD%9C%E6%A8%A9%E5%95%8F%E9%A1%8C%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E7%94%A8%E8%AA%9E%E3%81%AB%E3%81%A4%E3%81%84/">ソフトウェア等の著作権問題に関する用語について（用語解説） | 大島・西村・宮永商標特許事務所&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q10110939465">ソフトウェアの二次配布禁止する理由について質問です。 - 出来たらこの&amp;hellip; - Yahoo!知恵袋&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="goで任意の処理の出力を構造化データとして上手く扱いたい">Goで任意の処理の出力を構造化データとして上手く扱いたい&lt;/h3>
&lt;p>構造体だったら &lt;code>fmt.Printf(&amp;quot;%+v&amp;quot;, x)&lt;/code> とやればある程度きれいに出力できるけど、それをもっと汎用的にできると嬉しいかなというところ。&lt;/p>
&lt;p>背景として、最近はCLIでも構造化されたデータを色んなフォーマットで出力できることがクールになってる、というのがある。&lt;/p>
&lt;p>kubectl然り、Google Cloud SDK然り、AWS SDK然り。&lt;br>
最近の事例だと、Rust製のnushellでは、デフォルトでコマンドの出力結果がテーブルになっており、パイプによってコマンド間でデータの受け渡しが可能になっている。&lt;/p>
&lt;p>nushellの実装がどうなっているのかは見てないけど、まあなんかそんな感じでやりたい。&lt;/p>
&lt;p>サンプルとして参考になりそうな候補:&lt;/p>
&lt;ul>
&lt;li>Kubernetes
&lt;ul>
&lt;li>追ってみたところ、&lt;a href="https://pkg.go.dev/k8s.io/apimachinery/pkg/runtime">k8s.io/apimachinery/pkg/runtime&lt;/a>が汎用データ型及びプロセッサっぽい。単独では使いづらい気がするんだけど、めちゃimportされているのはコアなライブラリだからか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>クラウドのSDKとか…まだ見てない&lt;/li>
&lt;li>logger系
&lt;ul>
&lt;li>hashedhyphenさんに「zapはどう？」と言われたので少し見てみたけど、やはりロギングに比重が置かれている感じで、ちょっとユースケースが限定されすぎている感がある&lt;/li>
&lt;li>後でもう一度見直したところ、内部に抽象データ型があるので使えるかもしれないと思った。が、それはやはりロギングに最適化されたデータ構造で、汎用的な用途で使うにはどうしたらいいかわからなかった。&lt;/li>
&lt;li>&lt;a href="https://github.com/fluent/fluent-logger-golang">fluent/fluent-logger-golang&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/fluent/fluent-logger-golang/fluent">https://pkg.go.dev/github.com/fluent/fluent-logger-golang/fluent&lt;/a>&lt;/li>
&lt;li>↓のmsgpackのインタフェースを使っている&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/tinylib/msgp/msgp">https://pkg.go.dev/github.com/tinylib/msgp/msgp&lt;/a>
&lt;ul>
&lt;li>コードジェネレータのヘルパーと書いてあるけど、普通にシリアライザ・デシリアライザの機能を持つ。&lt;/li>
&lt;li>真面目にやるとこのぐらいは必要だよなぁという感想&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://awesome-go.com/">Awesome Go&lt;/a>で見つけたやつ:
&lt;ul>
&lt;li>Data Structureカテゴリだと、アルゴリズム系ばかりが見つかる。&lt;/li>
&lt;li>&lt;a href="https://github.com/mickep76/encoding">https://github.com/mickep76/encoding&lt;/a> &amp;hellip; これは自分が目指しているものに近い気がする。WIPって感じがするけど&lt;/li>
&lt;li>&lt;a href="https://github.com/bndr/gotabulate">https://github.com/bndr/gotabulate&lt;/a> &amp;hellip; テーブル形式で出力してくれる君。2次元のデータにしか対応してない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>今回の話と関係ないけど、調べている途中で目に入って気になったライブラリ:&lt;/p>
&lt;ul>
&lt;li>kubernetes関係を見ているときに&lt;a href="https://pkg.go.dev/k8s.io/klog">k8s.io/klog&lt;/a>というロギングライブラリを見つけた。今回の用途には向かないが、依存がなくて割とシンプルなレベル付きロガーなので、使いやすいシチュエーションもあるかも（Google寄りなライブラリ）&lt;/li>
&lt;li>&lt;a href="https://github.com/mvdan/sh">https://github.com/mvdan/sh&lt;/a> &amp;hellip; 全然関係ないけどawesome-goで目に入った。shfmtとかgosh (PoC)が入ってる&lt;/li>
&lt;/ul>
&lt;h4 id="実験で作ったdfmtというもの">実験で作ったdfmtというもの&lt;/h4>
&lt;p>&lt;a href="https://github.com/progrhyme/experiments/tree/master/go/dfmt">https://github.com/progrhyme/experiments/tree/master/go/dfmt&lt;/a>&lt;/p>
&lt;p>ちょっとまだ道筋が見えない。&lt;/p></description></item><item><title>A: 2020-06-26</title><link>https://progrhy.me/tech-notes/a/memo/20200626/</link><pubDate>Fri, 26 Jun 2020 15:58:18 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200626/</guid><description>
&lt;h2 id="626">6/26&lt;/h2>
&lt;h3 id="mysqlコマンドでmycnfが指定できないできた">mysqlコマンドでmy.cnfが指定できない→できた&lt;/h3>
&lt;p>&lt;code>--defaults-file&lt;/code> オプションで指定できるらしいが、エラーになる。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ mysql -h mysql -u&lt;span style="color:#000">$USER&lt;/span> -p&lt;span style="color:#000">$PASS&lt;/span> --defaults-extra-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>path/to/my.cnf
mysql: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ERROR&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> unknown variable &lt;span style="color:#4e9a06">&amp;#39;defaults-extra-file=path/to/my.cnf&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このオプションは最初に指定しないといけないらしい。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ mysql --defaults-extra-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>path/to/my.cnf -h mysql -u&lt;span style="color:#000">$USER&lt;/span> -p&lt;span style="color:#000">$PASS&lt;/span>
mysql&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/mysql/#cli-options">MySQL#CLI-Options&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/xiaopihang/items/b6242182b9d22bab7620">MySQLメモ - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker-registry-apiを叩いてtag検索するcliを作った">docker registry APIを叩いてtag検索するCLIを作った&lt;/h3>
&lt;p>※追記: &lt;a href="https://github.com/genuinetools/reg">https://github.com/genuinetools/reg&lt;/a> を使ったほうがいいと気づいた。&lt;/p>
&lt;p>dockerコマンドでは取れないので、curlコマンドをラップするコマンドを作った。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/toolbox/blob/master/bin/docker-search-tags">https://github.com/progrhyme/toolbox/blob/master/bin/docker-search-tags&lt;/a>&lt;/p>
&lt;p>V2 APIを使ったほうがいいんだろうけど、認証とか面倒だったのでとりあえずV1で。&lt;/p>
&lt;p>関連項目:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/software/docker/#api">Docker &amp;gt; Registry#API&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020 archive</title><link>https://progrhy.me/tech-notes/a/memo/2020/</link><pubDate>Wed, 01 Jan 2020 15:38:43 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2020/</guid><description/></item><item><title>A: 2018 archive</title><link>https://progrhy.me/tech-notes/a/memo/2018/</link><pubDate>Mon, 01 Jan 2018 16:05:34 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/2018/</guid><description/></item></channel></rss>