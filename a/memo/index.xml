<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-04-29</title><link>https://progrhy.me/tech-notes/a/memo/20200429/</link><pubDate>Wed, 29 Apr 2020 10:49:46 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200429/</guid><description>
&lt;h2 id="429">4/29&lt;/h2>
&lt;h3 id="ubuntu-1804でintellij-ideaを20201にアップデート">Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート&lt;/h3>
&lt;p>久しぶりに起動したらアップデートする必要があった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2018/20180331#TOC-Ubuntu-16.04-IntelliJ-IDEA-">2018.1にアップデートしたときのログ&lt;/a>&lt;/p>
&lt;p>上と同じ手順で行けた。
以下はログ。&lt;/p>
&lt;p>tar.gzをダウンロードして解凍し、 &lt;code>$HOME/vendor/&lt;/code> に配置。
&lt;code>idea-IC -&amp;gt; idea-IC-181.4203.550&lt;/code> とsymlinkしていたので、付け替える。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">cd&lt;/span> ~/vendor
rm idea-IC
ln -s idea-IC-201.6668.121 idea-IC
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.local/share/applications/jetbrains-idea-ce.desktop&lt;/code> を次のように編集:&lt;/p>
&lt;pre>&lt;code>[Desktop Entry]
Version=2020.1.0
Type=Application
Name=IntelliJ IDEA Community Edition
Icon=$HOME/vendor/idea-IC/bin/idea.png
Exec=&amp;quot;$HOME/vendor/idea-IC/bin/idea.sh&amp;quot; %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=jetbrains-idea-ce
&lt;/code>&lt;/pre>&lt;p>※ &lt;code>$HOME&lt;/code> は展開して書き替えないといけないかも。&lt;/p>
&lt;h3 id="ubuntuに昔入れたminikubeをuninstall">Ubuntuに昔入れたminikubeをUninstall&lt;/h3>
&lt;p>localkubeというdaemonが動いていることに気がついたのがきっかけだけど、2〜3年使っていないので掃除することにした。&lt;/p>
&lt;p>実行したコマンド:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo systemctl stop localkube
sudo systemctl disable localkube
docker system prune
rm -rf ~/.minikube
sudo rm /usr/local/bin/localkube /usr/local/bin/minikube
sudo rm -rf /etc/kubernetes/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2017/20171118#TOC-Ubuntu-Minikube-">2017年の作業ログ&lt;/a>によると、dpkgで入れたみたいなんだけど、 &lt;code>dpkg -l&lt;/code> しても出てこなかった。はて。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@yudapramad/uninstall-minikube-5c032a7dd44f">Uninstall Minikube - yuda prama - Medium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/minikube/issues/1043">How to uninstall? · Issue #1043 · kubernetes/minikube&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mdbookについて少し機能を調べた">mdBookについて少し機能を調べた&lt;/h3>
&lt;p>&lt;a href="https://rust-lang.github.io/mdBook/">https://rust-lang.github.io/mdBook/&lt;/a>&lt;/p>
&lt;p>Rust製のGitBookみたいなもの。
高速でよさそう。&lt;/p>
&lt;p>MEMO:&lt;/p>
&lt;ul>
&lt;li>config: &lt;a href="https://rust-lang.github.io/mdBook/format/config.html">https://rust-lang.github.io/mdBook/format/config.html&lt;/a>&lt;/li>
&lt;li>サイドバーに目次ツリーが表示されているが、 &lt;code>[output.html.fold]&lt;/code> で挙動を変えられそう。
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/pull/1027">https://github.com/rust-lang/mdBook/pull/1027&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>目次（Table of Contents）は公式サポートないのかも。イシューになってる
&lt;ul>
&lt;li>&lt;code>{{#toc}}{{/toc}}&lt;/code> で行けるんじゃないのかな？
&lt;ul>
&lt;li>&lt;a href="https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc">https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/issues/153">https://github.com/rust-lang/mdBook/issues/153&lt;/a>&lt;/li>
&lt;li>自作している人がいる
&lt;ul>
&lt;li>&lt;a href="https://github.com/badboy/mdbook-toc">https://github.com/badboy/mdbook-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ubuntu-1804にhomebrewをインストール">Ubuntu 18.04にHomebrewをインストール&lt;/h3>
&lt;p>&lt;a href="https://github.com/tfutils/tfenv">tfutils/tfenv&lt;/a>を入れようと思ったんだけど、aptやsnapでのパッケージ提供がないようなので。&lt;/p>
&lt;p>&lt;a href="https://docs.brew.sh/Homebrew-on-Linux">https://docs.brew.sh/Homebrew-on-Linux&lt;/a> のガイドに従ってインストール。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">/bin/bash -c &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>インストールログ&lt;/summary>
&lt;pre>&lt;code>% /bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot;
[sudo] パスワード:
==&amp;gt; This script will install:
/home/linuxbrew/.linuxbrew/bin/brew
/home/linuxbrew/.linuxbrew/share/doc/homebrew
/home/linuxbrew/.linuxbrew/share/man/man1/brew.1
/home/linuxbrew/.linuxbrew/share/zsh/site-functions/_brew
/home/linuxbrew/.linuxbrew/etc/bash_completion.d/brew
/home/linuxbrew/.linuxbrew/Homebrew
==&amp;gt; The following new directories will be created:
/home/linuxbrew/.linuxbrew/bin
/home/linuxbrew/.linuxbrew/etc
/home/linuxbrew/.linuxbrew/include
/home/linuxbrew/.linuxbrew/lib
/home/linuxbrew/.linuxbrew/sbin
/home/linuxbrew/.linuxbrew/share
/home/linuxbrew/.linuxbrew/var
/home/linuxbrew/.linuxbrew/opt
/home/linuxbrew/.linuxbrew/share/zsh
/home/linuxbrew/.linuxbrew/share/zsh/site-functions
/home/linuxbrew/.linuxbrew/var/homebrew
/home/linuxbrew/.linuxbrew/var/homebrew/linked
/home/linuxbrew/.linuxbrew/Cellar
/home/linuxbrew/.linuxbrew/Caskroom
/home/linuxbrew/.linuxbrew/Homebrew
/home/linuxbrew/.linuxbrew/Frameworks
Press RETURN to continue or any other key to abort
:
（略
:
Warning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.
==&amp;gt; Installation successful!
==&amp;gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.
Read the analytics documentation (and how to opt-out) here:
https://docs.brew.sh/Analytics
No analytics data has been sent yet (or will be during this `install` run).
==&amp;gt; Homebrew is run entirely by unpaid volunteers. Please consider donating:
https://github.com/Homebrew/brew#donations
==&amp;gt; Next steps:
- Run `brew help` to get started
- Further documentation:
https://docs.brew.sh
- Install the Homebrew dependencies if you have sudo access:
Debian, Ubuntu, etc.
sudo apt-get install build-essential
Fedora, Red Hat, CentOS, etc.
sudo yum groupinstall 'Development Tools'
See https://docs.brew.sh/linux for more information.
- Configure Homebrew in your /home/quiche/.zprofile by running
echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &amp;gt;&amp;gt; /home/quiche/.zprofile
- Add Homebrew to your PATH
eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
- We recommend that you install GCC by running:
brew install gcc
&lt;/code>&lt;/pre>&lt;/details>
&lt;p>&lt;/p>
&lt;p>上のログ末尾のガイドに従い、 &lt;code>~/.zshrc&lt;/code> に &lt;code>eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&lt;/code> を足した。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/myenv/commit/09212479eead413fc9092a069bb04e948d4e8263">こんな感じ&lt;/a>で実現。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://code-log.hatenablog.com/entry/2019/05/23/092851">Homebrew on Linuxをubuntuにインストールする - code-log&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="homebrew-bundleでhomebrewのパッケージ管理">Homebrew BundleでHomebrewのパッケージ管理&lt;/h3>
&lt;p>&lt;a href="https://github.com/Homebrew/homebrew-bundle">https://github.com/Homebrew/homebrew-bundle&lt;/a>&lt;/p>
&lt;p>Homebrewのパッケージ管理ツールはいくつかあるっぽいが、公式のこれがLinuxにも対応していたので、これを使う。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew bundle
&lt;/code>&lt;/pre>&lt;/div>&lt;p>を初回実行するとインストールされる。&lt;/p>
&lt;p>Brewfileを作って &lt;code>~/.Brewfile&lt;/code> にsymlinkし、 &lt;code>brew bundle&lt;/code> コマンドを &lt;code>--global&lt;/code> オプション付きで実行すればいい。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/vochicong/items/f20afc89a6847cd58f0f">brew bundleでMacのアプリをまとめてインストール・管理 - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-28</title><link>https://progrhy.me/tech-notes/a/memo/20200428/</link><pubDate>Tue, 28 Apr 2020 13:16:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200428/</guid><description>
&lt;h1 id="428">4/28&lt;/h1>
&lt;h2 id="macでanyenv経由のnodenv経由でnodejsを入れてみた">Macでanyenv経由のnodenv経由でNode.jsを入れてみた&lt;/h2>
&lt;p>以前はnodebrewを使っていたのだけど、anyenv押しの記事を見たので。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ucan-lab/items/ce35bcaf2562054917a8">Homebrew 経由の anyenv 経由の nodenv 経由で Node.js をインストールする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nodenv/nodenv">https://github.com/nodenv/nodenv&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>anyenv install&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew install anyenv
anyenv init
&lt;span style="color:#8f5902;font-style:italic"># 指示に従う&lt;/span>
vi .zshrc
&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; eval &amp;#34;$(anyenv init -)&amp;#34; をいい感じに足す&lt;/span>
&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#000">$SHELL&lt;/span> -l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>nodenv install&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">anyenv install nodenv
&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>nodenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
nodenv install 12.16.2
nodenv global 12.16.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>eval &amp;quot;$(nodenv init -)&amp;quot;&lt;/code> はインストール後に1度だけ実行が必要そう。&lt;br>
でないと、 &lt;code>~/.anyenv/envs/nodenv/shims/&lt;/code> 以下に実行ファイルができないっぽい。（ちょっとハマった。）&lt;/p></description></item><item><title>A: 2020-04-27</title><link>https://progrhy.me/tech-notes/a/memo/20200427/</link><pubDate>Mon, 27 Apr 2020 23:52:42 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200427/</guid><description>
&lt;h2 id="427">4/27&lt;/h2>
&lt;h3 id="cloud-build--terraformでインフラcicd">Cloud Build + TerraformでインフラCI/CD&lt;/h3>
&lt;p>参考記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/solutions/managing-infrastructure-as-code?hl=ja">Terraform、Cloud Build、GitOps を使用してインフラストラクチャをコードとして管理する | ソリューション&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/google-cloud/infrastructure-as-code-introduction-to-continuous-spark-cluster-deployment-with-cloud-build-and-9798a776bbb0">Infrastructure as Code: Introduction to Continuous Spark Cluster Deployment with Cloud Build and Terraform&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="bitbucket-pipelines--terraform">Bitbucket Pipelines + Terraform&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.slideshare.net/MasatomoIto/terraform-with-bitbucket-pipeline">Terraform with Bitbucket pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nicksantamaria.net/post/self-deploying-site-hugo-terraform-bitbucket-pipelines/">How to build self-deploying applications with Terraform and BitBucket Pipelines. | Nick Santamaria&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tfnotify対応">tfnotify対応&lt;/h4>
&lt;p>&lt;code>help wanted&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://github.com/mercari/tfnotify/issues/36">Support Bitbucket Pipelines · Issue #36 · mercari/tfnotify&lt;/a>&lt;/p>
&lt;h4 id="gcp対応">GCP対応&lt;/h4>
&lt;p>terraformのDockerイメージを使って、下の要領で認証情報を渡してあげれば行けると思われる。&lt;/p>
&lt;h3 id="bitbucket-pipelinesでgcpに継続的デリバリ">Bitbucket PipelinesでGCPに継続的デリバリ&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/deploy-to-google-cloud-900820342.html">Deploy to Google Cloud - Atlassian Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.primitivesense.com/case-studies/ci-with-testing-and-deploying-google-cloud-functions-within-bitbucket-pipelines/">Testing &amp;amp; deploying Google Cloud Functions in BitBucket Pipelines | PrimitiveSense - Web Design Newcastle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/adilsoncarvalho/e0e8da81dbf52bf90c671887ef7e04d3">Bitbucket Pipelines deployment to a Google Container Engine configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@puuga/dev-story-deploy-to-gcp-cloud-run-with-bitbucket-pipelines-4fef8f2ece27">Dev Story: Deploy to GCP Cloud Run with Bitbucket Pipelines&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-25</title><link>https://progrhy.me/tech-notes/a/memo/20200425/</link><pubDate>Sat, 25 Apr 2020 23:20:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200425/</guid><description>
&lt;h2 id="425">4/25&lt;/h2>
&lt;h3 id="技術メモ用のサイトをhugoで新設することにした">技術メモ用のサイトをHugoで新設することにした&lt;/h3>
&lt;p>&lt;a href="https://gsuiteupdates-ja.googleblog.com/2019/02/google-google.html">来年末には旧版のGoogleサイトが使えなくなるそう&lt;/a>なので、早く移行しないとなー、と前々から思っていた。
今回、ようやく重い腰を上げた形。&lt;/p>
&lt;p>今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://raahii.github.io/posts/automating-hugo-builds-with-github-actions/">HugoのビルドをGithub Actionで自動化する - 1ミリもわからん&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>…で、前々から目をつけていたHugoのテーマ「&lt;a href="https://learn.netlify.com/en/">LEARN&lt;/a>」を使うことにした。&lt;/p>
&lt;p>Googleが去年公開した&lt;a href="https://www.docsy.dev/">Docsy&lt;/a>というテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。&lt;/p>
&lt;h3 id="learnで気に入らなかったところ">LEARNで気に入らなかったところ&lt;/h3>
&lt;p>少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。&lt;/p>
&lt;ul>
&lt;li>chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが）&lt;/li>
&lt;li>検索が妙にヒットしすぎる&lt;/li>
&lt;li>ページの目次がちょっとわかりにくい。慣れれば問題ないけど&lt;/li>
&lt;/ul>
&lt;h3 id="gitbookを試してみたけどoss版は先行きが微妙">GitBookを試してみたけど、OSS版は先行きが微妙&lt;/h3>
&lt;p>GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。&lt;/p>
&lt;p>詳しくは&lt;a href="../../software/gitbook">Software &amp;gt; GitBook&lt;/a>に書いた。&lt;/p>
&lt;p>手順:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">npm install -g gitbook-cli
mkdir new-docs
&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$_&lt;/span>
gitbook init
gitbook serve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考にした記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/mebiusbox2/items/938af4b0d0bf7a4d3e33">GitBookによるドキュメント作成 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://morizyun.github.io/blog/gitbook-github-pages-deploy/index.html">GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/mitsuhisaT/items/8668b70586b9605040bd">gitbookの使い方 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="結局docsyへ">結局、Docsyへ&lt;/h3>
&lt;p>&lt;a href="https://efcl.info/2017/12/26/docusaurus-almin/">azuさんがGitBookからDocusaurusに移行していた&lt;/a>ので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。&lt;/p>
&lt;h2 id="426">4/26&lt;/h2>
&lt;h3 id="プロフィールサイトのgulpがつらい">プロフィールサイトのgulpがつらい&lt;/h3>
&lt;p>昨日、Docsyを扱うにあたって、UbuntuマシンのNode.jsをv8 -&amp;gt; v12に上げた。&lt;/p>
&lt;h4 id="referenceerror-primordials-is-not-defined">ReferenceError: primordials is not defined&lt;/h4>
&lt;p>今日、プロフィールサイト &lt;a href="https://progrhy.me">https://progrhy.me&lt;/a> の編集をしようとそのまま作業していたら、次とほぼ同じ問題に遭遇した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hepokon365.hatenablog.com/entry/2019/10/31/022524">Node.js v12にアップデートするとgulp v4でもfs.jsで「ReferenceError: primordials is not defined」エラーが発生 - 毎日へっぽこ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分の環境で問題になったのは &lt;code>natives&lt;/code> module.&lt;/p>
&lt;pre>&lt;code>% gulp
fs.js:35
} = primordials;
^
ReferenceError: primordials is not defined
at fs.js:35:5
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
at Module._compile (internal/modules/cjs/loader.js:1156:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1176:10)
at Module.load (internal/modules/cjs/loader.js:1000:32)
at Function.Module._load (internal/modules/cjs/loader.js:899:14)
at Module.require (internal/modules/cjs/loader.js:1042:19)
at require (internal/modules/cjs/helpers.js:77:18)
&lt;/code>&lt;/pre>&lt;p>自分の場合も、上の記事と同じように、 &lt;code>package-lock.json&lt;/code> 内に &lt;code>graceful-fs&lt;/code> のv3系への依存があった。&lt;br>
また、依存の解消は難しいようだった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/20200424#TOC-Gulp-3---4-">前回の挑戦&lt;/a>から、gulpのバージョンアップは今のところ諦めているので、Node.jsのバージョンをv10系に下げることにした。&lt;/p>
&lt;h4 id="referenceerror-internalbinding-is-not-defined">ReferenceError: internalBinding is not defined&lt;/h4>
&lt;p>次に出くわしたのは下のエラー:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://narunaru7638.hatenablog.com/entry/2019/05/04/124621">gulp利用時に「ReferenceError: internalBinding is not defined」のエラー - なるの備忘録&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>% gulp
internal/util/inspect.js:31
const types = internalBinding('types');
^
ReferenceError: internalBinding is not defined
at internal/util/inspect.js:31:15
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at util.js:25:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at fs.js:42:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
&lt;/code>&lt;/pre>&lt;p>上の記事にあったように、 &lt;code>npm i natives@latest --no-save&lt;/code> を実行したら解消した。&lt;/p></description></item></channel></rss>