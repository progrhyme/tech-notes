<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – Memorandum</title><link>https://progrhy.me/tech-notes/a/memo/</link><description>Recent content in Memorandum on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/memo/index.xml" rel="self" type="application/rss+xml"/><item><title>A: 2020-05-02</title><link>https://progrhy.me/tech-notes/a/memo/20200502/</link><pubDate>Sat, 02 May 2020 00:06:02 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200502/</guid><description>
&lt;h2 id="52">5/2&lt;/h2>
&lt;h3 id="bitbucket-pipelinesでgcpに対してterraformを適用するには">Bitbucket PipelinesでGCPに対してTerraformを適用するには&lt;/h3>
&lt;p>必要なもの:&lt;/p>
&lt;ul>
&lt;li>必要な権限が付与されたService Account Key&lt;/li>
&lt;li>GCPで必要なAPIを有効化
&lt;ul>
&lt;li>操作対象のリソースによって異なる。以下は例:
&lt;ul>
&lt;li>Cloud Resource Manager API &amp;hellip; Service Accountの作成に必要だった&lt;/li>
&lt;li>Compute Engine API &amp;hellip; GCEインスタンス作成などで必要そう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>手順:&lt;/p>
&lt;ol>
&lt;li>Service Account Keyを作り、JSON形式で取得&lt;/li>
&lt;li>
&lt;ol>
&lt;li>をBitbucketのリポジトリ変数にsecure変数として設定。キーはなんでもいいが、ここでは &lt;code>GOOGLE_CREDENTIALS_DATA&lt;/code> とする。Base64化は不要&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>下のような &lt;code>bitbucket-pipelines.yml&lt;/code> を用意する&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>hashicorp/terraform&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.12.24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">definitions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">steps&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">&amp;amp;terraform-plan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>plan&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- echo&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${GOOGLE_CREDENTIALS_DATA}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&amp;gt;&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>service-account-key.json&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- export&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>GOOGLE_APPLICATION_CREDENTIALS=service-account-key.json&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>init&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-input=&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>plan&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-input=&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">&amp;amp;terraform-apply&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>apply&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- echo&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${GOOGLE_CREDENTIALS_DATA}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&amp;gt;&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>service-account-key.json&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- export&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>GOOGLE_APPLICATION_CREDENTIALS=service-account-key.json&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>init&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-input=&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- terraform&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>apply&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-input=&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>--auto-approve&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pipelines&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">branches&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;**&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-plan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">master&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-plan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-apply&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">trigger&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>manual&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上は、masterを除く任意のbranchに対する更新で &lt;code>terraform plan&lt;/code> を実行し、master branchにおいては、 &lt;code>terraform plan&lt;/code> を自動実行した後、マニュアルで &lt;code>terraform apply&lt;/code> を実行する。&lt;/p>
&lt;p>branch更新でなく、プルリクエスト駆動にすることもできる。&lt;br>
上の例で、 &lt;code>pipelines&lt;/code> 以下のみ、次のように変更してみる:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#204a87;font-weight:bold">pipelines&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pull-requests&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">feature/*&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-plan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">branches&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">master&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-plan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">step&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">*terraform-apply&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">trigger&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>manual&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで、 &lt;code>feature/*&lt;/code> にマッチするbranchからのPRにより、 &lt;code>terraform plan&lt;/code> が実行される。&lt;br>
PRした後、branchを更新すればパイプラインが再実行される。&lt;/p>
&lt;p>任意のbranchによるPRを対象にしたい場合は、 &lt;code>feature/*&lt;/code> の代わりに &lt;code>'**'&lt;/code> と記せば良い。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ja.confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html">bitbucket-pipelines.yml の設定 - アトラシアン製品ドキュメント&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ja.confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html">YAML アンカー - アトラシアン製品ドキュメント&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/20200501/#ci%E3%81%A7gcp%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6terraform%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF">2020-05-01に調べたログ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/web-service/bitbucket/">Bitbucketについてのメモ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="yamlで配列のマージはできなさそう">YAMLで配列のマージはできなさそう&lt;/h3>
&lt;p>ハッシュのマージはアンカーとエイリアスでできるのだけど、配列のマージはできなさそう。&lt;/p>
&lt;p>参考: &lt;a href="https://stackoverflow.com/questions/24090177/how-to-merge-yaml-arrays">list - How to merge YAML arrays? - Stack Overflow&lt;/a>&lt;/p>
&lt;p>配列の1つ1つの要素にアンカーを付けて、再利用することは可能。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">- &lt;span style="color:#8f5902;font-style:italic">&amp;amp;mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>foo&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- bar&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#8f5902;font-style:italic">*mark&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;foo&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考: &lt;a href="https://magazine.rubyist.net/articles/0009/0009-YAML.html#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9">プログラマーのための YAML 入門 (初級編)&lt;/a>&lt;/p>
&lt;h3 id="dangerはbitbucketにどのように対応しているか">DangerはBitbucketにどのように対応しているか&lt;/h3>
&lt;p>tfnotifyをBitbucketに対応させたいなーと思いながら、参考にできるかなと思って見ていた。&lt;/p>
&lt;p>CIサーバからBitbucketのREST APIを叩いているようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danger/danger/pull/481/files">Bitbucket Server by HeEAaD · Pull Request #481 · danger/danger&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danger.systems/js/usage/bitbucket_cloud.html">Danger + BitBucket Cloud&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-05-01</title><link>https://progrhy.me/tech-notes/a/memo/20200501/</link><pubDate>Fri, 01 May 2020 01:34:48 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200501/</guid><description>
&lt;h2 id="51">5/1&lt;/h2>
&lt;h3 id="ciでgcpに対してterraformするには">CIでGCPに対してTerraformするには&lt;/h3>
&lt;p>&lt;del>サービスアカウントのキーをJSONで作って、 &lt;code>GOOGLE_CREDENTIALS&lt;/code> or &lt;code>GOOGLE_BACKEND_CREDENTIALS&lt;/code> 環境変数に渡せば良さそう。&lt;/del>
（事例によって異なる環境変数を使っていることがある。）&lt;/p>
&lt;p>&lt;a href="https://www.terraform.io/docs/backends/types/gcs.html">https://www.terraform.io/docs/backends/types/gcs.html&lt;/a>&lt;/p>
&lt;p>（追記） &lt;code>terraform plan&lt;/code> のときには&lt;a href="https://cloud.google.com/docs/authentication/production">Application Credentials&lt;/a>が必要になる。&lt;br>
GCS backend認証も上記の環境変数がない場合は、Application Credentialsにフォールバックするので、環境変数 &lt;code>GOOGLE_APPLICATION_CREDENTIALS&lt;/code> にキーファイルのパスを設定するのがよい。&lt;/p>
&lt;p>事例:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/MisaKondo/cb46b0ecd106e9c824a641b14954b8e1">TerraformによるGCP環境の管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/community/tutorials/managing-gcp-projects-with-terraform">Managing Google Cloud projects with Terraform&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.devsamurai.com/ja/gcp-terraform-101/">Terraformツールを使ってGCPリソース管理 | DevSamurai&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以前に調べたログ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://progrhy.me/tech-notes/a/memo/20200427/">2020-04-27&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tmuxのstatus-lineの色設定をいい感じにした">tmuxのstatus lineの色設定をいい感じにした&lt;/h3>
&lt;p>2ヶ月ちょっと前に .tmux.conf をv2.9+対応にしたのだけど、status lineの色設定がなんかイマイチになってたので調整した。&lt;/p>
&lt;p>&lt;a href="https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d">https://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d&lt;/a>&lt;/p>
&lt;p>だいぶややこしい設定になっていて、どこを変えればいいかよくわからなくなっていたのと、tmuxプロセスを全て終了しないと再読込みされないっぽかったので更に混乱した。&lt;br>
tmuxプロセスA内でconfを編集しながら、tmuxプロセスBを起動して見た目を確認していたが、それだとtmuxプロセスAの設定が引き継がれるような挙動だった。&lt;/p>
&lt;p>参考にしたページ:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/nojima/items/9bc576c922da3604a72b">tmux の status line の設定方法 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tokuhy/dotfiles/blob/master/.tmux.conf">dotfiles/.tmux.conf at master · tokuhy/dotfiles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="terraformでgcpのservice-account-keyを作成">TerraformでGCPのService Account Keyを作成&lt;/h3>
&lt;p>Qiitaにこういうエントリを上げた:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/progrhyme/items/8603c0f6e350734c1739">TerraformでGCPのService Account Keyを作成し、ローカルにファイルとして保存する - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>何度か実行して確かめたところ、次のことがわかった。&lt;/p>
&lt;ul>
&lt;li>Service Account Keyの内容はtfstateに保存される&lt;/li>
&lt;li>よって、local_fileに書き出すコードは後で足してもいいし、一度消しても復元できる&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-30</title><link>https://progrhy.me/tech-notes/a/memo/20200430/</link><pubDate>Thu, 30 Apr 2020 00:08:12 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200430/</guid><description>
&lt;h2 id="430">4/30&lt;/h2>
&lt;h3 id="ubuntuでhomebrewで入れたtfenvだとtfenv-installに失敗する">UbuntuでHomebrewで入れたtfenvだとtfenv installに失敗する&lt;/h3>
&lt;p>unzipで失敗する。&lt;/p>
&lt;p>デバッグしたところ、Homebrewの依存でインストールされたunzipが使われてしまうからのようだ。&lt;/p>
&lt;p>tfenvの &lt;code>libexec/helpers&lt;/code> 内に &lt;code>which unzip&lt;/code> を仕込んで確かめた。&lt;/p>
&lt;p>ログ:&lt;/p>
&lt;pre>&lt;code>% TFENV_DEBUG=true tfenv install 0.12.24
+ [tfenv:22] '[' -z '' ']'
++++ [tfenv:23] readlink_f /home/linuxbrew/.linuxbrew/bin/tfenv
:
（中略）
:
+ [tfenv-install:180] mkdir -p /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/versions/0.12.24
+ [tfenv-install:181] unzip tfenv_download.DtVL3N/terraform_0.12.24_linux_amd64.zip -d /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/version
s/0.12.24
UnZip 6.00 of 20 April 2009, by Debian. Original by Info-ZIP.
Usage: unzip [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir]
Default action is to extract files in list, except those in xlist, to exdir;
file[.zip] may be a wildcard. -Z =&amp;gt; ZipInfo mode (&amp;quot;unzip -Z&amp;quot; for usage).
-p extract files to pipe, no messages -l list files (short format)
-f freshen existing files, create none -t test compressed archive data
-u update files, create if necessary -z display archive comment only
-v list verbosely/show version info -T timestamp archive to latest
-x exclude files that follow (in xlist) -d extract files into exdir
modifiers:
-n never overwrite existing files -q quiet mode (-qq =&amp;gt; quieter)
-o overwrite files WITHOUT prompting -a auto-convert any text files
-j junk paths (do not make directories) -aa treat ALL files as text
-C match filenames case-insensitively -L make (some) names lowercase
-X restore UID/GID info -V retain VMS version numbers
-K keep setuid/setgid/tacky permissions -M pipe through &amp;quot;more&amp;quot; pager
See &amp;quot;unzip -hh&amp;quot; or unzip.txt for more help. Examples:
unzip data1 -x joe =&amp;gt; extract all files except joe from zipfile data1.zip
unzip -p foo | more =&amp;gt; send contents of foo.zip via pipe into program more
unzip -fo foo ReadMe =&amp;gt; quietly replace existing ReadMe if archive file newer
+ [tfenv-install:181] error_and_die 'Tarball unzip failed'
++ [helpers:4] basename /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/libexec/tfenv-install
+ [helpers:4] echo -e 'tfenv: tfenv-install: \033[0;31m[ERROR] Tarball unzip failed\033[0;39m'
tfenv: tfenv-install: [ERROR] Tarball unzip failed
+ [helpers:5] which unzip
/home/linuxbrew/.linuxbrew/bin/unzip
+ [helpers:6] exit 1
+ [helpers:1] rm -rf tfenv_download.DtVL3N
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>brew uninstall unzip --ignore-dependencies&lt;/code> した後、 &lt;code>tfenv install 0.12.24&lt;/code> したら成功した。&lt;/li>
&lt;li>&lt;code>/home/linuxbrew/.linuxbrew/bin/unzip some.zip -d somedir&lt;/code> は同じエラーで失敗する。&lt;/li>
&lt;li>&lt;code>/usr/bin/unzip some.zip -d somedir&lt;/code> は成功する。&lt;/li>
&lt;/ul>
&lt;p>単独でunzipコマンドを実行しても失敗しているので、Linuxbrewのunzipが壊れてるんだと思う。&lt;/p></description></item><item><title>A: 2020-04-29</title><link>https://progrhy.me/tech-notes/a/memo/20200429/</link><pubDate>Wed, 29 Apr 2020 10:49:46 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200429/</guid><description>
&lt;h2 id="429">4/29&lt;/h2>
&lt;h3 id="ubuntu-1804でintellij-ideaを20201にアップデート">Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート&lt;/h3>
&lt;p>久しぶりに起動したらアップデートする必要があった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2018/20180331#TOC-Ubuntu-16.04-IntelliJ-IDEA-">2018.1にアップデートしたときのログ&lt;/a>&lt;/p>
&lt;p>上と同じ手順で行けた。&lt;br>
以下はログ。&lt;/p>
&lt;p>tar.gzをダウンロードして解凍し、 &lt;code>$HOME/vendor/&lt;/code> に配置。&lt;br>
&lt;code>idea-IC -&amp;gt; idea-IC-181.4203.550&lt;/code> とsymlinkしていたので、付け替える。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">cd&lt;/span> ~/vendor
rm idea-IC
ln -s idea-IC-201.6668.121 idea-IC
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.local/share/applications/jetbrains-idea-ce.desktop&lt;/code> を次のように編集:&lt;/p>
&lt;pre>&lt;code>[Desktop Entry]
Version=2020.1.0
Type=Application
Name=IntelliJ IDEA Community Edition
Icon=$HOME/vendor/idea-IC/bin/idea.png
Exec=&amp;quot;$HOME/vendor/idea-IC/bin/idea.sh&amp;quot; %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=jetbrains-idea-ce
&lt;/code>&lt;/pre>&lt;p>※ &lt;code>$HOME&lt;/code> は展開して書き替えないといけないかも。&lt;/p>
&lt;h3 id="ubuntuに昔入れたminikubeをuninstall">Ubuntuに昔入れたminikubeをUninstall&lt;/h3>
&lt;p>localkubeというdaemonが動いていることに気がついたのがきっかけだけど、2〜3年使っていないので掃除することにした。&lt;/p>
&lt;p>実行したコマンド:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo systemctl stop localkube
sudo systemctl disable localkube
docker system prune
rm -rf ~/.minikube
sudo rm /usr/local/bin/localkube /usr/local/bin/minikube
sudo rm -rf /etc/kubernetes/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/2017/20171118#TOC-Ubuntu-Minikube-">2017年の作業ログ&lt;/a>によると、dpkgで入れたみたいなんだけど、 &lt;code>dpkg -l&lt;/code> しても出てこなかった。はて。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@yudapramad/uninstall-minikube-5c032a7dd44f">Uninstall Minikube - yuda prama - Medium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/minikube/issues/1043">How to uninstall? · Issue #1043 · kubernetes/minikube&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mdbookについて少し機能を調べた">mdBookについて少し機能を調べた&lt;/h3>
&lt;p>&lt;a href="https://rust-lang.github.io/mdBook/">https://rust-lang.github.io/mdBook/&lt;/a>&lt;/p>
&lt;p>Rust製のGitBookみたいなもの。&lt;br>
高速でよさそう。&lt;/p>
&lt;p>MEMO:&lt;/p>
&lt;ul>
&lt;li>config: &lt;a href="https://rust-lang.github.io/mdBook/format/config.html">https://rust-lang.github.io/mdBook/format/config.html&lt;/a>&lt;/li>
&lt;li>サイドバーに目次ツリーが表示されているが、 &lt;code>[output.html.fold]&lt;/code> で挙動を変えられそう。
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/pull/1027">https://github.com/rust-lang/mdBook/pull/1027&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>目次（Table of Contents）は公式サポートないのかも。イシューになってる
&lt;ul>
&lt;li>&lt;code>{{#toc}}{{/toc}}&lt;/code> で行けるんじゃないのかな？
&lt;ul>
&lt;li>&lt;a href="https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc">https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/issues/153">https://github.com/rust-lang/mdBook/issues/153&lt;/a>&lt;/li>
&lt;li>自作している人がいる
&lt;ul>
&lt;li>&lt;a href="https://github.com/badboy/mdbook-toc">https://github.com/badboy/mdbook-toc&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-28</title><link>https://progrhy.me/tech-notes/a/memo/20200428/</link><pubDate>Tue, 28 Apr 2020 13:16:17 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200428/</guid><description>
&lt;h1 id="428">4/28&lt;/h1>
&lt;h2 id="macでanyenv経由のnodenv経由でnodejsを入れてみた">Macでanyenv経由のnodenv経由でNode.jsを入れてみた&lt;/h2>
&lt;p>以前はnodebrewを使っていたのだけど、anyenv押しの記事を見たので。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/ucan-lab/items/ce35bcaf2562054917a8">Homebrew 経由の anyenv 経由の nodenv 経由で Node.js をインストールする - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/anyenv/anyenv">https://github.com/anyenv/anyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nodenv/nodenv">https://github.com/nodenv/nodenv&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>anyenv install&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">brew install anyenv
anyenv init
&lt;span style="color:#8f5902;font-style:italic"># 指示に従う&lt;/span>
vi .zshrc
&lt;span style="color:#8f5902;font-style:italic">#=&amp;gt; eval &amp;#34;$(anyenv init -)&amp;#34; をいい感じに足す&lt;/span>
&lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#000">$SHELL&lt;/span> -l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>nodenv install&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">anyenv install nodenv
&lt;span style="color:#204a87">eval&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>nodenv init -&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
nodenv install 12.16.2
nodenv global 12.16.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>eval &amp;quot;$(nodenv init -)&amp;quot;&lt;/code> はインストール後に1度だけ実行が必要そう。&lt;br>
でないと、 &lt;code>~/.anyenv/envs/nodenv/shims/&lt;/code> 以下に実行ファイルができないっぽい。（ちょっとハマった。）&lt;/p></description></item><item><title>A: 2020-04-27</title><link>https://progrhy.me/tech-notes/a/memo/20200427/</link><pubDate>Mon, 27 Apr 2020 23:52:42 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200427/</guid><description>
&lt;h2 id="427">4/27&lt;/h2>
&lt;h3 id="cloud-build--terraformでインフラcicd">Cloud Build + TerraformでインフラCI/CD&lt;/h3>
&lt;p>参考記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/solutions/managing-infrastructure-as-code?hl=ja">Terraform、Cloud Build、GitOps を使用してインフラストラクチャをコードとして管理する | ソリューション&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/google-cloud/infrastructure-as-code-introduction-to-continuous-spark-cluster-deployment-with-cloud-build-and-9798a776bbb0">Infrastructure as Code: Introduction to Continuous Spark Cluster Deployment with Cloud Build and Terraform&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="bitbucket-pipelines--terraform">Bitbucket Pipelines + Terraform&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.slideshare.net/MasatomoIto/terraform-with-bitbucket-pipeline">Terraform with Bitbucket pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nicksantamaria.net/post/self-deploying-site-hugo-terraform-bitbucket-pipelines/">How to build self-deploying applications with Terraform and BitBucket Pipelines. | Nick Santamaria&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="tfnotify対応">tfnotify対応&lt;/h4>
&lt;p>&lt;code>help wanted&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://github.com/mercari/tfnotify/issues/36">Support Bitbucket Pipelines · Issue #36 · mercari/tfnotify&lt;/a>&lt;/p>
&lt;h4 id="gcp対応">GCP対応&lt;/h4>
&lt;p>terraformのDockerイメージを使って、下の要領で認証情報を渡してあげれば行けると思われる。&lt;/p>
&lt;h3 id="bitbucket-pipelinesでgcpに継続的デリバリ">Bitbucket PipelinesでGCPに継続的デリバリ&lt;/h3>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/deploy-to-google-cloud-900820342.html">Deploy to Google Cloud - Atlassian Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.primitivesense.com/case-studies/ci-with-testing-and-deploying-google-cloud-functions-within-bitbucket-pipelines/">Testing &amp;amp; deploying Google Cloud Functions in BitBucket Pipelines | PrimitiveSense - Web Design Newcastle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/adilsoncarvalho/e0e8da81dbf52bf90c671887ef7e04d3">Bitbucket Pipelines deployment to a Google Container Engine configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@puuga/dev-story-deploy-to-gcp-cloud-run-with-bitbucket-pipelines-4fef8f2ece27">Dev Story: Deploy to GCP Cloud Run with Bitbucket Pipelines&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A: 2020-04-25</title><link>https://progrhy.me/tech-notes/a/memo/20200425/</link><pubDate>Sat, 25 Apr 2020 23:20:56 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200425/</guid><description>
&lt;h2 id="425">4/25&lt;/h2>
&lt;h3 id="技術メモ用のサイトをhugoで新設することにした">技術メモ用のサイトをHugoで新設することにした&lt;/h3>
&lt;p>&lt;a href="https://gsuiteupdates-ja.googleblog.com/2019/02/google-google.html">来年末には旧版のGoogleサイトが使えなくなるそう&lt;/a>なので、早く移行しないとなー、と前々から思っていた。
今回、ようやく重い腰を上げた形。&lt;/p>
&lt;p>今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://raahii.github.io/posts/automating-hugo-builds-with-github-actions/">HugoのビルドをGithub Actionで自動化する - 1ミリもわからん&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>…で、前々から目をつけていたHugoのテーマ「&lt;a href="https://learn.netlify.com/en/">LEARN&lt;/a>」を使うことにした。&lt;/p>
&lt;p>Googleが去年公開した&lt;a href="https://www.docsy.dev/">Docsy&lt;/a>というテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。&lt;/p>
&lt;h3 id="learnで気に入らなかったところ">LEARNで気に入らなかったところ&lt;/h3>
&lt;p>少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。&lt;/p>
&lt;ul>
&lt;li>chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが）&lt;/li>
&lt;li>検索が妙にヒットしすぎる&lt;/li>
&lt;li>ページの目次がちょっとわかりにくい。慣れれば問題ないけど&lt;/li>
&lt;/ul>
&lt;h3 id="gitbookを試してみたけどoss版は先行きが微妙">GitBookを試してみたけど、OSS版は先行きが微妙&lt;/h3>
&lt;p>GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。&lt;/p>
&lt;p>詳しくは&lt;a href="https://progrhy.me/tech-notes/a/software/gitbook/">Software &amp;gt; GitBook&lt;/a>に書いた。&lt;/p>
&lt;p>手順:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">npm install -g gitbook-cli
mkdir new-docs
&lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$_&lt;/span>
gitbook init
gitbook serve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考にした記事:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/mebiusbox2/items/938af4b0d0bf7a4d3e33">GitBookによるドキュメント作成 - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://morizyun.github.io/blog/gitbook-github-pages-deploy/index.html">GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/mitsuhisaT/items/8668b70586b9605040bd">gitbookの使い方 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="結局docsyへ">結局、Docsyへ&lt;/h3>
&lt;p>&lt;a href="https://efcl.info/2017/12/26/docusaurus-almin/">azuさんがGitBookからDocusaurusに移行していた&lt;/a>ので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。&lt;/p>
&lt;h2 id="426">4/26&lt;/h2>
&lt;h3 id="プロフィールサイトのgulpがつらい">プロフィールサイトのgulpがつらい&lt;/h3>
&lt;p>昨日、Docsyを扱うにあたって、UbuntuマシンのNode.jsをv8 -&amp;gt; v12に上げた。&lt;/p>
&lt;h4 id="referenceerror-primordials-is-not-defined">ReferenceError: primordials is not defined&lt;/h4>
&lt;p>今日、プロフィールサイト &lt;a href="https://progrhy.me">https://progrhy.me&lt;/a> の編集をしようとそのまま作業していたら、次とほぼ同じ問題に遭遇した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hepokon365.hatenablog.com/entry/2019/10/31/022524">Node.js v12にアップデートするとgulp v4でもfs.jsで「ReferenceError: primordials is not defined」エラーが発生 - 毎日へっぽこ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分の環境で問題になったのは &lt;code>natives&lt;/code> module.&lt;/p>
&lt;pre>&lt;code>% gulp
fs.js:35
} = primordials;
^
ReferenceError: primordials is not defined
at fs.js:35:5
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
at Module._compile (internal/modules/cjs/loader.js:1156:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1176:10)
at Module.load (internal/modules/cjs/loader.js:1000:32)
at Function.Module._load (internal/modules/cjs/loader.js:899:14)
at Module.require (internal/modules/cjs/loader.js:1042:19)
at require (internal/modules/cjs/helpers.js:77:18)
&lt;/code>&lt;/pre>&lt;p>自分の場合も、上の記事と同じように、 &lt;code>package-lock.json&lt;/code> 内に &lt;code>graceful-fs&lt;/code> のv3系への依存があった。&lt;br>
また、依存の解消は難しいようだった。&lt;/p>
&lt;p>&lt;a href="https://sites.google.com/site/progrhymetechwiki/home/memo/20200424#TOC-Gulp-3---4-">前回の挑戦&lt;/a>から、gulpのバージョンアップは今のところ諦めているので、Node.jsのバージョンをv10系に下げることにした。&lt;/p>
&lt;h4 id="referenceerror-internalbinding-is-not-defined">ReferenceError: internalBinding is not defined&lt;/h4>
&lt;p>次に出くわしたのは下のエラー:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://narunaru7638.hatenablog.com/entry/2019/05/04/124621">gulp利用時に「ReferenceError: internalBinding is not defined」のエラー - なるの備忘録&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>% gulp
internal/util/inspect.js:31
const types = internalBinding('types');
^
ReferenceError: internalBinding is not defined
at internal/util/inspect.js:31:15
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at util.js:25:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12)
at fs.js:42:21
at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5)
at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54:
10)
at Object.&amp;lt;anonymous&amp;gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra
ceful-fs/fs.js:1:37)
&lt;/code>&lt;/pre>&lt;p>上の記事にあったように、 &lt;code>npm i natives@latest --no-save&lt;/code> を実行したら解消した。&lt;/p></description></item><item><title>A: 2020-03-18</title><link>https://progrhy.me/tech-notes/a/memo/20200318/</link><pubDate>Wed, 18 Mar 2020 12:19:36 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/memo/20200318/</guid><description>
&lt;h2 id="318">3/18&lt;/h2>
&lt;h3 id="ubuntuでkrewを使ってkubectxkubensをinstall">Ubuntuでkrewを使ってkubectx/kubensをinstall&lt;/h3>
&lt;p>kubectxをUbuntuにどうやって入れようかとREADMEを見ていたら、kubectlにはkrewというプラグイン管理システムがあるそうな。&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/krew/">https://github.com/kubernetes-sigs/krew/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">https://krew.sigs.k8s.io/docs/user-guide/setup/install/&lt;/a> に従ってインストール&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">## bash&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;span style="color:#204a87">set&lt;/span> -x&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>mktemp -d&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
curl -fsSLO &lt;span style="color:#4e9a06">&amp;#34;https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
tar zxvf krew.tar.gz &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;span style="color:#000">KREW&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>./krew-&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>uname &lt;span style="color:#000;font-weight:bold">|&lt;/span> tr &lt;span style="color:#4e9a06">&amp;#39;[:upper:]&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;[:lower:]&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">_amd64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$KREW&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> install --manifest&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>krew.yaml --archive&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>krew.tar.gz &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$KREW&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> update
&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>↓を.bashrcに追記&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">KREW_ROOT&lt;/span>&lt;span style="color:#204a87;font-weight:bold">:-&lt;/span>&lt;span style="color:#000">$HOME&lt;/span>&lt;span style="color:#000;font-weight:bold">/.krew&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/bin:&lt;/span>&lt;span style="color:#000">$PATH&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>…で、kubectx/kubensをinstall:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">kubectl krew install ctx
kubectl krew install ns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>kubectx&lt;/code> &lt;code>kubens&lt;/code> ではなく &lt;code>kubectl ctx&lt;/code> &lt;code>kubectx ns&lt;/code> で使うことになる。&lt;/p>
&lt;h3 id="gkeのingressではgcsをバックエンドにできない">GKEのIngressではGCSをバックエンドにできない&lt;/h3>
&lt;p>&lt;a href="https://qiita.com/mihirat/items/668a43a88547792cde7e">kubernetesを使った開発のベストプラクティスを求めて - Qiita&lt;/a>&lt;/p>
&lt;p>この記事は2年4ヶ月前のものなのだが、自分で試してもできなかった。&lt;br>
残念。&lt;/p></description></item></channel></rss>