<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>progrhyme's Tech Notes – プログラム言語</title><link>https://progrhy.me/tech-notes/a/program/lang/</link><description>Recent content in プログラム言語 on progrhyme's Tech Notes</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 26 Apr 2020 07:54:05 +0900</lastBuildDate><atom:link href="https://progrhy.me/tech-notes/a/program/lang/index.xml" rel="self" type="application/rss+xml"/><item><title>A: Go</title><link>https://progrhy.me/tech-notes/a/program/lang/go/</link><pubDate>Sun, 26 Apr 2020 08:01:51 +0900</pubDate><guid>https://progrhy.me/tech-notes/a/program/lang/go/</guid><description>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;h3 id="ドキュメント">ドキュメント&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://golang.org/doc/">https://golang.org/doc/&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://golang-jp.org/">http://golang-jp.org/&lt;/a> &amp;hellip; golang.orgの日本語訳プロジェクト&lt;/li>
&lt;/ul>
&lt;h4 id="3rd-party-がまとめた資料">3rd Party がまとめた資料&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://motemen.github.io/go-for-go-book/">GoのためのGo&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.golangprograms.com/" title="Go Language Programs, Tutorial, Articles and Examples">Go Language Programs, Tutorial, Articles and Examples&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="play-ground">Play Ground&lt;/h3>
&lt;p>Sandbox &lt;a href="https://play.golang.org/">https://play.golang.org/&lt;/a>&lt;/p>
&lt;h3 id="記事">記事&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://postd.cc/go-best-practices-2016/" title="6年間におけるGoのベストプラクティス | プログラミング | POSTD">6年間におけるGoのベストプラクティス | プログラミング | POSTD&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="開発ツール">開発ツール&lt;/h2>
&lt;h3 id="goimports">goimports&lt;/h3>
&lt;p>&lt;a href="https://godoc.org/golang.org/x/tools/cmd/goimports">https://godoc.org/golang.org/x/tools/cmd/goimports&lt;/a>&lt;/p>
&lt;p>Install:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go get golang.org/x/tools/cmd/goimports
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>goimports&lt;/code> というコマンドが入る。&lt;br>
&lt;code>go fmt&lt;/code> のときに使われてないpkgの &lt;code>import&lt;/code> 文を削除してくれる。&lt;/p>
&lt;p>Goglandだと &lt;code>Settings &amp;gt; Go &amp;gt; On Save &amp;gt; On save run&lt;/code> で設定できる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://y0m0r.hateblo.jp/entry/20140112/1389501259" title="goのimportを自動的に追加/削除してくれる「goimports」を試してみた - Misc Notes">goのimportを自動的に追加/削除してくれる「goimports」を試してみた - Misc Notes&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://qiita.com/kuro_milk/items/6adbf544dcb333d0f472" title="Gogland で保存時に go fmt を走らせる - Qiita">Gogland で保存時に go fmt を走らせる - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ビルトイン関数">ビルトイン関数&lt;/h2>
&lt;h3 id="append">append&lt;/h3>
&lt;p>&lt;a href="https://golang.org/pkg/builtin/#append">https://golang.org/pkg/builtin/#append&lt;/a>&lt;/p>
&lt;p>&lt;code>func append(slice []Type, elems ...Type) []Type&lt;/code>&lt;/p>
&lt;p>sliceに要素、またはsliceを結合し、新たなsliceを返す。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">slice&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">slice&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">elem2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">slice&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">slice&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">anotherSlice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="topics">Topics&lt;/h2>
&lt;h3 id="vendoring">vendoring&lt;/h3>
&lt;p>アプリケーションなどで、依存パッケージを管理する仕組み。&lt;br>
Go 1.6から正式にサポートされた。&lt;br>
Go 1.5ではexperimental扱いで、有効化するには環境変数 &lt;code>GO15VENDOREXPERIMENT&lt;/code> を設定してコンパイルする必要がある。&lt;/p>
&lt;p>vendoringのためのツールとして、glideやgomなどがある。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/okamos/items/587a5693a3ae9cae9b88" title="今更だけどGoのVendoringについて思いをはせる - Qiita">今更だけどGoのVendoringについて思いをはせる - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://yoru9zine.hatenablog.com/entry/2016/02/02/054922" title="go vendoring - 隙あらば寝る">go vendoring - 隙あらば寝る&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://librabuch.jp/blog/2016/04/go-lang-vendoring-glide/" title="Glide で Go 言語のパッケージ管理と vendoring - Librabuch">Glide で Go 言語のパッケージ管理と vendoring - Librabuch&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="enum">enum&lt;/h3>
&lt;p>Goにはenumがない。&lt;br>
intの独自型を定義するのがイディオムになっている。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Fruit&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Apple&lt;/span> &lt;span style="color:#000">Fruit&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span>
&lt;span style="color:#000">Orange&lt;/span>
&lt;span style="color:#000">Banana&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">myFruit&lt;/span> &lt;span style="color:#000">Fruit&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この独自型に対して &lt;code>String()&lt;/code> メソッドを実装しておくと、名前が引けて便利:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">Fruit&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">switch&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#000">Apple&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Apple&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#000">Orange&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Orange&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#000">Banana&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Banana&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Unknown&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>golang.org/x/tools/cmd/stringer&lt;/code> で &lt;code>String()&lt;/code> メソッドを含むコードを自動生成することもできる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/awakia/items/c81c7816b9aea5422250" title="GoのEnumイディオム - Qiita">GoのEnumイディオム - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mattn.kaoriya.net/software/lang/go/20141208093852.htm" title="Big Sky :: Re: GoLangでJavaのenumっぽいライブラリ作った話">Big Sky :: Re: GoLangでJavaのenumっぽいライブラリ作った話&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://arslan.io/2015/10/08/ten-useful-techniques-in-go/" title="Ten Useful Techniques in Go – Fatih Arslan">Ten Useful Techniques in Go – Fatih Arslan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://godoc.org/golang.org/x/tools/cmd/stringer">https://godoc.org/golang.org/x/tools/cmd/stringer&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="build">build&lt;/h3>
&lt;p>&lt;a href="https://golang.org/pkg/go/build/">https://golang.org/pkg/go/build/&lt;/a>&lt;/p>
&lt;p>&lt;code>Build Constraints&lt;/code> という機能は「build tag」としても知られている。&lt;br>
こんなの:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// (A)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// +build foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// (B)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// +build !foo
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(A) &lt;code>go build -tags=foo&lt;/code> でビルドされる。&lt;br>
(B) &lt;code>go build&lt;/code> でビルドされる。&lt;/p>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://shinpei.github.io/blog/2014/10/07/use-build-constrains-or-build-tag-in-golang/" title="go build -tagsを使ってRelease/Debugを切り替える - flyhigh">go build -tagsを使ってRelease/Debugを切り替える - flyhigh&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="プロファイリング">プロファイリング&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://golang.org/pkg/runtime/pprof/" title="pprof - The Go Programming Language">runtime/pprof&lt;/a>という標準pkgを使うのが基本な感じ。
&lt;ul>
&lt;li>その内 &lt;a href="https://sites.google.com/site/progrhymetechwiki/programming/go/std-pkg" title="標準パッケージ - progrhyme's Tech Wiki">標準パッケージ - progrhyme&amp;rsquo;s Tech Wiki&lt;/a> に書くと思う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>runtimeのデバッグに役立つ環境変数の話:
&lt;ul>
&lt;li>&lt;a href="https://dave.cheney.net/tag/godebug" title="GODEBUG | Dave Cheney">GODEBUG | Dave Cheney&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>参考:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.golang.org/profiling-go-programs" title="Profiling Go Programs - The Go Blog">Profiling Go Programs - The Go Blog&lt;/a> &amp;hellip; pprof&lt;/li>
&lt;li>&lt;a href="http://hakobe932.hatenablog.com/entry/2014/04/10/010619" title="golangで書かれたプログラムのメモリ使用状況を見る - hakobe-blog ♨">golangで書かれたプログラムのメモリ使用状況を見る - hakobe-blog ♨&lt;/a> &amp;hellip; pprof, net/http/pprof&lt;/li>
&lt;li>&lt;a href="https://www.slideshare.net/yuichironakazawa2/golang-profiling-77163552" title="golang profiling の基礎">golang profiling の基礎&lt;/a> &amp;hellip; pprof他&lt;/li>
&lt;li>&lt;a href="http://qiita.com/oywc410/items/ad8baee00f039705a5c0" title="golangパフォーマンス3: mapとGC - Qiita">golangパフォーマンス3: mapとGC - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="child-pages">Child Pages&lt;/h2></description></item></channel></rss>