[{"body":"Getting Started  ガイド: https://developers.google.com/apps-script/overview APIリファレンス: https://developers.google.com/apps-script/reference/  入門系記事:\n 初心者のためのGoogle Apps Scriptプログラミング入門 【Google Apps Script入門】Google Apps Scriptとは？ | UX MILK  Features Webアプリケーションとして公開 HTML Service: Create and Serve HTML | Apps Script | Google Developers\n参考:\n Google Apps ScriptでWebアプリケーションをつくる - Qiita  ","excerpt":"Getting Started  ガイド: https://developers.google.com/apps-script/overview APIリファレンス: …","ref":"/tech-notes/a/google/gas/","title":"Google Apps Script"},{"body":"このページについて 何を書くか:\n Kubernetesの全体アーキテクチャーや構成要素の概要 個別のオブジェクトによらない概念や機能等について  書かないこと:\n 著しく個々のオブジェクトに紐づく文書のボリュームが大きくなったら、独立したページに切り出す  アーキテクチャー概観 Kubernetesのコンポーネント - Kubernetesより。\n クラスタ \u0026hellip; ノードの集合  少なくとも1つのワーカーノードと少なくとも1つのマスターノードがある   ノード（Node） \u0026hellip; コンテナ化されたアプリケーションを実行するマシン  マスターノード \u0026hellip; ワーカーノードとPodを管理。複数台構成によって高可用性を実現できる ワーカーノード \u0026hellip; Podを動かす    各ノードで実行され、Kubernetesのクラスタ機能を成り立たせるコンポーネントを以下に記す。\nMaster Components マスターコンポーネントは、クラスターのコントロールプレーンを提供する。\nクラスタのどのマシンでも実行できるが、通常は全てのコンポーネントが同じマシンで起動され、そのマシンにはユーザーのPodをスケジュールしない。\n kube-apiserver  Kubernetesを制御するフロントAPI. 水平スケール可能。参考: Building High-Availability Clusters | Kubernetes   etcd \u0026hellip; クラスタの管理データが保存されるので、バックアップすべし。 kube-controller-manager  Controllerをバックグラウンドのスレッドで動かす。 個々のControllerは論理的には独立した存在だが、複雑性を避けるため同一のバイナリで単一プロセスとして動作している。 以下のControllerが含まれる:  Node Controller Replication Controller Endpoints Controller Service Account \u0026amp; Token Controller     cloud-controller-manager \u0026hellip; v1.6でalpha. クラウド基盤とやりとりするControllerを動かす。 kube-scheduler \u0026hellip; 生成されるPodを監視し、Podを動作させるノードを決定する。 addons \u0026hellip; クラスタの機能を提供するPod群。これらのPodは kube-system という Namespace に作られる。  DNS Web UI (Dashboard) Container Resource Monitoring Cluster-level Logging    Node Components  kubelet \u0026hellip; マスターと通信するエージェントプロセス。 kube-proxy \u0026hellip; ノード上でKubernetes APIによって定義されたサービスを媒介するネットワークプロキシ。 docker, rkt \u0026hellip; コンテナランタイム supervisord \u0026hellip; ノード上でdockerやkubeletを動かし続ける。 fluentd \u0026hellip; cluster-level loggingを実現する。  リソースオブジェクト APIオブジェクトとも呼ばれるようだ。\nKubernetes API Reference Docs (v1.18 at 2020-04-13)に従い、カテゴライズして記す。\nNOTE:\n 以下、「*」は本サイト内のページを表すとする。 一旦、v1beta以下は省くか、versionを明記する  Workloads  coreグループ:  Container * Pod * ReplicationContoller   appsグループ:  ReplicaSet \u0026hellip; Replication Controllerの後継。 Deployment * \u0026hellip; PodやReplicaSetの状態を宣言的に記述することを可能にする。 StatefulSet \u0026hellip; v1.8でbeta. Deployment同様Podを管理するが、それぞれのPodを異なる個体と認識する。 DaemonSet \u0026hellip; ノード上でPodのコピーを動かす。典型的なユースケースとしては、cephやfluentd, collectdなどが挙げられる。   batchグループ:  Job \u0026hellip; Podを実行し、正常に完了するまでをトラッキングする。定められた回数、正常に完了したら、Jobも完了となる。 CronJob v1beta1    MEMO:\n apps, batchグループのオブジェクトを Controller と呼ぶことがあったようだ。  Discovery \u0026amp; LB (Service APIs)  coreグループ:  Service * Endpoints   networking.k8s.ioグループ:  Ingress v1beta1 IngressClass v1beta1   discovery.k8s.ioグループ:  EndpointSlice v1beta1    Config \u0026amp; Storage  coreグループ:  ConfigMap Secret PersistentVolumeClaim Volume   storage.k8s.ioグループ:  CSIDriver CSINode StorageClass VolumeAttachment    Metadata  coreグループ:  Event LimitRange PodTemplate   appsグループ:  ControllerRevision   autoscalingグループ:  HorizontalPodAutoscaler * \u0026hellip; HPAと略されることが多い   scheduling.k8s.ioグループ:  PriorityClass \u0026hellip; See Pod Priority and Preemption - Kubernetes#priorityclass   admissionregistration.k8s.ioグループ:  MutatingWebhookConfiguration ValidatingWebhookConfiguration   apiextensions.k8s.ioグループ:  CustomResourceDefinition \u0026hellip; CRDと略されることが多い。K8sの機能拡張によく用いられる   policyグループ:  PodDisruptionBudget v1beta1 PodSecurityPolicy v1beta1    Cluster  coreグループ:  Binding ComponentStatus Namespace * \u0026hellip; Kubernetesでは、複数の仮想的なクラスタを同じ物理クラスタ上に構築することができる。この仮想クラスタのことを Namespace と呼ぶ Node PersistentVolume * ResourceQuota ServiceAccount   authentication.k8s.ioグループ:  TokenRequest TokenReview   authorization.k8s.ioグループ:  LocalSubjectAccessReview SelfSubjectAccessReview SelfSubjectRulesReview SubjectAccessReview   rbac.authorization.k8s.ioグループ:  ClusterRole ClusterRoleBinding Role RoleBinding   apiregistration.k8s.ioグループ:  APIService AuditSink   certificates.k8s.ioグループ:  CertificateSigningRequest v1beta1   networking.k8s.ioグループ:  NetworkPolicy   coordination.k8s.ioグループ:  Lease    認証/認可 RBAC https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n Role \u0026hellip; 権限ロール。Namespace単位 ClusterRole \u0026hellip; クラスタ全体に効く権限ロール RoleBinding \u0026hellip; Roleとユーザ/グループの紐付け ClusterRoleBinding \u0026hellip; ClusterRoleとユーザ/グループの紐付け  参考:\n Kubernetes道場 20日目 - Role / RoleBinding / ClusterRole / ClusterRoleBindingについて - Toku\u0026rsquo;s Blog KubernetesのRBACについて - Qiita  オートスケール Horizontal Pod Autoscaler  https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/ https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/  Podの水平オートスケーラー\n v1 \u0026hellip; CPU使用率(requestsの平均)でスケール v2  https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/hpa-v2.md カスタムメトリクス対応 複数メトリクス対応    Example:\nkind:HorizontalPodAutoscalerapiVersion:autoscaling/v2alpha1metadata:name:WebFrontendspec:scaleTargetRef:kind:ReplicationControllername:WebFrontendminReplicas:2maxReplicas:10metrics:- type:Resourceresource:name:cputargetAverageUtilization:80- type:Objectobject:target:kind:Servicename:FrontendmetricName:hits-per-secondtargetValue:1k参考:\n Configuring a Horizontal Pod Autoscaler - GKE GKE クラスタの観察 | Stackdriver Monitoring | Google Cloud GKEでPodとNodeをAutoscaling する - Qiita  Cluster Autoscaler https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\n FAQ.md  Storage PersistentVolume https://kubernetes.io/docs/concepts/storage/persistent-volumes/\n永続化ボリューム\n参考:\n Kubernetes道場 12日目 - PersistentVolume / PersistentVolumeClaim / StorageClassについて - Toku\u0026rsquo;s Blog  リソース管理 コンテナやPodへのCPU/メモリの割当て 基本:\n Podは、cpu/memory requests以上の空きリソースを持つノードにスケジュールされる コンテナのcpu利用量がlimit値を越えるとスロットルされる = パフォーマンス劣化する コンテナのmemory利用量がlimit値を越えるとOOM Killerで殺される。再起動できるときは再起動される Podが複数のコンテナで構成される場合、リソース指定値は全コンテナの合計値になる requestsを指定しないとデフォルト値になる limitsを指定しないとノードで利用可能な最大値になる  Tips:\n コンテナのcpu/memoryのrequestsより大きなlimitsを指定することで、突発的な負荷に耐えられるようになり、かつ、適切に制限をかけられる  ベストプラクティス:\n NamespaceでResourceQuotasやLimitRangeを設定すると良い  See Namespace#resourcequotas    参考:\n コンテナおよびPodへのCPUリソースの割り当て - Kubernetes コンテナおよびPodへのメモリーリソースの割り当て - Kubernetes 例を交えてKubernetesのリミットとリクエストを理解する | Sysdigブログ - コンテナ・Kubernetes環境向けセキュリティ・モニタリング プラットフォーム Kubernetes best practices: Resource requests and limits | Google Cloud Blog 開発者のベスト プラクティス - Azure Kubernetes Service (AKS) でのリソース管理 | Microsoft Docs  Pod Eviction Documents:\n https://kubernetes.io/docs/tasks/administer-cluster/out-of-resource/  メモ:\n ノードのメモリが不足すると、Podがevictされることがある メモリ使用量の大きなPodからeviction対象になる memoryのrequets/limitsを適切に設定しておくこと  EvictしたPodは手動で削除する必要があるっぽい。 See kubectl#EvictedなPodを一括削除するワンライナー\n参考:\n Kubernetes pod evictedとスケジューリングの問題を理解する | Sysdigブログ - コンテナ・Kubernetes環境向けセキュリティ・モニタリング プラットフォーム ノード - Kubernetes  ロギング 概念:\n Logging Architecture - Kubernetes  ソリューション:\n Logging Using Stackdriver - Kubernetes  ","excerpt":"このページについて 何を書くか:\n Kubernetesの全体アーキテクチャーや構成要素の概要 個別のオブジェクトによらない概念や機能等について  書かないこと:\n 著しく個々のオブジェクトに紐づく文 …","ref":"/tech-notes/a/software/k8s/concept/","title":"Concept"},{"body":"Kubernetes向けのワークフローエンジン、CI/CDソリューションを提供するプロジェクト。\nProjects  Workflow CD Rollouts Events  Child Pages ","excerpt":"Kubernetes向けのワークフローエンジン、CI/CDソリューションを提供するプロジェクト。\nProjects  Workflow CD Rollouts Events  Child Pages ","ref":"/tech-notes/a/software/argo/","title":"Argo Project"},{"body":"参考  Kubernetesのエコシステムをまとめる - Qiita 2018年5月時点 k3s と MicroK8s の違いを考える - Qiita  マニフェスト管理 ※ * は当サイト内のページ\n kustomize * Helm ksonnet  2019年2月で更新が止まっている。参考: Welcoming Heptio Open Source Projects to VMware    クラスタ構築  kubeadm \u0026hellip; 公式  参考:\n 2019年版・Kubernetesクラスタ構築入門 | さくらのナレッジ  開発・テスト用  Minikube（See below） Kind  参考:  Kind で量産する使い捨て Kubernetes #cicd_test_night / CICD Test Night 5th - Speaker Deck kindで軽量テスト用Kubernetesクラスタを作る＆運用する時のTIPS - Qiita     MicroK8s \u0026hellip; Canonical社が出してるやつ  参考: 第560回 microk8sでお手軽Kubernetes環境構築：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社    Minikube https://github.com/kubernetes/minikube\nローカルでKubernetesを動かすためのツール。\nLinuxのみだが、ハイパーバイザを噛まさず、ローカルのdocker上に直接クラスタを構築することもできる。\n https://kubernetes.io/docs/getting-started-guides/minikube/ \u0026hellip; 導入ガイド  ※先にkubectlをインストールしておくこと    参考:\n minikubeでローカルKubernetesクラスタを5分でつくる方法 - Qiita minikube でローカルでのテスト用 Kubernetes を構築 – 1Q77 ローカルでkubernetesを動かせるminikubeを試す - 年中アイス  クライアント kubectlと周辺ツールについてはkubectlを見よ。\n K9s \u0026hellip; See below  K9s K9s - Manage Your Kubernetes Clusters In Style\nDocuments:\n Install Commands  参考:\n k9sで快適なk8sライフを送ろう！ - エニグモ開発者ブログ  CLI オプション\n   オプション 意味     --readonly 更新操作を無効にする    NOTE:\n モニタリング用途で使う場合、 --readonly をつけるべき  インタラクティブモード k9s コマンド起動後の操作\n   コマンド 意味     :q[uit], Ctrl+c 終了   \u0026lt;Esc\u0026gt; 元の画面に戻る   :ctx context選択   :ns namespace選択   / リソースフィルタ。あいまい検索。 -l でラベルセレクトも使える   d, y describe, YAMLを見る   e 編集   l ログ表示   Ctrl+d リソースを削除する   Ctrl+k リソースを停止（Kill）する（確認ダイアログはない）    CI/CD ※ * は当サイト内のページ\n Argo CD Concourse  参考: Kubernetesを前提としたCI/CDパイプラインの具体例と、本番運用に必要なもの (1/2)：コンテナベースのCI/CD本番事例大解剖（3） - ＠IT   Jenkins X Prow  参考: KubernetesベースのCI/CDシステムProwに入門してみた | CyberAgent Developers Blog   Skaffold（See below） Spinnaker * Tekton  参考:\n Spinnaker vs. Argo CD vs. Tekton vs. Jenkins X: Cloud-Native CI/CD  Skaffold 開発・本番向けにKubernetesクラスタに継続的デリバリーを実施するコマンドラインツール。\n https://github.com/GoogleContainerTools/skaffold https://skaffold.dev/  その他  K3s: Lightweight Kubernetes \u0026hellip; Rancherが出してる軽量版K8s ksync | Sync files between your local system and a kubernetes cluster.  ","excerpt":"参考  Kubernetesのエコシステムをまとめる - Qiita 2018年5月時点 k3s と MicroK8s の違いを考える - Qiita  マニフェスト管理 ※ * は当サイト内のペー …","ref":"/tech-notes/a/software/k8s/ecosystem/","title":"エコシステム"},{"body":"エディタを起動した後の使い方。\n主にファイル編集に関わる操作。\n全行の削除 \u0026#34; 全行削除%d参考:\n vim - 全行削除コマンド - IT Notebook  全行のインデント \u0026#34; ファイル全体をインデントgg=G参考:\n cl.pocari.org - Vim でインデントを整える  テキスト検索  ノーマルモードで / を打って検索。 /\\c で始めると大文字小文字を区別せずに検索  参考:\n Vim内で検索するときに大文字小文字を気にしない（ignore case）する方法 - Qiita  タブ文字の入力 :set expandtab （ :set et ）設定の時でも、 Ctrl+v Tab で入力できる。\n参考:\n :set expandtab（:set et）設定の時に、タブ文字を挿入する — 名無しのvim使い  改行文字の置換（挿入/削除） ; 改行を削除:s/\\n//g; 改行を挿入:s//\\r/gSee vimの置換で改行を(挿入|削除)する - Qiita\n","excerpt":"エディタを起動した後の使い方。\n主にファイル編集に関わる操作。\n全行の削除 \u0026#34; 全行削除%d参考:\n vim - 全行削除コマンド - IT Notebook  全行のインデント \u0026#34;  …","ref":"/tech-notes/a/program/vim/edit/","title":"エディタ"},{"body":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶということがどういうことかをまとめる。\n 文法  ソースコードの構造、形式  ステートメント  区切り文字   コメント 式 演算子 キーワード リテラル  数値, 文字列, ヒアドキュメント, etc.   その他記号   数値演算 プリミティブな文字列処理  結合, 分解, 書式, \u0026hellip;   型 制御構文  ループ 条件分岐   例外処理 関数 構造体, 拡張型 オブジェクト 外部ファイルの利用   言語機能  基本的なデータ型  配列 連想配列(マッピング構造体, ハッシュ)   日付、時刻、時間 標準入出力 ファイル入出力 テキスト処理  正規表現 エンコーディング マルチバイト文字対応   オブジェクト指向プログラミング  クラス, メソッド 継承 Mixin オーバーライド, オーバーロード   バイナリ処理 並行処理 関数型プログラミング  高階関数 curry化 クロージャ, 無名関数, lambda式   ライブラリの利用  標準ライブラリ 3rd Partyのライブラリ   テスト メタプログラミング  リフレクション ジェネリクス     実行  対話IFによる実行  REPL     テスト  単体テスト フレームワーク, ライブラリ   典型的な問題解決  乱数 典型的アルゴリズム  ソート, ハッシュ表, etc.   典型的データ構造  連結リスト, 木, グラフ, etc.     プログラミング手法  ダックタイピング   デバッグ プロファイリング 内部構造  実行プロセス  スレッド   コンパイラ インタープリタ VM GC  アルゴリズム     ソフトウェア開発  CLI バッチ処理 デーモン ライブラリ Webアプリケーション システムプログラミング etc.   開発環境・ツール  エディタ IDE   コミュニティ  Child Pages ","excerpt":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶとい …","ref":"/tech-notes/a/program/lang/","title":"プログラム言語"},{"body":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE progrhyme\u0026rsquo;s Tech Wikiの後継となるサイトです。\n参考: ブログを書きました。\n 技術メモを旧GoogleサイトからHugo + Docsyに移行している話 - progrhyme\u0026rsquo;s tech blog   作り方 静的サイトジェネレーターのHugoを使っています。\nテーマはDocsyです。\nソースコードはGitHubにあります。\nページ構成について 雑なメモはMemorandumの下に置いています。\nそれ以外も雑で気まぐれですが、なんとなく分類しています。 ときどきページ構成を工事することもあります。\nAbout Me  Profile Site Twitter: @progrhyme GitHub: @progrhyme progrhyme\u0026rsquo;s tech blog  姉妹サイト  progrhyme\u0026rsquo;s Wiki \u0026hellip; こちらもゆくゆくはGoogleサイト外に移行するかもしれませんが、2020-04-25現在は未定です。  ","excerpt":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE …","ref":"/tech-notes/a/","title":"progrhyme's Tech Notes"},{"body":"Usage  画面分割 \u0026hellip; Window \u0026gt; Editor Tabs \u0026gt; (Split Vertically|Split Horizontally)  参考:\n IntelliJの使い方 - Qiita  File Typeの関連付け Preferences \u0026gt; Editor \u0026gt; File Types で関連付けを設定できる。\nまだ関連付けがない拡張子のファイルであれば、エディタ上で右クリックして「Associate File Type」を選んで設定することもできる。\nPlugins File Watchers ファイルを監視して自動で実行されるアクションを設定できる。\n例えば、ファイルの変更を監視してコードフォーマッタを適用するとか。\nファイル監視 - 公式ヘルプ | IntelliJ IDEA\nHow to Upgrade Ubuntu  2020年に2018年版から2020.1にアップデートしたときのログ 2018年に2017年版から2018.1にアップデートしたときのログ  ","excerpt":"Usage  画面分割 \u0026hellip; Window \u0026gt; Editor Tabs \u0026gt; (Split Vertically|Split Horizontally)  参考: …","ref":"/tech-notes/a/program/idea/","title":"IntelliJ IDEA"},{"body":"BIOS（Basic Input/Output System）とは - IT用語辞典 e-Wordsより:\n パソコンなどの主基板（マザーボード）などに格納されたコンピュータプログラム（ファームウェア）の一種で、起動時のOSの読み込みや、接続された装置・機器に対する基本的な入出力制御などを行うもの。\n ","excerpt":"BIOS（Basic Input/Output System）とは - IT用語辞典 e-Wordsより:\n パソコンなどの主基板（マザーボード）などに格納されたコンピュータプログラム（ファームウェ …","ref":"/tech-notes/a/firmware/bios/","title":"BIOS"},{"body":"See also Secret\nOverview Kubernetes道場 11日目 - ConfigMap / Secretについて - Toku\u0026rsquo;s Blogより\n ConfigMapやSecretはアプリケーションの設定やクレデンシャルをコンテナイメージから分離するために使われる。\nConfigMapやSecretをVolumeとして、または環境変数を通してPodに設定やクレデンシャルを渡す。\n ConfigMapはSecretと違い、値をencodeせずに平文でYAMLに書くので、普通の設定ファイル的な位置づけ。\n A ConfigMap is an API object used to store non-confidential data in key-value pairs. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume .\n 参考:\n Kubernetes: ConfigMap / Secret の内容を一度に環境変数として読み込む (envFrom) - Qiita  Getting Started 公式サイトにいくつかのガイドやサンプルがある:\n Configure a Pod to Use a ConfigMap - Kubernetes Configuring Redis using a ConfigMap | Kubernetes  ","excerpt":"See also Secret\nOverview Kubernetes道場 11日目 - ConfigMap / Secretについて - Toku\u0026rsquo;s Blogより\n ConfigMap …","ref":"/tech-notes/a/software/k8s/configmap/","title":"ConfigMap"},{"body":"Kubernetesにおいて、基本的にコンテナはPod内で定義され、実行される（はず）。\nSee also Pod\nCPU/メモリの割当て 考え方やベストプラクティスについてはConcept#コンテナやpodへのcpuメモリの割当てを見よ。\nコマンド/引数の定義 See https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes\nExample:\napiVersion:v1kind:Podmetadata:name:command-demolabels:purpose:demonstrate-commandspec:containers:- name:command-demo-containerimage:debiancommand:[\u0026#34;printenv\u0026#34;]args:[\u0026#34;HOSTNAME\u0026#34;,\u0026#34;KUBERNETES_PORT\u0026#34;]restartPolicy:OnFailureliveness/readiness probes  Configure Liveness, Readiness and Startup Probes - Kubernetes  ヘルスチェック的なもの。\n参考:\n Kubernetes道場 10日目 - LivenessProbe / ReadinessProbeについて - Toku\u0026rsquo;s Blog  Lifecycle Hooks https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/\nSee also Pod#ライフサイクル\n以下のフックを仕込むことで、コマンド実行などが可能。\n PostStart PreStop \u0026hellip; 終了直前に実行される  詳細な仕様はAPIリファレンスを見よ。\n設定例:\napiVersion:v1kind:Podmetadata:name:lifecycle-demospec:containers:- name:lifecycle-demo-containerimage:httpdlifecycle:preStop:exec:command:[\u0026#34;sh\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;sleep 2; httpd -k graceful-stop; sleep 30\u0026#34;]terminationGracePeriodSeconds:40参考:\n pod(Kubernetes)のlifecycle.prestopの挙動 - １クール続けるブログ Kubernetes道場 6日目 - Init Container / Lifecycleについて - Toku\u0026rsquo;s Blog  ","excerpt":"Kubernetesにおいて、基本的にコンテナはPod内で定義され、実行される（はず）。\nSee also Pod\nCPU/メモリの割当て 考え方やベストプラクティスについてはConcept#コンテナ …","ref":"/tech-notes/a/software/k8s/container/","title":"Container"},{"body":"Vimの設定ファイルであるvimrcについて。\nどのファイルが読み込まれるか https://vim-jp.org/vimdoc-ja/starting.html#initialization\nvim -u ${file} で任意の設定ファイルを指定できる。\ncolorscheme カラースキームを設定する。\nSee also #highlight\nExample:\ncolorscheme elflordデフォルトで使えるもの:\n ls /usr/share/vim/vim80/colors/ などとする。 参考: デフォルトでインストールされている — 名無しのvim使い  みんなが作ったカラースキームが載ってるサイト: http://vimcolors.com/\n参考:\n vimのカラースキームの設定・編集方法（初心者〜上級者） - Qiita  filetype \u0026#34;filetype検出の有効化filetype on\u0026#34; プラグインやインデントのロードも有効化filetype plugin indent on\u0026#34; 拡張子によるfiletype検出の追加の例autocmd BufNewFile,BufRead *.rb setfiletype ruby参考:\n Vimメモ : filetypeの確認 - もた日記  highlight https://vim-jp.org/vimdoc-ja/syntax.html#:highlight\n特定のグループの文字色を変える。\n:highlight で現在の設定を得ることができる。\nSee also #colorscheme\n\u0026#34; 構文\u0026#34; 特定のグループの設定を追加hi[ghlight] {group-name} {key}={arg}...\u0026#34; 特定のグループの設定をリセットhi[ghlight] clear{group-name}\u0026#34; 例highlight Search term=bold ctermfg=Black ctermbg=Bluehighlight-args https://vim-jp.org/vimdoc-ja/syntax.html#highlight-args\nhighlight コマンドに与える {key}={arg} の引数の一部を下に示す。\n   key 端末種別 args     term 通常 bold,italic,underline,reverse,NONEなど。NONEは属性リセット用   cterm 色付き termと同じ   ctermfg 色付き 色名や番号を指定する   ctermbg 色付き ctermfgと同じ    cterm-colors https://vim-jp.org/vimdoc-ja/syntax.html#cterm-colors\nctermfgやctermbgの値には0〜15の色番号やBlack, Blueなどの色名を指定できる。\n色はVim上で :so $VIMRUNTIME/syntax/colortest.vim を実行して確認できる。\n参考:\n Vimの検索単語ハイライト時の背景色の変更方法 | Waza Lab  キーマッピング map - Vim日本語ドキュメント\nマップコマンド https://vim-jp.org/vimdoc-ja/map.html#:map-commands\n構文:\nmap {lhs} {rhs} \u0026#34; キー入力 {lhs} を {rhs} に割り当てるunmap {lhs} \u0026#34; キー入力 {lhs} のマッピングを削除map, nmapなど（ noremap じゃないやつ）:\n マップが使われたときに {rhs} が評価され、再マップされる マップを入れ子にしたり、再帰的にできる  noremap, nnoremapなど:\n {rhs} は再マップされないので、入れ子になったり再帰的になったりしない コマンドを再定義するときによく使われる  マップとモード https://vim-jp.org/vimdoc-ja/map.html#:map-modes\n   コマンド モード     map, noremap, unmap ノーマル、ビジュアル、選択、オペレータ待機   nmap, nnoremap, nunmap ノーマル    他に vmap, smap, xmap などある。\n「オペレータ待機モード」は、d、y、cなどの後で、後続の操作を待機しているとき。\nキーマッピングを確認する方法 Vimのキーマッピングを確認する - Qiitaより。\n\u0026#34; デフォルトキーバインドの一覧:help index.txt\u0026#34; 自分で割り当てたキーマップの確認:map \u0026#34; すべて確認:imap \u0026#34; インサートモードだけ:nmap \u0026#34; ノーマルモードだけ:vmap \u0026#34; ヴィジュアルモードだけ:verbose nmap \u0026#34; 定義元ファイル情報も表示","excerpt":"Vimの設定ファイルであるvimrcについて。\nどのファイルが読み込まれるか https://vim-jp.org/vimdoc-ja/starting.html#initialization\nvim …","ref":"/tech-notes/a/program/vim/vimrc/","title":"vimrc"},{"body":"https://kubernetes.io/ja/docs/concepts/workloads/controllers/deployment/\n Deployment コントローラーはPodとReplicaSetの宣言的なアップデート機能を提供します。\n Example:\napiVersion:apps/v1kind:Deploymentmetadata:name:nginx-deploymentnamespace:appspec:selector:matchLabels:app:nginxreplicas:1template:metadata:labels:app:nginxspec:containers:- name:nginximage:nginxports:- containerPort:80参考:\n Kubernetes道場 8日目 - ReplicaSet / Deploymentについて - Toku\u0026rsquo;s Blog  spec strategy 更新戦略。\nExample:\nspec:strategy:rollingUpdate:maxSurge:25%maxUnavailable:25%type:RollingUpdate上はデフォルト値。\n type \u0026hellip; Recreate を選ぶと既存の全てのPodは新しいPodが作成される前に削除される maxSurge \u0026hellip; 理想状態のPod数を超えて作成できる最大のPod数/割合。絶対数も指定可能 maxUnavailable \u0026hellip; 更新中に利用不可となる最大のPod数/割合。絶対数も指定可能  本番ではキャパシティが低下しないように 0 にしておいた方が良さそう。    参考:\n KubernetesのRolling updateを安全に行う - Qiita Zero Downtime Deployment with Kubernetes  ","excerpt":"https://kubernetes.io/ja/docs/concepts/workloads/controllers/deployment/\n Deployment コントローラーはPod …","ref":"/tech-notes/a/software/k8s/deployment/","title":"Deployment"},{"body":"Quick links:\n gcloud gsutil  Cloud SDK https://cloud.google.com/sdk/docs?hl=ja\ngcloud, gsutil, bq CLIもこれに含まれる。\n プロキシ設定  プロキシ / ファイアウォールの背後で Cloud SDK を使用する場合の構成 | Cloud SDK のドキュメント    Install https://cloud.google.com/sdk/install\n インタラクティブインストーラー: https://cloud.google.com/sdk/docs/downloads-interactive yum, apt, snapパッケージでの提供がある  snap: https://cloud.google.com/sdk/docs/downloads-snap   Docker Image \u0026hellip; See below 旧バージョンアーカイブ  Docker Image https://cloud.google.com/sdk/docs/downloads-docker\n参考:\n DockerコンテナからGoogle Cloud SDKのコマンドを簡単に実行できるコマンドをつくってみた | cloudpack.media Docker で Google Cloud SDK を使う - yt coffee  gcloud  Getting Started: https://cloud.google.com/sdk/gcloud/?hl=ja リファレンス: https://cloud.google.com/sdk/gcloud/reference  NOTE:\n 新しめの機能の場合、 gcloud beta ... や gcloud alpha ... にしかコマンドがなかったり、 beta ... や alpha ... を付けることで結果が変わることがある  認証 See also #auth\n## 初期設定(認証込) gcloud init 参考:\n Cloud SDK ツールの承認 | Cloud SDK のドキュメント | Google Cloud  環境変数    Variable 用途     CLOUDSDK_ACTIVE_CONFIG_NAME 利用するconfigurationを設定する。See #configurations    全体で使えるオプション リファレンスで「GCLOUD WIDE FLAGS」とされているもの。\nhttps://cloud.google.com/sdk/gcloud/reference に簡単な説明がある。\n例:\n --configuration \u0026hellip; コマンドを実行するconfiguration. See #configurations --project \u0026hellip; コマンドの対象となるプロジェクトをプロジェクトIDで指定する  filter https://cloud.google.com/sdk/gcloud/reference/topic/filters\n結果をリストで出力するコマンドに対し、フィルタ条件を記すことができる。\nExamples:\ngcloud compute instances list --filter=\u0026#34;machineType:f1-micro\u0026#34; gcloud compute instances list \\  --filter=\u0026#34;zone ~ ^us AND -machineType:f1-micro\u0026#34; gcloud compute instances list --filter=\u0026#34;tags.items=my-tag\u0026#34; gcloud projects list \\  --format=\u0026#34;table(projectNumber,projectId,createTime)\u0026#34; \\  --filter=\u0026#34;createTime\u0026gt;=2018-01-15\u0026#34; gcloud config configurations list --filter=\u0026#39;IS_ACTIVE=true\u0026#39; format https://cloud.google.com/sdk/gcloud/reference/topic/formats\n結果を出力するコマンドに対し、出力フォーマットや、抽出するプロパティ、ヘッダの有無などを指定できる。\nExamples:\n# デフォルトのテーブル表示にボックス装飾を付ける gcloud ... --format=\u0026#39;[box]\u0026#39; # JSON形式 gcloud ... --format=json # YAML形式 gcloud ... --format=yaml # ヘッダ無しCSV形式 gcloud ... --format=\u0026#39;csv[no-heading]\u0026#39; # ヘッダ無しCSVで、特定のカラム値だけ取得 gcloud config list --format=\u0026#34;csv[no-heading](core.project,core.account)\u0026#34; # 特定の値だけ取得 gcloud config configurations list --format=\u0026#39;value(name)\u0026#39; gcloud info --format=\u0026#39;value(config.paths.global_config_dir)\u0026#39; auth https://cloud.google.com/sdk/gcloud/reference/auth\nExamples:\n# ログイン認証 gcloud auth login # 現在認証済みのアカウント一覧 gcloud auth list # サービスアカウントの認証 gcloud auth activate-service-account --key-file \u0026lt;KEYFILE\u0026gt; # アクセストークンの表示 gcloud auth print-access-token compute https://cloud.google.com/sdk/gcloud/reference/compute\nExamples:\n## ssh gcloud compute ssh [--project=\u0026lt;PROJECT\u0026gt;] [--zone=\u0026lt;ZONE\u0026gt;] [--internal-ip | --tunnel-through-iap] \\  \u0026lt;INSTANCE\u0026gt; [-- \u0026lt;SSH_ARGS\u0026gt;] ## scp gcloud compute scp [--project=\u0026lt;PROJECT\u0026gt;] [--zone=\u0026lt;ZONE\u0026gt;] [--internal-ip | --tunnel-through-iap] \\  [--recurse] host:/path/to/dir path/to/local ## イメージの作成 gcloud compute images create my-image --source-disk my-vm-disk instances VM操作\n https://cloud.google.com/sdk/gcloud/reference/compute/instances  create    Examples:\n## 一覧 gcloud compute instances list ## 起動 gcloud compute instances start \u0026lt;INSTANCE\u0026gt; --zone=\u0026lt;ZONE\u0026gt; ## 停止 gcloud compute instances stop \u0026lt;INSTANCE\u0026gt; --zone=\u0026lt;ZONE\u0026gt; ## 作成 gcloud compute instances create my-instance \\  --project=my-project --zone=asia-northeast1-b \\  --no-address \\ # 外部IPなし --custom-vm-type=n1 \\ # N1インスタンス --custom-cpu=4 --custom-memory=8GB \\ # リソースをカスタマイズする場合 --image-project=another-project --image=my-image # 別プロジェクトのイメージを使う 参考:\n イメージとスナップショットの共有 | Compute Engine ドキュメント | Google Cloud  regions https://cloud.google.com/sdk/gcloud/reference/compute/regions\nGCEリージョンの表示。\nSYNPSIS:\ngcloud compute regions list gcloud compute regions describe REGION ssl-certificates https://cloud.google.com/sdk/gcloud/reference/compute/ssl-certificates\n証明書の管理。マネージド証明書が作れる。\n# 一覧表示 gcloud compute ssl-certificates list # 詳細表示 gcloud compute ssl-certificates describe \u0026lt;name\u0026gt; # 作成 gcloud compute ssl-certificates create \u0026lt;name\u0026gt; --domains=\u0026lt;fqdn1\u0026gt;,... # 削除 gcloud compute ssl-certificates delete \u0026lt;name\u0026gt; zones https://cloud.google.com/sdk/gcloud/reference/compute/zones\nGCEゾーンの表示。\nSYNPSIS:\ngcloud compute zones list gcloud compute zones describe ZONE config https://cloud.google.com/sdk/gcloud/reference/config\nSubcommands:\n configurations \u0026hellip; See below get-value list set  configurationという単位でプロパティ値のセットを管理できる。\nconfigurations以外のサブコマンドは現在のconfigurationに対する操作を行う。\nSYNOPSIS:\n# 設定プロパティ値一覧表示 gcloud config list # プロパティ値の取得 gcloud config get-value account gcloud config get-value artifacts/location # プロパティ値の設定 gcloud config set project my-project gcloud config set compute/region asia-northeast1 gcloud config set compute/zone asia-northeast1-a 参考:\n gcloud configで複数の設定を持って切り替える - Qiita  configurations https://cloud.google.com/sdk/gcloud/reference/config/configurations\n設定プロファイルの管理。各プロファイルでは、プロパティ値のセットを管理することができる。\nSYNOPSIS:\n# プロファイル一覧表示 gcloud config configurations list # 表示 gcloud config configurations describe プロファイル名 # 作成 gcloud config configurations create プロファイル名 # 削除 gcloud config configurations delete プロファイル名 # 有効化 gcloud config configurations activate プロファイル名 Tips:\n gcloudコマンドは現在アクティブなconfigurationの設定プロパティをデフォルト値として参照する アクティブなconfigurationは --configuration 引数か、環境変数 CLOUDSDK_ACTIVE_CONFIG_NAME で上書き指定することもできる  参考:\n SDK 構成の管理 | Cloud SDK のドキュメント | Google Cloud https://cloud.google.com/sdk/gcloud/reference/topic/configurations  container https://cloud.google.com/sdk/gcloud/reference/container\nGKE操作。\nclusters https://cloud.google.com/sdk/gcloud/reference/container/clusters\nGKEクラスタの操作。\nExamples:\ngcloud container clusters list # $KUBECONFIG or ~/.kube/config に認証情報を取得 gcloud container clusters get-credentials クラスタ名 [--region=REGION] [--project=PROJECT_ID] create https://cloud.google.com/sdk/gcloud/reference/container/clusters/create\n   オプション 意味     \u0026ndash;enable-master-authorized-networks Master Authorized Networksの有効化   \u0026ndash;master-authorized-networks=NETWORK,[NETWORK,…] Master Authorized Networksの設定    beta版（2020-05-13更新） https://cloud.google.com/sdk/gcloud/reference/beta/container/clusters/create\n   オプション 意味     \u0026ndash;release-channel=CHANNEL rapid, regular, stableのどれか。リリースチャネルの設定。    endpoints https://cloud.google.com/sdk/gcloud/reference/endpoints\nAPIサービスの作成・有効化・管理を行う。\nservices https://cloud.google.com/sdk/gcloud/reference/endpoints/services\nサービスの管理を行う。\nExamples:\ngcloud endpoints services list gcloud endpoints services delete ENDPOINT functions https://cloud.google.com/sdk/gcloud/reference/functions\nCloud Functionsの操作\ndeploy https://cloud.google.com/sdk/gcloud/reference/functions/deploy\nCloud Functionのデプロイ（作成・更新）\nExample:\n## cloud-buildsイベントをフックに動くFunctionのデプロイ gcloud functions deploy \u0026lt;Function Name\u0026gt; \\  --trigger-topic cloud-builds \\  --runtime nodejs10 \\  --set-env-vars \u0026#34;FOO=foo,BAR=bar\u0026#34; \\  --project my-project info https://cloud.google.com/sdk/gcloud/reference/info\ngcloudのconfigファイルのパスなど環境構成情報を表示する。\nExamples:\ngcloud info # 特定の値を抽出 gcloud info --format=\u0026#39;value(config.paths.global_config_dir)\u0026#39; # ネットワーク接続や隠し属性のチェック gcloud info --run-diagnostics # 直近のログを表示 gcloud info --show-log logging https://cloud.google.com/sdk/gcloud/reference/logging\nNOTE:\n read, listなどのコマンド利用時には serviceusage.services.use 権限が必要  read https://cloud.google.com/sdk/gcloud/reference/logging/read\nExamples:\ngcloud logging read --format json gcloud logging read --limit=10 --order=asc gcloud logging read \u0026#39;timestamp\u0026gt;=\u0026#34;2020-03-19T05:28:00Z\u0026#34; timestamp\u0026lt;=\u0026#34;2020-03-25T05:33:28Z\u0026#34;\u0026#39; ※2020-04-20現在、 tail -f 相当のオプションはなさそう\nprojects https://cloud.google.com/sdk/gcloud/reference/projects/\nSYNOPSIS:\n## プロジェクト一覧 gcloud projects list 参考  よく使うgcloudコマンドたち - Qiita  gsutil Cloud Storage用のPython製CLI\n ドキュメント: https://cloud.google.com/storage/docs/gsutil コマンドリファレンス: https://cloud.google.com/storage/docs/gsutil/commands/help  バケット操作  mb rb  Examples:\n# バケット作成 gsutil mb -l asia gs://mybucket # バケット削除 gsutil rb [-f] gs://\u0026lt;bucket_name\u0026gt; ls https://cloud.google.com/storage/docs/gsutil/commands/ls\nバケットやオブジェクトのリスト表示。\nExamples:\ngsutil ls gs://my-bucket/ # 古いバージョンも含める gsutil ls -a gs://my-bucket/ rm https://cloud.google.com/storage/docs/gsutil/commands/rm\nオブジェクトの削除。\nExamples:\n# subdir/ 直下のオブジェクトを削除 gsutil rm gs://bucket/subdir/* # subdir/ 下の全てのオブジェクトを削除 gsutil rm gs://bucket/subdir/** # 上と同じ gsutil rm -r gs://bucket/subdir/ # 古いバージョンも含めて削除 gsutil rm -a gs://bucket/path/to/object ","excerpt":"Quick links:\n gcloud gsutil  Cloud SDK https://cloud.google.com/sdk/docs?hl=ja\ngcloud, gsutil, bq …","ref":"/tech-notes/a/google/gcp/cli/","title":"CLI"},{"body":"Documentation 公式:\n https://docs.docker.com/ リファレンス: https://docs.docker.com/reference/  Dockerfile dockerコマンド    3rd Party:\n Docker ドキュメント日本語化プロジェクト — Docker-docs-ja  Getting Started 入門コンテンツ:\n Engine tutorials | Docker Documentation  Child Pages ","excerpt":"Documentation 公式:\n https://docs.docker.com/ リファレンス: https://docs.docker.com/reference/  Dockerfile …","ref":"/tech-notes/a/software/docker/","title":"Docker"},{"body":"Getting Started 入門コンテンツ:\n Introduction to Bash bash 入門 - se.cite.ehime-u.ac.jp bash 入門 - rat.cis.k.hosei.ac.jp  コーディング規約:\n Shell Style Guide \u0026hellip; Google bashコーディング規約参考 - Qiita  Documents 公式  Man page of BASH Bash Reference Manual CHANGES: https://tiswww.case.edu/php/chet/bash/CHANGES リリースノート的なもの: https://tiswww.case.edu/php/chet/bash/NEWS  非公式  Bash changes [Bash Hackers Wiki] ★Bash scripting \u0026hellip; 便利な Bash の小技いろいろ bash 配列まとめ - Qiita  配列の操作いろいろ    プロンプトについて:\n Bash prompt basics - LinuxConfig.org PS1とPROMPT_COMMAND, GNU screenでの活用も  bashコマンド Examples:\nbash -n script.sh # シンタックスチェック 参考:\n シェルスクリプトのlint - Qiita  Syntax 配列 # 配列の生成 array=() # 空配列 array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) # 配列の要素数 echo ${#array[@]} # 末尾に要素追加 array+=(\u0026#34;x\u0026#34;) # 先頭に追加 array=(\u0026#34;x\u0026#34; \u0026#34;${array[@]}\u0026#34;) 参考:\n bash 配列まとめ - Qiita  リダイレクト Qiitaにまとめを書いた:\n Bashの入出力リダイレクトまとめ - Qiita  参考:\n bash: 標準出力、標準エラー出力をファイル、画面それぞれに出力する方法 - Qiita 覚えてると案外便利なBashのリダイレクト・パイプの使い方9個 | 俺的備忘録 〜なんかいろいろ〜  ヒアドキュメント ※POSIX標準ではないか。少なくともkshでは動かなさそう。\nExamples:\ncat \u0026lt;\u0026lt; EOS \u0026gt; cat.out foo bar baz EOS BODY=\u0026#34;$(cat \u0026lt;\u0026lt; EOS Dear Ken, I\u0026#39;m so happy to write this message. I\u0026#39;ll be back soon! EOS )\u0026#34; ヒアドキュメントは文字列リテラルではなく、標準入力らしい。\n参考:\n bashのヒアドキュメントを活用する - Qiita  正規表現 POSIXか、EREなのだと思う。\nSYNOPSIS:\nif [[ \u0026#34;$str\u0026#34; =~ ^ba*r$ ]]; then echo match end ## マッチしないことの検査 if [[ ! \u0026#34;$str\u0026#34; =~ ^ba*r$ ]]; then echo not match end 参考:\n https://sites.google.com/site/progrhymetechwiki/program/regexp case 文の使用方法 | UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス [Bash]正規表現マッチした部分文字列を再利用する方法 · DQNEO起業日記 bashでif に正規表現を使った文字列マッチ条件分岐 - それマグで！  ANSI-C Quoting https://tiswww.case.edu/php/chet/bash/bashref.html#ANSI_002dC-Quoting\n$'string' 形式のもの。ユニコードとかエスケープシーケンスで使える。\nExamples:\necho $\u0026#39;\\e[031mThis text will be colored Red.\\e[0m\u0026#39; echo $\u0026#39;\\U25c0\u0026#39; Built-ins help ビルトインコマンドの説明を表示する。\nExamples:\n# helpコマンド自身のヘルプを表示 help help # 擬似man pageモード help -m unset 参考:\n 【 help 】コマンド――Bashのビルトインコマンドの使い方を表示する：Linux基本コマンドTips（91） - ＠IT  history https://tiswww.case.edu/php/chet/bash/bashref.html#Bash-History-Builtins\nExamples:\n# 10件表示 history 10 Tips:\n シェル変数 HISTTIMEFORMAT をstrftime書式で設定しておくとタイムスタンプを記録してくれる。 また、表示時にその書式でタイムスタンプを表示してくれる  参考:\n historyコマンドの実行日時のフォーマットについて - Qiita  Spec その他の仕様など。\n配列はexportできない Re: export does not work on array\nこれは2006年のメールなのだけど、2020-05-23のmacOS + bash v5.0.17でも駄目だった。\nサブシェルでは見えるんだけど、子プロセスとして起動したスクリプトからだと見えなかった。\n参考:\n Exporting an array in bash script - Stack Overflow bashで配列のエクスポートができない@bash 3.2 | Mazn.net  How-to プロンプト(PS1)の変更 PS1 変数を設定する。\nExamples:\nPS1=\u0026#34;\\[\\e[1;34m\\][\\u@\\h \\W]\\\\$\\[\\e[m\\]\u0026#34;    特殊文字 内容     \\u 現在のユーザ名   \\h ホスト名（ドメイン部除く）   \\w カレントディレクトリ（ホームディレクトリからの絶対パス）    参考（カスタマイズしたくなったときに見るページ）:\n bashのプロンプトを変更するには Linuxで、bash プロンプトを素敵で実用的なものに変更する BashでPromptの色を変更する方法 - Qiita  ","excerpt":"Getting Started 入門コンテンツ:\n Introduction to Bash bash 入門 - se.cite.ehime-u.ac.jp bash 入門 - …","ref":"/tech-notes/a/cli/shell/bash/","title":"Bash"},{"body":"Atlassian社が提供しているソースコードのホスティングサービス。\nJIRAなど他のAtlassian製品との連携が強み（だと思う）。\n提供形態  クラウド \u0026hellip; Bitbucket Cloud セルフホスト \u0026hellip; オンプレミス  Bitbucket Server \u0026hellip; 単一サーバ Bitbucket Datacenter \u0026hellip; クラスタ構成    Documentation  Bitbucket Cloud documentation - Atlassian Documentation 邦訳: Bitbucket Cloud ドキュメント - アトラシアン製品ドキュメント  Webhook を管理する - アトラシアン製品ドキュメント Bitbucket Cloud で Web サイトを公開する - アトラシアン製品ドキュメント    Child Pages ","excerpt":"Atlassian社が提供しているソースコードのホスティングサービス。\nJIRAなど他のAtlassian製品との連携が強み（だと思う）。\n提供形態  クラウド \u0026hellip; Bitbucket …","ref":"/tech-notes/a/web-service/bitbucket/","title":"Bitbucket"},{"body":"設定ファイルの記法等。\nv0.12以降に対応。\nv0.11以前は子ページを見よ。\n基本文法  https://www.terraform.io/docs/configuration/syntax.html  文字列  $ をそのまま文字列内で扱いたいときは \u0026quot;$$\u0026quot; とエスケープする。  変数管理 Variables https://www.terraform.io/docs/configuration/variables.html\nterraformで使用する変数は .tf ファイル内に variable ブロックで定義する。\n定義ブロック内で default 値を設定することもできるが、以下のいくつかの方法で値を注入できる。\n .tfvars ファイルに HCL or JSON で記述し、terraform実行時に -var-file \u0026lt;FILE\u0026gt; という引数で渡す  カレントディレクトリ直下の terraform.tfvars ファイルまたはsuffixが .auto.tfvars のファイルは自動的に読み込まれる。   terraform実行時に -var 'key=value' という引数で渡す 環境変数 TF_VAR_keyname を設定すると keyname 変数がセットされる  参考:\n Terraform で変数を使う - Qiita  Local Values https://www.terraform.io/docs/configuration/locals.html\nmodule内などのスコープで使える変数を定義する。\nvariableで定義した変数を参照したり、演算結果を使ったり出来るので便利。\n参考:\n 【モダンTerraform】VariableとLocal Valuesの使い分けについて - febc技術メモ  Types (v0.12〜) https://www.terraform.io/docs/configuration/types.html\nPrimitive Types  string number bool  NOTE:\n string \u0026lt;=\u0026gt; [number, bool] の型変換が必要に応じて自動的に行われる  例:  true \u0026lt;=\u0026gt; \u0026quot;true\u0026quot; false \u0026lt;=\u0026gt; \u0026quot;false\u0026quot;      Complex Types Collection Types:\n list(...)  例: list(string)   map(...)  各要素のラベル（キー）はstring型 例: map(string) だったら、各要素の値がstring型ということ   set(...)  Structural Types:\n ojbect(...)  例: object({ name=string, age=number })   tuple(...)  例: tuple([string, number, bool])    Expressions (v0.12〜) https://www.terraform.io/docs/configuration/expressions.html\nSplat https://www.terraform.io/docs/configuration/expressions.html#splat-expressions\n[*] によるリストの展開\nExamples\n# 1 var.list[*].id## for式による↑と等価な構文 [for o in var.list : o.id]# 2 var.list[*].interfaces[0].name## for式による↑と等価な構文 [for o in var.list : o.interfaces[0].name] Dynamic blocks https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks\nresource内のブロックの繰り返し記述をDRYに書けるようになった。\nExample:\nresource \u0026#34;aws_elastic_beanstalk_environment\u0026#34; \u0026#34;tfenvtest\u0026#34; { name = \u0026#34;tf-test-name\u0026#34; application = \u0026#34;${aws_elastic_beanstalk_application.tftest.name}\u0026#34; solution_stack_name = \u0026#34;64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\u0026#34; dynamic \u0026#34;setting\u0026#34; { for_each = var.settings content { namespace = setting.value[\u0026#34;namespace\u0026#34;] name = setting.value[\u0026#34;name\u0026#34;] value = setting.value[\u0026#34;value\u0026#34;] } } } ※あまり使いすぎない方がいいと書いてある。\nFunctions (v0.12〜) https://www.terraform.io/docs/configuration/functions.html\nv0.11以前は Interpolation Syntax だったもの。\nCollection concat https://www.terraform.io/docs/configuration/functions/concat.html\nlistの結合\nExamples:\n\u0026gt; concat([\u0026#34;a\u0026#34;, \u0026#34;\u0026#34;], [\u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;]) [ \u0026#34;a\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, ] Encoding jsondecode https://www.terraform.io/docs/configuration/functions/jsondecode.html\nJSONをデコードしてobject(map), tuple(list), stringなどを作る。\n逆の操作をする関数は jsonencode\nExamples:\n\u0026gt; jsondecode(\u0026#34;{\\\u0026#34;hello\\\u0026#34;: \\\u0026#34;world\\\u0026#34;}\u0026#34;) { \u0026#34;hello\u0026#34; = \u0026#34;world\u0026#34; } \u0026gt; jsondecode(\u0026#34;true\u0026#34;) true String format https://www.terraform.io/docs/configuration/functions/format.html\nprintfのような書式指定出力機能を提供する。\n構文:\nformat(spec, values...) Examples:\n\u0026gt; format(\u0026#34;Hello, %s!\u0026#34;, \u0026#34;Ander\u0026#34;) Hello, Ander! \u0026gt; format(\u0026#34;There are %d lights\u0026#34;, 4) There are 4 lights メタパラメータ https://www.terraform.io/docs/configuration/resources.html#meta-parameters\n全てのresourceで使えるパラメータ。\n count (int) \u0026hellip; リソースを作成する件数。 depends_on (list of strings) \u0026hellip; リソースやmoduleの依存関係を指定する。 lifecycle (block)  lifecycle このブロックは以下のキーを取る:\n create_before_destroy (bool) \u0026hellip; リソースを作り直すときに、元のを削除する前に 新しいリソースを作っておく。 prevent_destroy (bool) \u0026hellip; リソースの削除を防ぐ ignore_changes (list of strings) \u0026hellip; リソースの特定のパラメータの変化を無視する  例えば、AWS AutoScalinGroupで下のように設定しておくと、スケールアウトしたときにterraformを適用してもインスタンス数をリセットして事故になることを防ぐことができる。    resource \u0026#34;aws_autoscaling_group\u0026#34; \u0026#34;my_cluster\u0026#34; { min_size = 1 max_size = 10 desired_capacity = 1 lifecycle { ignore_changes = [\u0026#34;desired_capacity\u0026#34;] } } 参考:\n Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる - Qiita#リソースの差分を無視する  Workspaces https://www.terraform.io/docs/state/workspaces.html\n.tf ファイル内で ${terraform.workspace} でworkspace名を参照できる。\nExample:\nresource \u0026#34;aws_instance\u0026#34; \u0026#34;example\u0026#34; { count =\u0026#34;${terraform.workspace == \u0026#34;default\u0026#34; ? 5 : 1}\u0026#34;# ... other arguments } 参考:\n はじめてのTerraform 0.12 ～実践編～ | Future Tech Blog - フューチャーアーキテクト  Terraform https://www.terraform.io/docs/configuration/terraform.html\nTerraformの設定。\nExample:\nterraform { backend \u0026#34;s3\u0026#34; { : } required_version \u0026gt;= \u0026#34;0.12.0\u0026#34; } Backends https://www.terraform.io/docs/backends/\n S3 GCS  Partial Configuration https://www.terraform.io/docs/backends/config.html#partial-configuration\n一部の設定を .tf ファイルではなくコマンドラインや外部ファイルで渡す方式。\nModule レシピを module という単位にまとめて再利用性を高めることができる。\n https://www.terraform.io/docs/modules/usage.html https://www.terraform.io/docs/configuration/modules.html  Tips:\n module内では ${module.path} によってmoduleのルートパスを取得できる  相対パス . などでは上手く行かないケースがありそう    参考:\n terraform module内でtemplatefile関数を実行した際に、ファイルが見つけられなくて困った - Qiita  Data Source データを既存インフラや他のTerraform被管理物から取ってくる。\n https://www.terraform.io/docs/configuration/data-sources.html  Output moduleの属性値を他のmoduleで利用できるようにしたり、remote stateとして他の環境から参照可能にしたりする。\nhttps://www.terraform.io/docs/configuration/outputs.html\nChild Pages ","excerpt":"設定ファイルの記法等。\nv0.12以降に対応。\nv0.11以前は子ページを見よ。 …","ref":"/tech-notes/a/software/terraform/config/","title":"Configuration"},{"body":"","excerpt":"","ref":"/tech-notes/a/memo/","title":"Memorandum"},{"body":"Form 回答をメール通知 いくつかやり方がある。\n Formの回答通知を有効にする→Form作成者にメール通知される スプレッドシートに回答を記録し、スプレッドシートの更新通知  任意の宛先に通知できるが、回答内容がわからない   GASを書く  参考:\n 意外とカンタン！Googleフォームの回答をメールアドレスに送る方法まとめ ｜UI/UXデザイン アプリ/サービス開発 | UI/UXデザインのアジケ ajike  Slide 切り替わり秒数の制御（できない）  スライド切替時の秒数の設定 できるけど、Webに公開が必要。  参考:\n Googleスライドの自動表示で切り替わり秒数を変更したい - zakkieaのブログ  Site Googleサイト。\nサイドバーの幅と位置を調整 サイドバーの幅と位置を変更 | Google サイト の使い方\nAnalytics いわゆるGA. Webサイトのアクセス解析ツール。\nカスタムレポート 時間帯別レポート ↓のやり方でカスタムレポートを作れた。\n 【Googleアナリティクス】時間帯別のアクセス状況を確認して、ユーザーの行動パターンを把握しよう！｜アクセス解析ツール「人工知能AIアナリスト」ブログ  Child Pages ","excerpt":"Form 回答をメール通知 いくつかやり方がある。\n Formの回答通知を有効にする→Form作成者にメール通知される スプレッドシートに回答を記録し、スプレッドシートの更新通知  任意の宛先に通知で …","ref":"/tech-notes/a/google/","title":"Google"},{"body":"Getting Started https://cloud.google.com/functions/docs?hl=ja\nHow-to ログ出力 https://cloud.google.com/functions/docs/monitoring/logging\nCloud Loggingにログを送ることができる。\n言語によってやり方が異なる。\n 共通: 標準出力/標準エラー出力 Node.js  console.log() -\u0026gt; INFO ログ console.error() -\u0026gt; ERROR ログ    参考:\n Cloud FunctionsのlogをstackdriverにjsonPayloadで送りたい - Qiita  VPC接続  VPC ネットワークへの接続 | Cloud Functions のドキュメント | Google Cloud  ","excerpt":"Getting Started https://cloud.google.com/functions/docs?hl=ja\nHow-to …","ref":"/tech-notes/a/google/gcp/function/","title":"Cloud Functions"},{"body":"監視ソリューションをサービスとして提供している。\n料金 https://www.datadoghq.com/ja/pricing/\n参考:\n Datadogの課金体系について - Qiita 2016年の記事: Datadogの請求書に怯えないためにするべきこと - Qiita  Documentation https://docs.datadoghq.com/\nStatus  https://status.datadoghq.com/ https://twitter.com/datadogops  Features  Dashboards  Querying    Alerting Logs Monitor https://docs.datadoghq.com/monitors/monitor_types/log/\nログに対して監視を設定できる。\nLog Management Generate Metrics https://docs.datadoghq.com/logs/logs_to_metrics/\nログからメトリクスを生成できる。\n参考:\n 新機能 Metrics from Logs と Log Rehydration™ の紹介 | Datadog ログからメトリクスを生成し、過去の傾向の表示や SLO の追跡を実行する。 | Datadog  インテグレーション https://docs.datadoghq.com/integrations/\n各種ツール、サービスと連携が可能。\nGoogle Cloud Platform https://docs.datadoghq.com/integrations/google_cloud_platform/\nセットアップ メトリクスの収集:\n サービスアカウント作成  権限「Compute Viewer」「Monitoring Viewer」「Cloud Asset Viewer」をつける サービスアカウントキーをJSONで作成   作成したサービスアカウントキーをDatadogのGCPインテグレーションの画面でUpload  ログの収集:\n Cloud Pub/Sub Topicを作成 上のTopicのSubscriberを作成  配信タイプとして Push を選択し、 https://gcp-intake.logs.datadoghq.com/v1/input/\u0026lt;DATADOG_API_KEY\u0026gt;/ と入力   Cloud LoggingでログをPub/Subエクスポートし、上で作ったTopicを指定する  Slack https://docs.datadoghq.com/integrations/slack/\n Slack側でDatadogインテグレーションを追加し、Webhook URLを取得する Datadog側でSlackインテグレーションを追加  「Configuration」タブで通知先チャネルを選択    Monitorの通知先に設定するには、通知先に @slack-\u0026lt;チャネル名\u0026gt; を入れる。\n事例  Datadog Log Management でアプリケーション稼働モニタリング - 一休.com Developers Blog  ","excerpt":"監視ソリューションをサービスとして提供している。\n料金 https://www.datadoghq.com/ja/pricing/\n参考:\n Datadogの課金体系について - Qiita 2016 …","ref":"/tech-notes/a/web-service/datadog/","title":"Datadog"},{"body":"https://cloud.google.com/iam/docs\nCloud IAM. Google IDベースのアクセス管理ができる。\nGoogleグループを設定することもできる。\nReference  IAM permissions reference  How-to Compute Engineへのアクセス権限 関係するRoles:\n   Role Description     roles/compute.instanceAdmin.v1 インスタンスの作成・削除・編集など   roles/iam.serviceAccountUser サービスアカウントの利用。インスタンス作成にも必要   roles/iap.tunnelResourceAccessor IAP経由でインスタンスにSSHするために必要    参考:\n IAP で保護されたリソースへのアクセスの管理 | Identity-Aware Proxy のドキュメント | Google Cloud  参考  よくある質問 | Cloud Identity and Access Management のドキュメント | Google Cloud GCPのCloud IAMを試してみた | サイバーエージェント 公式エンジニアブログ  ","excerpt":"https://cloud.google.com/iam/docs\nCloud IAM. Google IDベースのアクセス管理ができる。\nGoogleグループを設定することもできる。 …","ref":"/tech-notes/a/google/gcp/iam/","title":"Cloud Identity and Access Management (IAM)"},{"body":"ハイレベルのインタフェースとして apt, apt-get, aptitude がある。\n昔からあるのがaptitudeで、最近あまり使われてない気がするが、2017年11月18日現在、これにしかない機能もあるそうだ。\naptは最先端のようだが、すべてaptで賄えるというわけではまだなさそう。\ndpkg \u0026lt;=\u0026gt; aptの関係は、RHEL系におけるrpm \u0026lt;=\u0026gt; yumの関係と似ている。\nつまり、dpkgは低レベルのインタフェースであり、aptは内部的にdpkgを使っている。\n…というようなことが Debian系のファイル管理コマンドもまとめてみた | tkd55 に書いてあった。\n参考:\n https://sites.google.com/site/progrhymetechwiki/home/memo/2016/20160604#TOC-apt-  ドキュメント  Debian 管理者ハンドブック  6.2. aptitude、apt-get、apt コマンド   dpkg(1): package manager for Debian - Linux man page man apt (8): コマンドラインインターフェイス apt-get(8) - Linux man page aptitude(8) - Linux man page  コマンド # パッケージリストの更新 apt update # パッケージの更新 ## 最低限可能なアップグレードを行う apt upgrade apt-get upgrade aptitude safe-upgrade # パッケージの検索 apt search $QUERY apt-cache search $QUERY # パッケージの削除 apt remove $PACKAGE... apt-get remove $PACKAGE... ## 不要なパッケージを削除 ... 依存関係でインストールされたが、使われなくなったもの apt autoremove # インストールされたパッケージの一覧 dpkg -l # パッケージがインストールされているか調べる dpkg -l $PACKAGE dpkg-query -l $PACKAGE # インストールされたパッケージに含まれるファイルリストを表示 dpkg-query -L $PACKAGE インストール apt install $PACKAGE... apt-get install $PACKAGE... # バージョン指定 apt-get install ${PACKAGE}=${VERSION}... # .debパッケージファイルをインストール dpkg -i foo.deb 参考:\n apt-getでversionを指定してインストールする方法 - Qiita  参考  Debian系のファイル管理コマンドもまとめてみた | tkd55 aptとdpkg - intrinsic feeling aptコマンドチートシート - Qiita rpm、deb、depot、msiパッケージの展開と一覧表示コマンドまとめ | マイナビニュース  ","excerpt":"ハイレベルのインタフェースとして apt, apt-get, aptitude がある。\n昔からあるのがaptitudeで、最近あまり使われてない気がするが、2017年11月18日現在、これにしかない …","ref":"/tech-notes/a/software/pkg-man/dpkg/","title":"dpkg"},{"body":"Kubernetesクラスタを制御するCLI.\nDocumentation  https://kubernetes.io/docs/reference/kubectl/overview/ リファレンス: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands kubectl Cheat Sheet - Kubernetes https://kubectl.docs.kubernetes.io/  参考:\n Kubernetes道場 23日目 - kubectlを網羅する - Toku\u0026rsquo;s Blog  周辺ツール  Krew \u0026hellip; kubectl plugin manager kubectx \u0026hellip; context, namespaceの切替を簡単にしてくれる kustomize \u0026hellip; Kubernetesのマニフェスト管理ツール。kubectl 1.14からkubectlに取り込まれた lbolla/kube-secret-editor \u0026hellip; secretをデコードした状態で編集することを可能にし、編集後にエンコードして保存してくれる  設定 kubeconfig 環境設定ファイルkubeconfigを参照する順番:\n  --kubeconfig フラグで指定されたパス $KUBECONFIG 環境変数に指定されたパス一覧 ~/.kube/config   See Organizing Cluster Access Using kubeconfig Files - Kubernetes\nNOTE:\n $KUBECONFIG は : 区切りで複数ファイル設定可能で、その場合、複数ファイルがマージされた内容を扱うことができる  参考:\n kubectlの接続設定ファイル（kubeconfig）の概要 - Qiita  ユースケース 環境設定 - config \u0026amp; context ## kubeconfig 表示 kubectl config view ### 現在のcontextだけを表示 kubectl config view --minify ## context ### 一覧表示 kubectl config get-contexts #### ヘッダ無しで名前だけ表示 kubectl config get-contexts --no-headers -o=name ### 現在のcontext kubectl config current-context ### 切替え kubectl config use-context \u0026lt;context-name\u0026gt; ### rename kubectl config rename-context \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt; 参考:\n kubectl 用のクラスタ アクセスの構成 | Kubernetes Engine のドキュメント | Google Cloud  Namespaceの操作・設定 Examples:\n# コンテキストのデフォルトnamespaceを設定する kubectl config set-context $(kubectl config current-context) --namespace=NAMESPACE 参考:\n kubectl で Namespace を切り替える - Qiita  実行・公開  run \u0026hellip; コンテナイメージを実行する。deploymentまたはjobが作られる。 expose \u0026hellip; リソースをクラスタ外にServiceとして公開する。  ## run ### 例 kubectl run nginx --image=nginx ## expose ### 例 kubectl expose deployment \u0026lt;deployment-name\u0026gt; --port=80 --target-port=8000 kubectl run \u0026lt;deployment-name\u0026gt; --image=\u0026lt;image-name\u0026gt; --port=\u0026lt;port\u0026gt; kubectl expose deployment \u0026lt;deployment-name\u0026gt; --type=NodePort App Management  autoscale scale \u0026hellip; 次のリソースのサイズを設定する:  Deployment, ReplicaSet, Replication Controller, StatefulSet    ## scale ### ReplicaSet \u0026#39;foo\u0026#39; を3に kubectl scale --replicas=3 rs/foo kubectl scale --replicas=3 -f foo.yml ### 今のサイズが2だったら3にする kubectl scale --current-replicas=2 --replicas=3 deployment/mysql リソース管理 作成・更新  create/apply/replace \u0026hellip; JSON or YAMLのリソース定義ファイルを適用して、リソースを作成/更新する。 patch \u0026hellip; YAML/JSONのマージを用いて、リソース定義を差分更新する  # create kubectl create -f \u0026lt;Path or URL of config file\u0026gt; ## ファイルから Secret を作成 kubectl create secret generic my-secret --from-file=./secret/secret.json ## ファイルから ConfigMap を作成 kubectl create configmap my-config --from-file=./config/config.json # apply kubectl apply -f \u0026lt;Path or URL of config file\u0026gt; ## 例 kubectl apply -f https://k8s.io/docs/tasks/run-application/deployment.yaml kubectl apply -f ./pod.json # replace kubectl replace -f \u0026lt;Path or URL of config file\u0026gt; # patch kubectl patch \u0026lt;Resource Type\u0026gt; \u0026lt;Name\u0026gt; --patch \u0026lt;YAML Content\u0026gt; ## 例 kubectl patch deployment patch-demo --patch \u0026#34;$(cat patch-file.yaml)\u0026#34; 参考:\n Update API Objects in Place Using kubectl patch - Kubernetes Kubernetes 上で Credentials を扱う | tellme.tokyo Kubernetes道場 23日目 - kubectlを網羅する - Toku\u0026rsquo;s Blog kubectl applyとkubectl replaceの違いは何ですか - コードログ  Pod操作  exec \u0026hellip; コマンドをコンテナ内で実行する cp \u0026hellip; ファイルをクライアント環境とPod間でやりとり  ## exec kubectl exec \u0026lt;pod\u0026gt; -- \u0026lt;command\u0026gt; [args...] ### podにbashでログイン kubectl exec -it \u0026lt;pod\u0026gt; -- /bin/bash -l ## cp kubectl cp path/to/localfile \u0026lt;pod\u0026gt;:/path/to/remotefile kubectl cp \u0026lt;pod\u0026gt;:/path/to/remotefile /path/to/localfile 参考:\n kubernetes: コンテナイメージにログインする - Qiita  Node操作  cordon \u0026hellip; ノードへのスケジュールを停止 drain \u0026hellip; ノードからPodを削除  ## cordon kubectl cordon \u0026lt;node-name\u0026gt; ## drain kubectl drain \u0026lt;node-name\u0026gt; ### DaemonSetで管理されてPodを停止するとき kubectl drain \u0026lt;node-name\u0026gt; --ignore-daemonsets 参考:\n kubernetesの無停止運用を意識した検証 – てっくぼっと！ Kubernetes の drain について検証した時のメモ - Qiita  表示  get \u0026hellip; 単一・複数リソースの情報を表示する。 describe \u0026hellip; 単一リソース or グループの情報を表示 diff \u0026hellip; リソースファイルとクラスタの状態を差分表示  # get kubectl get deploy[ments] kubectl get po[ds] [-o json|yaml] ## フィルタの例 kubectl get pods -l app=nginx ## ヘッダ無し + 出力フィールド指定 kubectl get namespaces --no-headers --output \u0026#34;custom-columns=NAME:.metadata.name\u0026#34; # describe kubectl describe pods # all pods kubectl describe pod \u0026lt;pod-name\u0026gt; kubectl describe deploy[ment] \u0026lt;deployment-name\u0026gt; # diff kubectl diff -f foo.yml ## kustomizeバージョン kubectl diff -k . 削除 ## delete kubectl delete deployment \u0026lt;deployment-name\u0026gt; サブコマンド apply 基本的な利用イメージはユースケース \u0026gt; リソース管理 \u0026gt; 作成更新を見よ。\nオプション:\n   オプション デフォルト 機能     --prune false α in 2020-0505. 指定されてないリソースを削除する。ただし、\n--save-config オプション付きで作られたものは除く。\n-l フィルタか --all オプションと同時に使うべし   --prune-whitelist [] --prune で使うデフォルトのホワイトリストを上書きする    Examples:\n# app=nginxラベルのリソースにマニフェストを適用し、マニフェスト外のリソースを削除する kubectl apply --prune -f manifest.yaml -l app=nginx # マニフェストに書かれていないConfigMapを全て削除 kubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap logs ## 基本構文 kubectl logs \u0026lt;Pod名\u0026gt; [Options] ## 10行 tail -f kubectl logs \u0026lt;Pod名\u0026gt; --tail=10 -f proxy API Proxyサーバを起動する\nkubectl proxy --port=8080 \u0026amp; curl http://localhost:8080/api/ See https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/\nHow-to EvictedなPodを一括削除するワンライナー EvictionしたPodは手動削除しないといけないっぽい。\nkubectl get pods | awk \u0026#39;{if ($3 ~ /Evicted/) system (\u0026#34;kubectl delete pods \u0026#34; $1)}\u0026#39; PodのEvictionについてはSee Concept#pod-eviction\n参考:\n k8sでEvictedされたpodを一括削除する - Qiita What will happen to evicted pods in kubernetes? - Stack Overflow  全てのマニフェストを取得したい これでよさそう:\nkubectl get all --export -o yaml NOTE:\n ※v1.14で --export オプションはdeprecateされているが、2020-05-07, 代替手段は見つけられていない。 上だとPodもexport対象になるので、使い勝手悪いかも？  参考:\n Is there a way to generate yml files that will produce the existing cluster? · Issue #24873 · kubernetes/kubernetes Deprecate \u0026ndash;export flag from get command by soltysh · Pull Request #73787 · kubernetes/kubernetes Kubernetes 1.14: Urgent Upgrade Notes, Deprecations, Removed and deprecated metrics, API Changes - Qiita Dump Kubernetes cluster resources as YAML \u0026hellip; シェルスクリプトで頑張っている事例  ","excerpt":"Kubernetesクラスタを制御するCLI.\nDocumentation  https://kubernetes.io/docs/reference/kubectl/overview/ リファレン …","ref":"/tech-notes/a/software/k8s/kubectl/","title":"kubectl"},{"body":"Documentation https://cloud.google.com/load-balancing/docs/\n概要  HTTP(S) 負荷分散のコンセプト | 負荷分散 | Google Cloud バックエンド サービスについて | 負荷分散 | Google Cloud  Spec  IP anycast対応 アーキテクチャ:  グローバル負荷分散によるアプリケーションの処理能力の改善 | アーキテクチャ | Google Cloud \u0026hellip; IP anycast, GFE    SSL証明書 https://cloud.google.com/load-balancing/docs/ssl-certificates\n マネージド証明書  Let\u0026rsquo;s Encrypt DV 自動更新 ワイルドカードドメインは不可    接続ドレイン コネクション ドレインの有効化 | 負荷分散 | Google Cloud\nコネクションドレインとも表記される。（公式ドキュメント統一してくれ）\n コネクション ドレインとは、VM がインスタンス グループから除外されたときに、既存の進行中リクエストに完了までの時間が確実に与えられるようにするプロセスです。\nコネクション ドレインを有効にするには、バックエンド サービスでコネクション ドレイン タイムアウトを設定します。タイムアウト時間は 1～3,600 秒に設定してください。\n デフォルトONでいいんじゃないかと思うのだが、2020-04-27現在は、上記のように設定が必要。\n次のLBのバックエンドサービスで使える:\n HTTP(S) ロードバランサ TCP プロキシ ロードバランサ SSL プロキシ ロードバランサ 内部 HTTP(S) ロードバランサ 内部 TCP / UDP ロードバランサ  外部HTTP(S)負荷分散 バックエンドバケット ロードバランサへの Cloud Storage バケットの追加 | 負荷分散 | Google Cloud\nCloud Storageバケットをバックエンドに追加し、パスで振り分けることができる。\nLogging HTTP(S) 負荷分散のロギングとモニタリング | Google Cloud\nTopics GCLBとCDNによる動的サイト高速化 グローバル負荷分散によるアプリケーションの処理能力の改善 | アーキテクチャ | Google Cloudにあるように、GCLBを前段に置いたサービスでは、GFEによるネットワーク経路最適化やTLS終端の恩恵を得られる。\n従って、APIの動的サイト高速化をねらいとしてCDNを入れる意味は薄い。\n特に、全くキャッシュをしない場合、CDNを入れても入れなくてもほとんど変わらない、とGoogle Cloudの中の人が言っていた。（無意味ではないけど、ネットワークのゆらぎぐらいの差らしい）\n","excerpt":"Documentation https://cloud.google.com/load-balancing/docs/\n概要  HTTP(S) 負荷分散のコンセプト | 負荷分散 | Google …","ref":"/tech-notes/a/google/gcp/lb/","title":"Cloud Load Balancing"},{"body":"Spinnakerの管理ツール。 daemon + CLI.\nInstallation 参考:\n Install Spinnaker with Halyard on Kubernetes - Oracle Developers - Medium  How-to Spinnakerのバージョン更新 # 利用可能なバージョン一覧 hal version list # 現在のバージョン表示 hal config version # バージョン変更 hal config version edit --version $NEW_VERSION hal deploy apply 複数のSpinnaker環境を管理する Halyardでは Deployment という単位でconfigを分けることができる。「Deployment」という語はふつうのデプロイという意味やK8s用語としても使われるので、用語としてよくないと思う。 Environment とかにしてほしかった気がする（Environmentも何かとかぶりそうだが）。\nSee https://www.spinnaker.io/reference/halyard/#deployments\n新しいDeploymentを作るには下のコマンドを叩く:\nhal config --set-current-deployment $DEPLOYMENT 指定した $DEPLOYMENT がなければ新規作成される。\nちなみに、デフォルトの $DEPLOYMENT は default である。\nこのコマンドによって新しく作ったDeploymentはまっさらな状態なので、一通りセットアップしなければならない。\n（日記はここで終わっている。）\n","excerpt":"Spinnakerの管理ツール。 daemon + CLI.\nInstallation 参考:\n Install Spinnaker with Halyard on Kubernetes - …","ref":"/tech-notes/a/software/spinnaker/halyard/","title":"Halyard"},{"body":"Kubernetesのマニフェスト管理ツール。\nリポジトリ: https://github.com/kubernetes-sigs/kustomize\nkubectl 1.14からkustomizeが統合されている。\nドキュメント/情報リソース  Reference: https://kubectl.docs.kubernetes.io/pages/reference/kustomize.html Examples: https://github.com/kubernetes-sigs/kustomize/tree/master/examples  CLI Usage kubectl kustomize # kustomization.yaml を含むディレクトリで ## Apply the Resource Config kubectl apply -k . ## View the Resources kubectl get -k . 参考:\n https://kubectl.docs.kubernetes.io/pages/app_management/apply.html  How-to ConfigMapの管理  configMapGeneratorで生成   (2020-03-18) behavior を create, replace, merge から選べるのだが、 create 以外だとdiffでエラーが出るのだが…   resourcesで管理   ConfigMapをYAMLで管理することになる。こっちの方が扱いやすいように感じた  参考  KustomizeでKubernetes YAMLを管理する | SOTA Kustomizeで環境ごとに異なるマニフェストを作る | Goldstine研究所  ","excerpt":"Kubernetesのマニフェスト管理ツール。\nリポジトリ: https://github.com/kubernetes-sigs/kustomize\nkubectl 1.14からkustomizeが …","ref":"/tech-notes/a/software/k8s/kustomize/","title":"kustomize"},{"body":"かねてからmacOSでユーザーランドで動くパッケージ管理ソフトとして開発者に親しまれてきたツールだが、2019年にLinuxにも正式に対応した。\n関連ページ:\n OS \u0026gt; macOS  Getting Started  インストール \u0026hellip; https://brew.sh/ に従う  macOS  デフォルトで /usr/local にインストールされる  Linux https://docs.brew.sh/Homebrew-on-Linux\n デフォルトで /home/linuxbrew/.linuxbrew にインストールされる  参考:\n UbuntuにHomebrewを入れてHomebrew Bundleでパッケージ管理することにした - progrhyme\u0026rsquo;s tech blog  Homebrew Bundle https://github.com/Homebrew/homebrew-bundle\nRubyのbundlerのように、brewでインストールするパッケージをBrewfileという構成ファイルにまとめる。\nオプションなしで実行した場合、カレントディレクトリの Brewfile を参照する。\nSYNOPSIS:\n# Brewfileに基づいてパッケージインストール brew bundle [install] [OPTIONS] # Brewfileに入ってないパッケージを削除する brew bundle cleanup [--force] [OPTIONS] # インストールされているパッケージリストをBrewfileに書き出す brew bundle dump [OPTIONS] オプション:\n   オプション 意味     --global ~/.Brewfile を見に行く   --file \u0026lt;File\u0026gt; Brewfileを指定する    参考:\n Macでのアプリケーションインストールの自動化 - 理系学生日記  Brewfile Example:\ntap \u0026#34;homebrew/bundle\u0026#34; tap \u0026#34;homebrew/core\u0026#34; # macOSでcaskを使う tap \u0026#34;homebrew/cask\u0026#34; cask_args appdir: \u0026#34;/Applications\u0026#34; cask \u0026#34;google-chrome\u0026#34; brew \u0026#34;bash\u0026#34; brew \u0026#34;zsh\u0026#34; brew \u0026#34;git\u0026#34; brew \u0026#34;vim\u0026#34; brew \u0026#34;tmux\u0026#34; brew \u0026#34;direnv\u0026#34; brew \u0026#34;jq\u0026#34; brew \u0026#34;the_silver_searcher\u0026#34; brew \u0026#34;coreutils\u0026#34; NOTE:\n RubyのDSLなので普通に # ... でコメントが書けるらしい  Allow comments in Brewfile · Issue #146 · Homebrew/homebrew-bundle    ","excerpt":"かねてからmacOSでユーザーランドで動くパッケージ管理ソフトとして開発者に親しまれてきたツールだが、2019年にLinuxにも正式に対応した。\n関連ページ:\n OS \u0026gt; macOS …","ref":"/tech-notes/a/software/pkg-man/brew/","title":"Homebrew"},{"body":"仮想マシン マシンタイプ | Compute Engine ドキュメント | Google Cloud\nプリエンプティブルVMインスタンス https://cloud.google.com/compute/docs/instances/preemptible\nPreemptible VM Instance. AWSでいうところのスポットインスタンス。\n いつでも停止される可能性がある 24時間実行したら必ず停止される  プリエンプト処理  プリエンプション通知をACPI G2 ソフトオフ形式でインスタンスに送信 シャットダウンスクリプトによってプリエンプションを処理。インスタンス停止前にクリーンアップ操作を実施できる インスタンスが30秒以内に停止しないと、ACPI G3 メカニカルオフ信号がOSに送信される インスタンスは TERMINATED 状態になる  プリエンプトされたかどうか調べる https://cloud.google.com/compute/docs/instances/create-start-preemptible-instance?hl=ja#detecting_if_an_instance_was_preempted\nCloud Loggingで compute.instances.preempted で検索。\n参考:\n ssh - GCP VM consistently shutting down without warning - Stack Overflow  参考  格安に使えるGCEのプリエンプティブインスタンスの勝手に停止対策 | marketechlabo  インスタンスグループ  マネージド \u0026hellip; オートスケールする。インスタンステンプレートを使う 非マネージド \u0026hellip; 自前でインスタンスを登録して管理  非マネージド インスタンス グループの作成 | Compute Engine ドキュメント | Google Cloud    Shielded VM Documents:\n Shielded VM | ドキュメント | Google Cloud  Features:\n セキュアブート 整合性モニタリング  NOTE:\n 整合性チェックに引っかかると、インスタンスが起動しない（起動直後にシャットダウンする）ことがある  参考:\n UEFI#セキュアブート why my google cloud instance often shut down automatically by itself - Stack Overflow  Machine Images Beta at 2020-04-16現在\nhttps://cloud.google.com/compute/docs/machine-images\n最近リリースされたやつ。\n従来のImageとの違いは↑に書いてある。\nImages https://cloud.google.com/compute/docs/images?hl=ja\nAWS AMIみたいなもの\nDocuments:\n イメージとスナップショットの共有 | Compute Engine ドキュメント | Google Cloud  NOTE:\n VMからカスタムイメージを作る場合は、VMを停止しないと駄目みたい  ","excerpt":"仮想マシン マシンタイプ | Compute Engine ドキュメント | Google Cloud\nプリエンプティブルVM …","ref":"/tech-notes/a/google/gcp/gce/","title":"Compute Engine"},{"body":"config https://git-scm.com/docs/git-config\naliasの設定 Examples:\n[alias] st = status dfc = diff --cached Tips:\n 右辺を ! から記述すると外部コマンドを記述できる  参考:\n gitで便利なエイリアス達 - Qiita git aliasで外部コマンドを呼び出して便利にしてみる - Qiita  include 別ファイルをincludeできる\n[include] path = .gitconfig.local 参考:\n .gitconfigで別ファイルを読み込む - 3100  includeIf 条件に基づいて別ファイルをincludeする。\n参考:\n git-configのConditional includesでユーザ情報を切り替える - kawaken\u0026rsquo;s blog  How-to See also gitコマンド\nCommitterとAuthorを変更する HEADのcommitを修正する場合:\ngit config --local user.name \u0026#34;YOUR NAME\u0026#34; git config --local user.email your-address@example.com git commit --amend --reset-author 過去の履歴についても変更したい場合:\ngit rebase -i \u0026lt;commit hash\u0026gt; # 該当するコミットを `e` で選ぶ git commit --amend --reset-author git rebase --continue 参考:\n 過去のgitコミットのCommitとAuthor情報を修正する - ひと夏の技術 Git の Commit Author と Commiter を変更する - Qiita  歴史を改ざんする See Git - 歴史の書き換え\n特定のファイル・ディレクトリの履歴を完全に削除 ## file git filter-branch --tree-filter \u0026#39;rm -f path/to/file\u0026#39; HEAD ## directory git filter-branch --tree-filter \u0026#39;rm -rf path/to/dir/\u0026#39; HEAD 参考:\n Git ファイルの履歴を完全に削除する  マージコミットを cherry-pick merge commit を cherry-pick\ngit cherry-pick -m 1 \u0026lt;merge commit のハッシュ\u0026gt; 参考:\n merge commitをcherry-pickする - Qiita  マージ済みブランチを掃除する 色んな人がやっていて、aliasに設定したりサブコマンドを作ったりしている。\n自分でも2020-05-04に作った。\n参考:\n gitでbranchをお掃除する際のチートシート - Qiita  特定のファイルを Git 管理対象から除外する ①.gitignore や .git/info/exclude を使う\n②既に Git 管理下にあるファイルをワーキングツリーで敢えて除外する\ngit update-index —assume-unchanged [ファイル名] git update-index —skip-worktree [ファイル名] ## 確認 git ls-files -v ## 取り消し git update-index —no-assume-unchanged [ファイル名] git update-index —no-skip-worktree [ファイル名] git ls-files -v の表示:\n assume-unchanged 設定のファイルは、状態が小文字で表示される skip-worktree 設定のファイルは、状態が S と表示される  参考:\n 既に git 管理しているファイルをあえて無視したい - Qiita  リポジトリをサブディレクトリで分割 サブディレクトリが1つの場合 git clone original_dir new_dir cd new_dir git filter-branch --subdirectory-filter sub_dir_name HEAD 参考:\n gitリポジトリのサブディレクトリを別のリポジトリとして抽出する方法 - 拡張現実ライフ  サブディレクトリが複数の場合 参考:\n git filter branch - Detach many subdirectories into a new, separate Git repository - Stack Overflow  ","excerpt":"config https://git-scm.com/docs/git-config\naliasの設定 Examples:\n[alias] st = status dfc = diff …","ref":"/tech-notes/a/software/git/","title":"Git"},{"body":"障害情報  https://status.cloud.google.com/  RSSもある   https://twitter.com/gcpstatus でも配信されている  quota リソース制限。割当て上限。\n緩和方法 参考:\n GCP リソースの割り当てを増加(上限緩和申請) - Qiita  コスト管理 コスト節約のためのナレッジ:\n 2020-04-21 クラウドコストの最適化のためのベスト プラクティス | Google Cloud Blog  監査 Cloud Audit Logging https://cloud.google.com/logging/docs/audit/?hl=ja\nデフォルトでもある程度ログを取ってくれるが、有効期限がある。\n永久に保存したい場合は、GCSにエクスポートが必要そう。\nhttps://cloud.google.com/logging/quotas?hl=ja#logs_retention_periods\n組織 AWSのOrganizationみたいなものと思う。\nG Suiteだとドメインに紐づくか。\nフォルダ フォルダを作って組織内のプロジェクトを階層化できる。\n例えば組織の部門ごとにフォルダを作ると、権限管理など便利。\nSee フォルダの作成と管理 | Google Cloud Resource Manager ドキュメント | Google Cloud\nプロジェクトを組織に移行 元々組織に紐付いていなかったプロジェクトを組織に紐付けることができる。\n戻すこともできるが、プロジェクト作成者のみ(？)\nプロジェクトは組織のポリシーに準じるようになるので、不整合が起こらないようにしないといけない、といった注意点があるようだ。\nSee 組織に既存のプロジェクトを移行する | Google Cloud Resource Manager ドキュメント | Google Cloud\n制限 組織内に作れるプロジェクト数は上限がある。\n緩和申請もできるみたい。\n Project quota requests - Cloud Platform Console ヘルプ  APIとサービス https://console.cloud.google.com/apis/library\n 一覧の確認には、 gcloud services list コマンドを使う  認証 ドキュメント:\n 認証の概要 | Google Cloud エンドユーザーとして認証する | Google Cloud \u0026hellip; OAuth 2.0を使う  OAuthスコープ  OAuth 2.0 Scopes for Google APIs | Google Identity Platform https://cloud.google.com/sdk/gcloud/reference/compute/instances/create#--scopes \u0026hellip; エイリアス一覧  構成管理 Cloud Deployment Manager https://cloud.google.com/deployment-manager/\nYAMLでPythonテンプレートとJinja2に対応している。\n Documentation: https://cloud.google.com/deployment-manager/docs/  サポートされるリソースタイプ | Cloud Deployment Manager のドキュメント | Google Cloud    開発 ローカル開発用サーバ 一部のサービスには、自動テストなどでも使えるエミュレータが提供されている:\n Cloud Datastore Cloud Bigtable Cloud Pub/Sub  Service Usage https://cloud.google.com/service-usage/docs/overview?hl=ja\nGCPサービスやAPIの表示、管理。\n権限 https://cloud.google.com/service-usage/docs/access-control\nQuotaやBillingの操作をするとき、 serviceusage.services.use が要求される。\n例:\n gcloud logging logs list  Tips ラベルの運用 ラベルの作成と管理 | Resource Manager のドキュメント | Google Cloud\n参考  はじめてのGCP - Qiita \u0026hellip; 2018年8月時点だが、ネットワークセキュリティ周りなどそこそこまとまっている  Child Pages ","excerpt":"障害情報  https://status.cloud.google.com/  RSSもある   https://twitter.com/gcpstatus でも配信されている  quota リソース …","ref":"/tech-notes/a/google/gcp/","title":"Google Cloud Platform"},{"body":"https://www.terraform.io/docs/commands/\nimport https://www.terraform.io/docs/import/usage.html\nterraform import コマンドにより、既存インフラをTerraform管理下に置くことができる。\n一部インフラを手動で作った後、リソースのidを指定して取り込む、といった使い方ができる。\n参考:\n terraform importの使い方メモ - Qiita  plan https://www.terraform.io/docs/commands/plan.html\nExamples:\n# 対象を限定する terraform plan -target=resource_type1.identifier1 -target=resource_type2.identifier2 # planファイルを書き出す terraform plan -out=path/to/tfplan state https://www.terraform.io/docs/commands/state/\nstateの管理・編集を行うコマンド。\nSYNOPSIS:\nterraform state list [filtering-arg] # terraform管理下のリソース一覧 terraform state pull # リモートのstateファイルをダウンロードして標準出力に表示 terraform state push [OPTION] PATH # ローカルのstateファイルをリモートにアップロード terraform state mv SOURCE DESTINATION # リソースの名称変更。module化も可能 terraform state rm リソース # リソースをterraform管理から除く = tfstateファイルから削除 ","excerpt":"https://www.terraform.io/docs/commands/\nimport https://www.terraform.io/docs/import/usage.html …","ref":"/tech-notes/a/software/terraform/cli/","title":"CLI"},{"body":"稼働/障害 情報 https://www.githubstatus.com/\nDocumentation https://help.github.com/\n 邦訳: https://help.github.com/ja  Deployments Deploymentを作成するとリポジトリに「environment」というメニューができて、デプロイ履歴などが見えるようになる。\nドキュメント:\n Viewing deployment activity for your repository - GitHub Help Deployments | GitHub Developer Guide  Child Pages ","excerpt":"稼働/障害 情報 https://www.githubstatus.com/\nDocumentation https://help.github.com/\n 邦訳: …","ref":"/tech-notes/a/web-service/github/","title":"GitHub"},{"body":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html   http://golang-jp.org/ \u0026hellip; golang.orgの日本語訳プロジェクト  3rd Party がまとめた資料  GoのためのGo Go Language Programs, Tutorial, Articles and Examples  Play Ground Sandbox https://play.golang.org/\n記事  6年間におけるGoのベストプラクティス | プログラミング | POSTD  開発ツール goimports https://godoc.org/golang.org/x/tools/cmd/goimports\nInstall:\ngo get golang.org/x/tools/cmd/goimports goimports というコマンドが入る。\ngo fmt のときに使われてないpkgの import 文を削除してくれる。\nGoglandだと Settings \u0026gt; Go \u0026gt; On Save \u0026gt; On save run で設定できる。\n参考:\n goのimportを自動的に追加/削除してくれる「goimports」を試してみた - Misc Notes Gogland で保存時に go fmt を走らせる - Qiita  ビルトイン関数 append https://golang.org/pkg/builtin/#append\nfunc append(slice []Type, elems ...Type) []Type\nsliceに要素、またはsliceを結合し、新たなsliceを返す。\nslice = append(slice, elem1, elem2) slice = append(slice, anotherSlice...) Topics vendoring アプリケーションなどで、依存パッケージを管理する仕組み。\nGo 1.6から正式にサポートされた。\nGo 1.5ではexperimental扱いで、有効化するには環境変数 GO15VENDOREXPERIMENT を設定してコンパイルする必要がある。\nvendoringのためのツールとして、glideやgomなどがある。\n参考:\n 今更だけどGoのVendoringについて思いをはせる - Qiita go vendoring - 隙あらば寝る Glide で Go 言語のパッケージ管理と vendoring - Librabuch  enum Goにはenumがない。\nintの独自型を定義するのがイディオムになっている。\ntype Fruit int const ( Apple Fruit = iota Orange Banana ) var myFruit Fruit この独自型に対して String() メソッドを実装しておくと、名前が引けて便利:\nfunc (f Fruit) String() string { switch f { case Apple: return \u0026#34;Apple\u0026#34; case Orange: return \u0026#34;Orange\u0026#34; case Banana: return \u0026#34;Banana\u0026#34; default: return \u0026#34;Unknown\u0026#34; } } golang.org/x/tools/cmd/stringer で String() メソッドを含むコードを自動生成することもできる。\n参考:\n GoのEnumイディオム - Qiita Big Sky :: Re: GoLangでJavaのenumっぽいライブラリ作った話 Ten Useful Techniques in Go – Fatih Arslan https://godoc.org/golang.org/x/tools/cmd/stringer  build https://golang.org/pkg/go/build/\nBuild Constraints という機能は「build tag」としても知られている。\nこんなの:\n// (A) // +build foo  // (B) // +build !foo (A) go build -tags=foo でビルドされる。\n(B) go build でビルドされる。\n参考:\n go build -tagsを使ってRelease/Debugを切り替える - flyhigh  プロファイリング  runtime/pprofという標準pkgを使うのが基本な感じ。  その内 標準パッケージ - progrhyme\u0026rsquo;s Tech Wiki に書くと思う。   runtimeのデバッグに役立つ環境変数の話:  GODEBUG | Dave Cheney    参考:\n Profiling Go Programs - The Go Blog \u0026hellip; pprof golangで書かれたプログラムのメモリ使用状況を見る - hakobe-blog ♨ \u0026hellip; pprof, net/http/pprof golang profiling の基礎 \u0026hellip; pprof他 golangパフォーマンス3: mapとGC - Qiita  Child Pages ","excerpt":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html …","ref":"/tech-notes/a/program/lang/go/","title":"Go"},{"body":" OSについては See OS CLIについては See CLI  GUIのHTTPクライアント REST APIのテストなどで使えるもの:\n Postman | The Collaboration Platform for API Development  Chrome拡張としても提供されていたが、ネイティブクライアントを使ってほしい方針になったらしい 参考: RESTサービスを触る際の必須ツールPostmanを使ってみました | エクセルソフト ブログ   Talend API Tester - Free Edition - Chrome ウェブストア  Child Pages ","excerpt":" OSについては See OS CLIについては See CLI  GUIのHTTPクライアント REST APIのテストなどで使えるもの:\n Postman | The Collaboration …","ref":"/tech-notes/a/software/","title":"Software"},{"body":"Dockerコンテナレジストリ。\nGetting Started Documentation:\n https://cloud.google.com/container-registry/docs  リソース \u0026hellip; 料金、クォータ、リリースノートなど    認証 dockerコマンドでGCRにアクセスできるようにする:\ngcloud auth configure-docker https://cloud.google.com/container-registry/docs/advanced-authentication\nHow-to Pub/Sub通知 Pub/Sub 通知の構成 | Container Registry のドキュメント | Google Cloud\n イメージが push、タグ付け、削除されたときなど、Container Registry リポジトリに変更が加えられた場合、Pub/Sub を使用して通知を受け取ることができます\n ","excerpt":"Dockerコンテナレジストリ。\nGetting Started Documentation:\n https://cloud.google.com/container-registry/docs  リ …","ref":"/tech-notes/a/google/gcp/gcr/","title":"Container Registry"},{"body":"関連ページ:\n Software \u0026gt; Kubernetes  Getting Started  チュートリアル | Kubernetes Engine ドキュメント | Google Cloud 入門ガイド | Kubernetes Engine ドキュメント | Google Cloud  Documentation  https://cloud.google.com/kubernetes-engine/docs/?hl=ja https://cloud.google.com/kubernetes-engine/quotas?hl=ja  ベストプラクティス  Best Practices for Operating Containers | Architectures | Google Cloud  Logging, etc.   Kubernetes best practices: terminating with grace | Google Cloud Blog  仕様  クラスタ オートスケーラー | Kubernetes Engine のドキュメント | Google Cloud  クラスタの自動スケーリング | Kubernetes Engine のドキュメント | Google Cloud    Quota https://cloud.google.com/kubernetes-engine/quotas\nLast updated at 2020-04-13\n GKEクラスタごと  クラスタあたりの最大ノード数: 5,000 ノードプールあたりの最大ノード数: 1,000 ノードあたりの最大ポッド数: 110    限定公開クラスタ Documents:\n 限定公開クラスタの設定 | Kubernetes Engine のドキュメント | Google Cloud https://cloud.google.com/sdk/gcloud/reference/container/clusters/create?hl=ja Example GKE Setup | Cloud NAT | Google Cloud  要点:\n ノードは内部IPアドレスのみを持つため、インターネットから隔離される 限定公開クラスタでは、マスターへのアクセスを制御できる LB経由で受信トラフィックを受けられる。また、内部LB経由でVPC内のトラフィックを受けることもできる 外と通信したいときは、上記の「Example GKE Setup」にあるように、Cloud NAT + Cloud Routerをセットアップする  Tips:\n (2019-12-02現在) gcloud container clusters create コマンドでは --enable-private-nodes --master-ipv4-cidr \u0026lt;CIDR\u0026gt; オプションをつける  制限事項 限定公開クラスタの作成 | Kubernetes Engine ドキュメント | Google Cloud#要件、制約、制限\n エイリアスIP範囲が有効なVPCネイティブクラスタである必要がある  See VPCネイティブクラスタを作成する    負荷分散  https://cloud.google.com/kubernetes-engine/docs/concepts/ingress  HTTP(S) 負荷分散 Ingressで複数のバックエンドServiceを設定できる。設定例:\napiVersion:extensions/v1beta1kind:Ingressmetadata:name:my-ingressspec:rules:- http:paths:- path:/*backend:serviceName:my-productsservicePort:60000- path:/discountedbackend:serviceName:my-discounted-productsservicePort:80Managed SSL certificateを使う https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs\n GCPの静的IPを払い出し、対象のDNSレコードに設定する必要がある  See also https://sites.google.com/site/progrhymetechwiki/cloud/gcp/gclb#TOC-SSL-\nHTTPの無効化 https://cloud.google.com/kubernetes-engine/docs/concepts/ingress?hl=ja#disabling_http\nHTTPSのみを使うときはアノテーション kubernetes.io/ingress.allow-http の値を \u0026quot;false\u0026quot; に設定する。\napiVersion:extensions/v1beta1kind:Ingressmetadata:name:my-ingress-2annotations:kubernetes.io/ingress.allow-http:\u0026#34;false\u0026#34;spec:tls:- secretName:my-secret...※2020-03-04現在、K8sのバージョンによっては、マネージドSSL証明書を使う場合は、 ingress.gcp.kubernetes.io/pre-shared-cert アノテーションの値に証明書名を入れる必要がある。1.15.x-gke.y の場合は自動でアノテーション付けてくれるっぽい。\nSee https://github.com/kubernetes/ingress-gce/issues/1001\n内部TCP/UDP負荷分散 内部 TCP / UDP 負荷分散 | Kubernetes Engine のドキュメント | Google Cloud\n2020-03-25現在、β版\n Serviceを type: LoadBalancer で作成し、所定のannotationを入れる 内部LBが作成される Ingressは不要 Compute InstanceGroupで振り分けされる  2020-03-25現在、ネットワークエンドポイントグループには対応していない   同じDeploymentで、内部LBのServiceと外部HTTP(S)負荷分散用の2つのServiceを持つことができる  Example:\napiVersion:v1kind:Servicemetadata:name:ilb-serviceannotations:cloud.google.com/load-balancer-type:\u0026#34;Internal\u0026#34;labels:app:hellospec:type:LoadBalancerselector:app:helloports:- port:80targetPort:8080protocol:TCPBackendConfig（β on 2020-04-27） https://cloud.google.com/kubernetes-engine/docs/concepts/backendconfig?hl=en\nGKE固有のcustom resource.\nBackendConfigによって、HTTP(S) Load Balancingに以下の機能を設定できる:\n Cloud CDN Cloud Armor Identity-Aware Proxy (IAP) Timeout, Connection draining timeout, Session affinity, User-defined request headers  Example:\n タイムアウトを40秒に設定 接続ドレインタイムアウトを60秒に設定  apiVersion:cloud.google.com/v1beta1kind:BackendConfigmetadata:name:my-bsc-backendconfigspec:timeoutSec:40connectionDraining:drainingTimeoutSec:60Horizontal Pod Autoscaler HPA.\n 水平ポッド自動スケーリング | Kubernetes Engine のドキュメント | Google Cloud  外部指標によるデプロイの自動スケーリング | Kubernetes Engine のチュートリアル | Google Cloud カスタム指標でのデプロイの自動スケーリング | Kubernetes Engine のチュートリアル | Google Cloud いずれもCloud Monitoringメトリクスでスケール設定を行う https://github.com/GoogleCloudPlatform/k8s-stackdriver/tree/master/custom-metrics-stackdriver-adapter をクラスタにデプロイする    参考:\n https://sites.google.com/site/progrhymetechwiki/software/k8s#TOC-Horizontal-Pod-Autoscaler Autoscaling K8s HPA with Google HTTP/S Load-Balancer RPS EXTERNAL Stackdriver Metrics  How-to アップグレード https://cloud.google.com/kubernetes-engine/docs/how-to/upgrading-a-cluster\nTips:\n リリースチャネルを指定することで、自動アップグレードできる  kubeconfigエントリを生成 gcloud container clusters get-credentials [CLUSTER_NAME] [--project PROJECT] [--region REGION] ↑のコマンドは更に、クラスタをデフォルトのkubectlのcontextに設定する。\n参考:\n kubectl 用のクラスタ アクセスの構成 | Kubernetes Engine のドキュメント | Google Cloud  ノードプールを作り直す マシンタイプやサービスアカウントを変えるときなどには、ノードプールの作り直しが発生する。\n次の要領でやれば良い:\n 新しいプールを作成 ワークロードを新しいプールに移行 古いプールを削除  ドキュメントでは、 異なるマシンタイプへのワークロードの移行 | Kubernetes Engine のチュートリアル | Google Cloud の手順に従う形になる。\nただし、この手順に愚直に従うとドレインした瞬間に旧プール上のPodがevictionされ、サービス停止することもあり得るので、常時稼働のワークロードであれば、cordonでノードへのスケジューリングを停止した後、Podをスケールさせて新しいプールにPodが配置された後にドレインした方がよさそう。\nGKEのノードにSSH  高度な方法によるインスタンスへの接続 | Compute Engine ドキュメント | Google Cloud 限定公開クラスターのGKEノードにサクッとSSHする方法 - Qiita GKE で k8s クラスタの node に ssh する - Qiita  参考:\n Insufficient Permission: Request had insufficient authentication scopes. - Course: Google Certified Associate Cloud Engineer 2020  コンテナネイティブの負荷分散を使う コンテナ ネイティブの負荷分散を使用する | Kubernetes Engine のドキュメント | Google Cloud\nTL;DR:\n ネットワークエンドポイントグループ(NEG)を作成して、Podに均等にトラフィックを分配できる 従来の方式だとインスタンスグループ経由のアクセスで、iptablesを介してPodにアクセスしており、余分なネットワークオーバーヘッドが発生していた  既知の問題（2020-04-27時点）:\n GKEのガベージコレクションが2分間隔なので、LBが完全に削除される前にクラスタが削除された場合、NEGを手動で削除する必要がある Podのreadinessフィードバックを使っていない場合、ワークロードをデプロイするときや再起動するときに、ワークロードの更新完了に要する時間よりも、新しいエンドポイントの伝播に要する時間のほうが長くなる場合がある  VPCネイティブクラスタを作成する VPC ネイティブ クラスタを作成する | Kubernetes Engine ドキュメント | Google Cloud\n2020-05-04現在、GCPコンソールから作成する場合はデフォルトでVPCネイティブクラスタになるが、REST APIやgcloudコマンドではルートベースクラスタになるので注意。\n2つのやり方がある:\n 既存のサブネットにクラスタを作成する。アドレス範囲の割り当て方は下の2つ:  GKE管理のセカンダリ範囲割り当て ユーザー管理のセカンダリ範囲割り当て   クラスタとサブネットを同時に作成する。セカンダリアドレス範囲の割り当てはGKE管理となる  メンテナンス時間枠と除外枠の設定 メンテナンスの時間枠と除外の構成 | Kubernetes Engine ドキュメント | Google Cloud\n クラスタやノードのアップグレードが行われる時間枠を設定可能。 （たぶん）最短4時間  Docker Hubのイメージを使うには？ 公開イメージだったら普通に使える。\nプライベートなイメージでも認証情報を渡せば普通に使えるんじゃないかな。\nMEMO:\n 日本語の記事だとミラーしたり、GCRにpushしてる例が多い  参考:\n Google Cloud Kubernetes accessing private Docker Hub hosted images - Stack Overflow Images - Kubernetes docker hub with kubernetes in GKE Using Images from a Private Registry on GKE - Engineering Tomorrow’s Systems hawksnowlog: Google Container Engine に Dockerhub で公開しているイメージをデプロイする方法  Topics Logging  Google Kubernetes Engine の Stackdriver ログを Fluentd でカスタマイズする | ソリューション  参考  GKE上RailsのアプリケーションログをStackdriver Loggingで運用する方法 - Riki Shimma - Medium  ","excerpt":"関連ページ:\n Software \u0026gt; Kubernetes  Getting Started  チュートリアル | Kubernetes Engine ドキュメント | Google Cloud …","ref":"/tech-notes/a/google/gcp/gke/","title":"Google Kubernetes Engine"},{"body":"メーリングリスト、フォーラムを提供してくれる。\nGCPなどでアカウント管理にも使える。\nFeatures G Suite特有の機能 グループアドレスの追加(エイリアス) グループのアドレスを追加する - G Suite 管理者 ヘルプ\n","excerpt":"メーリングリスト、フォーラムを提供してくれる。\nGCPなどでアカウント管理にも使える。\nFeatures G Suite特有の機能 グループアドレスの追加(エイリアス) グルー …","ref":"/tech-notes/a/google/group/","title":"Google Groups"},{"body":"JavaScript | MDN\nGetting Started  JavaScript ガイド - JavaScript | MDN  Reference:\n JavaScript リファレンス - JavaScript | MDN JavaScript and HTML DOM Reference  コーディング規約:\n Google JavaScript Style Guide  非公式和訳: Google JavaScript Style Guide 和訳 — Google JavaScript Style Guide 和訳   https://github.com/felixge/node-style-guide 参考まとめ:  JavaScriptのスタイルガイドまとめ(おすすめ4選) - Qiita    Reference Date https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\nJSON https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\nSYNOPSIS:\nconst obj = JSON.parse(str) const str = JSON.stringify(obj) Tips デバッグ  debugger; 文を埋め込む。  参考:\n JavaScriptのデバッグ方法 – JSを嫌いにならないためのTips | プログラミング | POSTD  日付と時刻の計算  【JavaScript】日付処理 - Qiita 日付と時刻の計算 (JavaScript)  Topics var, let, constの使い分け 2017年12月現在、イマイチよくわかっていない。\n参考:\n JavaScriptにおけるvar/let/constの使い分け  sprintfなさそう Node.jsだとutilがある:\n https://nodejs.org/api/util.html  npmもある:\n https://www.npmjs.com/package/sprintf  \u0026ldquo;0\u0026quot;埋めとか半角スペースで埋める方法としては substr を使った例が出て来る:\n Javascriptで文字列の０埋め、空白で右寄せでフォーマット - それマグで！  自作関数を作る例も出てくる:\n Javascriptで日付・時刻をフォーマット表示 - Qiita 日付フォーマットなど 日付系処理 - Qiita  日付時刻については、固定フォーマットで出力する関数はある。\n参考:\n 日付と時刻文字列 (JavaScript) 【Javascript入門】日付のフォーマット処理まとめ | 侍エンジニア塾ブログ | プログラミング入門者向け学習情報サイト  ","excerpt":"JavaScript | MDN\nGetting Started  JavaScript ガイド - JavaScript | MDN  Reference:\n JavaScript リファレンス - …","ref":"/tech-notes/a/program/lang/js/","title":"JavaScript"},{"body":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発になっていくようだ。\nhttps://github.com/GitbookIO/gitbook\n ⚠️ Deprecation warning\nAs the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.\nAll content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.\nContent hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation.\n Documentation  https://docs.gitbook.com/ \u0026hellip; クラウドサービス向け Introduction | GitBook.com Documentation https://github.com/GitbookIO/gitbook/tree/master/docs \u0026hellip; たぶんOSSツールチェインのドキュメントはもうここを読むしかない。  Plugins 目次生成系:\n Package - gitbook-plugin-page-toc zanfab/gitbook-plugin-intopic-toc: GitBook Plugin to add inline table of contents (TOC) to each page using sticky and scrollspy effects. billryan/gitbook-plugin-etoc: Elegant toc plugin for GitBook  参考:\n GitBookによるドキュメント作成 - Qiita  ","excerpt":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発 …","ref":"/tech-notes/a/software/static-site-generator/gitbook/","title":"GitBook"},{"body":"Getting Started 公式リファレンスは↑\nサードパーティーのリファレンス的資料:\n GNU make 日本語訳(Coop編) - 目次 \u0026hellip; 1998年ぐらい。古い Makefileの関数 - Qiita  Quickstart 使えるMakefileの例\n.PHONY: default build clean default: build clean: rm -rf dist/ timestamp: date +%s \u0026gt; timestamp build: timestamp another-file some_build_command NOTE:\n ターゲットの依存ターゲットは複数記すことができる。  参考:\n - 自動化のためのGNU Make入門講座 - Makefileの基本：ルール  Makefile 構文 変数 変数定義のやり方について。\n\u0026ldquo;=\u0026rdquo; と \u0026ldquo;:=\u0026rdquo; は違う。\nsrc = foo.c ymd := $(shell date +%Y%m%d) 参考:\n GNU make: 6. 変数の使用法  $(CURDIR) makeを実行しているプロセスのカレントディレクトリを返す。\n参考:\n https://www.gnu.org/software/make/manual/html_node/Recursion.html 今日のMake Tips：CURDIR変数 - 檜山正幸のキマイラ飼育記  関数 $(foreach name, LIST, command) ループ実行\n.PHONYターゲット https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html\nファイルを生成しないやつ\n.PHONY: clean clean: rm *.o tmp 複数の.PHONYターゲットをまとめて記述することもできる\n.PHONY: all clean deps 条件分岐 7 Conditional Parts of Makefiles\nExample:\nlibs_for_gcc = -lgnu normal_libs = foo: $(objects) ifeq ($(CC),gcc) $(CC) -o foo $(objects) $(libs_for_gcc) else $(CC) -o foo $(objects) $(normal_libs) endif makeコマンド 公式マニュアル:\n 9 How to Run make  9.5 Overriding Variables 9.7 Summary of Options    SYNOPSIS:\n# デフォルトのタスク（＝最上部で定義されたタスク）を実行 make # タスク名を指定して実行。複数指定可 make task1 [task2 ...] # Makefileを指定する make -f|--file \u0026lt;Makefile\u0026gt; # dry-run make -n|--dry-run # 変数の設定 # Makefile内で定義されていれば、オーバーライドする make CFLAGS=-g その他のオプション:\n   オプション 意味     -j|--jobs[=N] 同時実行数を指定。See 5.4 Parallel Execution   -e|--environment-overrides 環境変数をオーバーライドする   -d デバッグ情報を表示。 --debug=a と同じ   --trace 実行時のトレース情報を表示する   -s|--silent|--quiet 実行されるタスクをプリントしない   -h|--help ヘルプ表示   -v|--version バージョン表示    Tips 必要なディレクトリを作ってタスク実行 BUILD_DIR := path/to/build $(BUILD_DIR): mkdir -p $(BUILD_DIR) all: $(BUILD_DIR) cd $(BUILD_DIR) \u0026amp;\u0026amp; some_commands .PHONY: all 環境変数の取扱い 環境変数はMakeの変数として参照できる。例: $(CFLAGS)\n参考:\n GNU Make のふたつの変数の使い分け - Qiita GNU make 日本語訳(Coop編) - 変数の利用法  How-to コマンドに引数を渡したい make CFAGS=-g みたいに変数経由で渡すことになりそう。\n参考:\n Makefileにパラメータを渡す方法と条件文 - Qiita  参考  Makefileで遊ぼう 〜 階乗, フィボナッチ数, Brainfuck処理系まで - プログラムモグモグ  入門レベルで割とよく使う感じの機能がまとまってる。    ","excerpt":"Getting Started 公式リファレンスは↑\nサードパーティーのリファレンス的資料:\n GNU make 日本語訳(Coop編) - 目次 \u0026hellip; 1998年ぐらい。 …","ref":"/tech-notes/a/software/make/","title":"GNU make"},{"body":"ITインフラの構成をコードで管理できるようにしてくれるソフトウェアについて書く。\nSoftware  Pulumi \u0026hellip; 各種クラウドの構成管理を高級言語で行える Go CDK (Cloud Development Kit) Terraform  ","excerpt":"ITインフラの構成をコードで管理できるようにしてくれるソフトウェアについて書く。\nSoftware  Pulumi \u0026hellip; 各種クラウドの構成管理を高級言語で行える Go CDK …","ref":"/tech-notes/a/software/infra-as-code/","title":"Infrastructure as Code"},{"body":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started  Install   Content Management  Front Matter \u0026hellip; ページに対して付けることができるメタデータ   :  Getting Started Install 拡張版のインストール 通常版では、SASS/SCSSサポートがついていないので、必要であれば明示的に拡張版をインストールしないといけない。\nINFO 2020-04-27現在、Macの場合は brew install hugo で拡張版がインストールされるようだ。  参考:\n Themes \u0026gt; Docsy [Hugo]Hugoの通常バージョンとExtendedバージョンとの違い[memo] | 鈍色スイッチ  バイナリをインストール GitHub Releasesから _extended 付きのバイナリを取得する。\nソースからインストール git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended Linux Snapの場合:\nsnap install hugo --channel=extended Quickstart # 新しくサイトを作る hugo new site your-new-site # テーマを用意する cd your-new-site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # コンテンツを作成する hugo new posts/my-first-post.md # hugo serverを起動 hugo server -D ## -D を付けることで draft のページも表示される Configuration Table Of Contents https://gohugo.io/getting-started/configuration-markup/#table-of-contents\n※Goldmarkのみ\n[markup] [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 Writing Pages 記事の作成・編集で使う基本的な機能などについて書く。\n画像の挿入 現在は記事の近くに画像を置いて、相対パスで参照できる。\n\u0026lt;!-- \u0026#34;\\\u0026#34;は除いて書くこと --\u0026gt; {{\\\u0026lt;figure src=\u0026#34;image.png\u0026#34; alt=\u0026#34;blur\u0026#34;\u0026gt;}} See #figure\nShortcodes https://gohugo.io/content-management/shortcodes/\n便利な機能が {{\\\u0026lt;function ... \u0026gt;}} という構文のShortcodeという形式で提供されている。\n自分で独自のShortcodeを作成することもできる。\nfigure https://gohugo.io/content-management/shortcodes/#figure\nHTML5の\u0026lt;figure\u0026gt;要素を作る。\n   パラメータ 意味     src 画像のURL（パス）。必須   alt 画像非表示時の代替テキスト   title 画像タイトル    Known Issues 完全なページツリーを描画する機能がない ワークアラウンドでの対応が必要。\nMulti-level sections (tree) · Issue #465 · gohugoio/hugo\nワークアラウンド例:\n http://vjeantet.github.io/hugo-menu-show/  ソースコード    参考:\n サイドバー用のページツリーを表示する（現在表示しているページを考慮した階層表示） | まくまくHugo/Goノート  MEMO:\n Docsyテーマでのサイドバーの実現方法が参考になるかも。  Child Pages ","excerpt":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started  Install …","ref":"/tech-notes/a/software/static-site-generator/hugo/","title":"Hugo"},{"body":"JSONにクエリしてフィルタできるCLIツール。\nDocuments  https://stedolan.github.io/jq/tutorial/ https://stedolan.github.io/jq/manual/  チートシート # オブジェクトの特定キーの要素を抽出 cat foo.json | jq \u0026#39;.some_key\u0026#39; # 配列の特定要素を抽出 cat foo.json | jq \u0026#39;.[0]\u0026#39; # 配列の個々のオブジェクトの特定キーを抽出 cat foo.json | jq \u0026#39;.[] | .some_key\u0026#39; # 配列の個々のオブジェクトからいくつかの要素を選んでそれぞれ配列に格納 cat foo.json | jq \u0026#39;.[] | [.keyA, .keyB, .keyC.keyAinC]\u0026#39; # CSV形式で出力 cat foo.json | jq \u0026#39;.[] | [.keyA, .keyB, .keyC] | @csv\u0026#39; # 配列の個々のオブジェクトからいくつかの要素を選んで新たなオブジェクトを作り、それぞれ出力 cat foo.json | jq \u0026#39;.[] | {a: .keyA, b: .keyB, ca: .keyC.keyAinC}\u0026#39; 参考:\n jq チートシート - Qoosky jq コマンドで JSON を CSV に変換する - VELTRA Engineering - Medium  ","excerpt":"JSONにクエリしてフィルタできるCLIツール。\nDocuments  https://stedolan.github.io/jq/tutorial/ …","ref":"/tech-notes/a/cli/jq/","title":"jq"},{"body":"関連ページ:\n Google Cloud \u0026gt; GKE  Getting Started Documentation  https://kubernetes.io/docs/home/ \u0026hellip; ドキュメント  https://kubernetes.io/docs/tutorials/ \u0026hellip; チュートリアル https://kubernetes.io/docs/tasks/ \u0026hellip; How-toガイド Standardized Glossary - Kubernetes \u0026hellip; 用語集    参考:\n Kubernetes道場 Advent Calendar 2018 - Qiita  リファレンス  https://kubernetes.io/docs/reference/  APIリファレンス CLIリファレンス etc.    ベストプラクティス  Configuration Best Practices | Kubernetes  ケーススタディ 参考:\n Kubernetes Failure Stories  Versions  Kubernetes version and version skew support policy - Kubernetes  How-to Podの再起動  K8sはクラスタの状態を宣言型で記述するので、「再起動する」というのを指示するのは難しいようだ 下の記事にあるように、Deploymentの定義を変えてapplyするのが良いだろう レプリカの数を0にして増やすという手もある  See\n 全ての Pod を一発でリロードさせる方法 - Qiita  複数クラスタを設定する  https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/ \u0026hellip; kubectl config use-context で複数クラスタを切り替えられるようにする設定チュートリアル  機密情報や環境設定の扱い SecretsやConfigMapを使う。\n参考:\n Kubernetes 上で Credentials を扱う | tellme.tokyo  Namespaceの削除 https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#deleting-a-namespace\nkubectl delete namespace my-ns kubectl delete -f my-ns.yml 参考:\n Kubernetesでnamespaceを作成・変更・削除する方法 - Qiita [小ネタ]Kubernetesで消せないNamespaceが発生した場合の対処方法 | Developers.IO  Topics CFS quotaが有効のときCPU limits設定によってコンテナがストールする問題 2018年には起こっていた問題。\n2020-04-14現在の状況は不明。\nTL;DR:\n KubeletでCPU CFS quota有効だと問題  OS kernelのスケジューラがCFSだったらデフォルト有効だと思う   デフォルトの cpu.cfs_period_us が100ms \u0026hellip; この単位時間でクォータがリセットされる マルチコアのマシン上に複数Podがスケジュールされたとき、複数のPodが同時にCPUを使うと、すぐにlimitsに達してスロットルされてしまうことが起こり得る  仕組みについては、下の記事が詳しい:\n CPU limits and aggressive throttling in Kubernetes - Omio Engineering - Medium  関連リソース:\n CFS quotas can lead to unnecessary throttling · Issue #67577 · kubernetes/kubernetes \u0026hellip; 2020-04-14現在、まだOpen Optimizing Kubernetes Resource Requests/Limits for Cost-Efficiency an… pp.24-43 Control CPU Management Policies on the Node - Kubernetes Kubernetesのresource requests, limits - Carpe Diem Kubeletの設定:  kubelet - Kubernetes Set Kubelet parameters via a config file - Kubernetes    クラスタが大きくなるとどんな問題があるか？ 巷では不安定になるとよく言われるが、どのくらいやばいのか、どんな問題が起こり得るのかを考察する。\n起こり得る問題:\n Pod Affinityを使っている場合に、スケジューリングが遅くなる。  ref. https://kubernetes.io/ja/docs/concepts/configuration/assign-pod-node/     Inter-Pod AffinityとAnti-Affinityは、大規模なクラスター上で使用する際にスケジューリングを非常に遅くする恐れのある多くの処理を要します。 そのため、数百台以上のNodeから成るクラスターでは使用することを推奨されません。\n GKE (Google Kubernetes Engine) の場合  内部TCP/UDPロードバランサのバックエンドVMの最大数が250  https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing?hl=ja#limits    Child Pages ","excerpt":"関連ページ:\n Google Cloud \u0026gt; GKE  Getting Started Documentation  https://kubernetes.io/docs/home/ …","ref":"/tech-notes/a/software/k8s/","title":"Kubernetes"},{"body":" A \u0026ldquo;backend\u0026rdquo; in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc.\n Documentation  Configuration Init State Storage \u0026amp; Locking  gcs https://www.terraform.io/docs/backends/types/gcs.html\nExample:\nterraform { backend \u0026#34;gcs\u0026#34; { bucket = \u0026#34;tf-state-prod\u0026#34; prefix = \u0026#34;terraform/state\u0026#34; } }  認証用の credentials または access_token が必要。  config variables  credentials \u0026hellip; GCPのサービスアカウントキー（JSON）のパスを指定する  環境変数 GOOGLE_BACKEND_CREDENTIALS or GOOGLE_CREDENTIALS によってパスを指定することもできる https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login で作成できるユーザのApplication Default Credentialsでも良い    gcloud auth application-default login See also:\n Providers \u0026gt; Google  s3 https://www.terraform.io/docs/backends/types/s3.html\n ロックしたいときはDynamoDBを使う。  オプション dynamodb_table を指定する    ","excerpt":"A \u0026ldquo;backend\u0026rdquo; in Terraform determines how state is loaded and how an operation such as …","ref":"/tech-notes/a/software/terraform/backend/","title":"Backends"},{"body":"エディタや統合開発環境についても、このセクション下に書くことにする。\nシェルスクリプトについては、CLI以下を見よ。\nChild Pages ","excerpt":"エディタや統合開発環境についても、このセクション下に書くことにする。\nシェルスクリプトについては、CLI以下を見よ。\nChild Pages ","ref":"/tech-notes/a/program/","title":"プログラミング"},{"body":"About Linux（リナックス）とは - IT用語辞典 e-Wordsによれば、「世界で最も普及している、オープンソースのOS」。\n The Linux Kernel Archives The Linux Foundation – Supporting Open Source Ecosystems Linux.org  Kernel Signal Man page of SIGNAL\nプロセス間通信の仕組みの1つ。\nシグナルの一部:\n   番号 シグナル名     1 HUP   2 INT   3 QUIT   9 KILL   10 USR1   11 SEGV   13 PIPE   14 ALRM   15 TERM   17 CHLD   18 CONT    シグナルの一覧は kill -l などのコマンドで確認できる。\nSee Also:\n UNIX系コマンド#kill(1)  参考:\n シグナル (Unix) - Wikipedia UNIXシグナル一覧 CapmNetwork  Process Exit Code 予約済みExit Codes:\n   Code Meaning 備考     1 エラー全般    2 シェルビルトイン関数の誤用    126 コマンド実行不可    127 command not found    128 exitに不正な引数    128+n シグナル n で致命的エラー KILL =\u0026gt; 137, TERM =\u0026gt; 143   130 Ctrl-C    255* 範囲外のステータス     参考:\n Exit Codes With Special Meanings コマンドラインツールを書くなら知っておきたい Bash の 予約済み Exit Code - Qiita  セキュリティ SELinux RHEL系の機能かな（？）\n SELinuxの無効化 - Qiita 5.4. SELinux の有効化および無効化 - Red Hat Customer Portal  ","excerpt":"About Linux（リナックス）とは - IT用語辞典 e-Wordsによれば、「世界で最も普及している、オープンソースのOS」。\n The Linux Kernel Archives The …","ref":"/tech-notes/a/os/linux/","title":"Linux"},{"body":"Rust製のGitBookみたいなもの。\n高速でよさそう。\nDocumentation 上のサイトがドキュメントを兼ねている。\n CLI  インストール方法はこちら サブコマンド:  init build serve      CLI \u0026amp; Quickstart # 新しくブックのディレクトリを作り、初期セットアップを行う mdbook init \u0026lt;your-book-directory\u0026gt; # デフォルトでHTMLを ./book にビルド mdbook build [OPTIONS] # デフォルトで ./book 以下のHTMLを元にHTTPサーバを起動 mdbook serve [OPTIONS] NOTE:\n 2020-05-06現在、 serve コマンドはHTML表示のテスト用で、Webサイト用の完全なサーバ機能を目指したものではないとのこと  MEMO 2020-04-29  config: https://rust-lang.github.io/mdBook/format/config.html サイドバーに目次ツリーが表示されているが、 [output.html.fold] で挙動を変えられそう。  https://github.com/rust-lang/mdBook/pull/1027   目次（Table of Contents）は公式サポートないのかも。イシューになってる  {{#toc}}{{/toc}} で行けるんじゃないのかな？  https://rust-lang.github.io/mdBook/format/theme/index-hbs.html#1-toc （2020-05-06追記）愚直に書き足したところ、駄目だった   https://github.com/rust-lang/mdBook/issues/153 自作している人がいる  https://github.com/badboy/mdbook-toc      ","excerpt":"Rust製のGitBookみたいなもの。\n高速でよさそう。\nDocumentation 上のサイトがドキュメントを兼ねている。\n CLI  インストール方法はこちら サブコマンド:  init …","ref":"/tech-notes/a/software/static-site-generator/mdbook/","title":"mdBook"},{"body":"シェルソフトウェアやシェルスクリプトについてもこのセクションで扱う。\nターミナルソフトウェアについてはSoftware \u0026gt; ターミナルを見よ。\nリファレンス  SS64 Command line reference \u0026hellip; Linux, macOS etc.  macOSのmanはやや古いかも。不備が散見される    direnv https://github.com/direnv/direnv\nDocumentation:\n Installation  macOSはHomebrewを使える Ubuntuはaptかsnapで入れられる   Setup  Bash: eval \u0026quot;$(direnv hook bash)\u0026quot; をbashrcに書く Zsh: eval \u0026quot;$(direnv hook zsh)\u0026quot; をzshrcに書く    ロギング script 参考:\n scriptコマンドで作業ログを記録 ｜ DevelopersIO  Child Pages ","excerpt":"シェルソフトウェアやシェルスクリプトについてもこのセクションで扱う。\nターミナルソフトウェアについてはSoftware \u0026gt; ターミナルを見よ。\nリファレンス  SS64 Command line …","ref":"/tech-notes/a/cli/","title":"CommandLine Interface"},{"body":"HTTP https://www.terraform.io/docs/providers/http/\nhttp Data Source https://www.terraform.io/docs/providers/http/data_source.html\nSYNOPSIS:\ndata \u0026#34;http\u0026#34; \u0026#34;example\u0026#34; { url = \u0026#34;https://checkpoint-api.hashicorp.com/v1/check/terraform\u0026#34;# Optional request headers request_headers = { \u0026#34;Accept\u0026#34; = \u0026#34;application/json\u0026#34; } } curlで取ってくるようなデータはこれを使えばいい。\n参考:\n TerraformでJSONを扱う方法 - Qiita Getting my own Public IP : Terraform  Kubernetes  https://www.terraform.io/docs/providers/kubernetes/ https://github.com/terraform-providers/terraform-provider-kubernetes  K8sのリソースオブジェクトを管理できる。\nResources  kubernetes_deployment  Local https://www.terraform.io/docs/providers/local/\nローカルのファイルをData Sourceとして読んだり、Resourceとして作成・管理したり。\nData Source https://www.terraform.io/docs/providers/local/d/file.html\ndata \u0026#34;local_file\u0026#34; \u0026#34;foo\u0026#34; { filename = \u0026#34;${path.module}/foo.bar\u0026#34; } Attributes Exported:\n content content_base64  Resource https://www.terraform.io/docs/providers/local/r/file.html\nresource \u0026#34;local_file\u0026#34; \u0026#34;foo\u0026#34; { content = \u0026#34;foo!\u0026#34; filename = \u0026#34;${path.module}/foo.bar\u0026#34; file_permission = \u0026#34;0644\u0026#34; directory_permission = \u0026#34;0755\u0026#34; } Arguments:\n filename 以外はOptional file_permission, directory_permission のデフォルトは \u0026quot;0777\u0026quot;  Random https://www.terraform.io/docs/providers/random/\n乱数値の生成などで使える。\n生成した値はtfstateに保存され、生成時のパラメータが変わらない限り都度、生成することはない。\nResources:\n random_id :  Template https://www.terraform.io/docs/providers/template/\nExample:\n# Template for initial configuration bash script data \u0026#34;template_file\u0026#34; \u0026#34;init\u0026#34; { template = \u0026#34;${file(\u0026#34;init.tpl\u0026#34;)}\u0026#34; vars { consul_address = \u0026#34;${aws_instance.consul.private_ip}\u0026#34; } }# Create a web server resource \u0026#34;aws_instance\u0026#34; \u0026#34;web\u0026#34; {# ...  user_data = \u0026#34;${data.template_file.init.rendered}\u0026#34; } Other Providers ","excerpt":"HTTP https://www.terraform.io/docs/providers/http/\nhttp Data Source …","ref":"/tech-notes/a/software/terraform/provider/","title":"Providers"},{"body":"","excerpt":"","ref":"/tech-notes/a/web-service/","title":"Webサービス"},{"body":"旧称 Mac OS X.\nApple社のPCに搭載されているOS.\nBSD系のUnixを元に作られているらしい。\n関連ページ:\n Software \u0026gt; パッケージ管理 \u0026gt; Homebrew  ショートカットキー（Touch Bar登場前） 凡例\n   略記 意味     {電源} 電源キーまたはメディア取り出しキー       Key 機能     Ctrl + Shift + {電源} ディスプレイをスリープにする。画面ロック   Ctrl + {電源} 「再起動・スリープ・システム終了」ダイアログを表示    参考:\n Mac のキーボードショートカット - Apple サポート Macの起動・スリープ・再起動・終了のキーボードショートカットまとめ（27種類） / Inforati  ごみ箱 ~/.Trash にある。\nConfiguration Touch Bar ボタン配置を変える方法:\n 「システム環境設定 \u0026gt; キーボード \u0026gt; Touch Barをカスタマイズ」  2020-05-18 macOS Mojaveで確認    参考:\n macOSで画面ロック/スクリーンセーバ起動を 1 操作で実行する 3 通りの方法 | Developers.IO  機能 Quick Look（クイックルック） Tips:\n GIFアニメや動画ファイルをFinderなどで選択し、スペースキーを押すと簡単に再生画面が見られる 他のファイルにも対応しており、色々便利っぽい  参考:\n Quick Look（クイックルック）について押さえておきたい基礎知識｜Mac - 週刊アスキー MacでGIFアニメを簡単に再生する方法 | iTea4.0  標準アプリ コンソール console.app\nアプリケーションのクラッシュレポートなどが見れる。\n参考:\n ReportCrashを解決する方法を… - Apple コミュニティ  How-to JIS キーボードでの \\ の入力方法 option + ¥ で \\ が入力できる。\n後述の方法も参照。\n参考:\n Macにおけるバックスラッシュ（\\）の入力方法 - Qiita  IMEの設定で「¥」キーで入力する文字を変える Google日本語入力の場合、「環境設定 \u0026gt; 一般 \u0026gt; ¥キーで入力する文字」で「バックスラッシュ（\\）」を選べば良い。\n画面を動画で撮影してGIFアニメに変換 動画のキャプチャについて:\n OS VersionがMojave以上 -\u0026gt; macOSの機能でできる OS VersionがMojave未満 -\u0026gt; QuickTime Playerで撮影  動画 -\u0026gt; GIF変換ツール:\n Gifted PicGIF Lite  キャプチャして直接GIFに保存できるもの:\n LICEcap  参考:\n 【小ネタ】Macの画面を録画して、GIFアニメにする方法 | Developers.IO 【Mac】自分の画面を録画して、即gif動画化する方法 - Qiita Macでキー入力表示しつつターミナル操作をアニメーションGIFにする - くりにっき  ターミナルアプリの場合 ttyrecというツールがある。\nTips:\n KeyCastrというソフトを使うと、キー入力を動画に入れることができる。  参考:\n ttygifでターミナルを録画してgifにする - Qiita 2019-10-28 Macでのキー入力をディスプレイ上に表示してくれるオープンソースのキーストロークビジュアライザー「KeyCastr」がダークモードに対応し、GPU切り替えの不具合を修正。 | AAPL Ch.  GNUコマンドを使う macOSのコマンドは慣れ親しんでいるLinuxのコマンドと微妙なオプション差異があってハマることが度々ある。\n下記表のHomebrewパッケージを入れることで、多くのLinuxで使われているGNU版のコマンドが使えるようになる。\n※()内がGNU版の対応するコマンド。prefix g がつくことが多い\n   パッケージ 使えるコマンド     coreutils realpath, cp, mv, ls, \u0026hellip;   gnu-sed gsed (sed)   gawk gawk (awk)   gzip    gnu-tar    gnu-time    gnu-getopt    binutils ar, gar, \u0026hellip;   diffutils diff, cmp, \u0026hellip;   findutils find, locate, xargs, \u0026hellip;   moreutils pee, \u0026hellip;    参考:\n Homebrewを用いてGNU系コマンドをインストール（macOS） - Qiita macで使いにくいコマンドをLinuxに合わせる - Qiita  Spec システム仕様、内部仕様などをここに記す。\nファイルシステム  APFS (Apple File System) \u0026hellip; Hi Sierra (10.13) 以降  タイムスタンプの精度がナノ秒になった   HFS+ \u0026hellip; APFS以前  タイムスタンプの精度が秒単位だった    参考:\n ファイルシステムがAPFSになった事による変更点 - ナレッジ | フォーカスシステムズ サイバーフォレンジックセンター macos - How to return millisecond information for File Access on Mac Os X (in Java)? - Stack Overflow  ","excerpt":"旧称 Mac OS X.\nApple社のPCに搭載されているOS.\nBSD系のUnixを元に作られているらしい。\n関連ページ:\n Software \u0026gt; パッケージ管理 \u0026gt; Homebrew …","ref":"/tech-notes/a/os/mac/","title":"macOS"},{"body":"はじめに man pageはUnix系システムで広く使われるマニュアルページのフォーマットである。\nPOSIXとLinuxではやや仕様が異なるようだ。\n筆者はLinuxに馴染みが深いので、以下は基本的にLinuxについて記す。\n参考:\n POSIX 1003.1 - man page for man (posix section 1P) - Unix \u0026amp; Linux Commands  CLI Usage Examples:\nman ls ## セクション番号を指定する man 1 printf man 3 printf ドキュメント  http://man7.org/linux/man-pages/man1/man.1.html http://man7.org/linux/man-pages/man7/man-pages.7.html  仕様 セクション番号とその意味  実行可能プログラム、またはシェルコマンド システムコール ライブラリ関数 スペシャルファイル(/dev/ にある) ファイルの書式や規約 ゲーム 雑多なこと(マクロや規約を含む) システム管理コマンド(通常はroot用) カーネルルーチン ※非標準  ","excerpt":"はじめに man pageはUnix系システムで広く使われるマニュアルページのフォーマットである。\nPOSIXとLinuxではやや仕様が異なるようだ。\n筆者はLinuxに馴染みが深いので、以下は基本的 …","ref":"/tech-notes/a/document/man/","title":"man page"},{"body":"CommonMark https://commonmark.org/\nMarkdownの原典というべき仕様だが、表現力が乏しかったので亜種がたくさん生まれた。\nMarkdownの亜種  GitHub Flavored Markdown  おそらく最も普及している亜種。GitHubでサポートされている。他の亜種もこの仕様を参考にしているものが多そう。デファクトといってもいいかも    How-to バックティック「`」のエスケープ 字の文で「`」を表示するには、 \\` のようにエスケープすればいい。\n「`」で囲んだコード内で「`」を入力するにはどうすればよいか？\nこのケースでは、エスケープはしなくていい。\n下のように「``」で囲み、ホワイトスペースを挟んで記述すると、 ` と表示される。\n`` ` `` MEMO:\n 2020-05-24 やり方がわからなくてググっていたら下の参考記事を見つけた。  参考:\n Markdown のインラインコードでバックティックやバックスラッシュをエスケープする方法 - yu8mada  ","excerpt":"CommonMark https://commonmark.org/\nMarkdownの原典というべき仕様だが、表現力が乏しかったので亜種がたくさん生まれた。\nMarkdownの亜種  GitHub …","ref":"/tech-notes/a/document/markdown/","title":"Markdown"},{"body":"https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\nKubernetesでは、複数の仮想的なクラスタを同じ物理クラスタ上に構築することができる。この仮想クラスタのことを Namespace と呼ぶ。\nExample:\napiVersion:v1kind:Namespacemetadata:name:myapp参考:\n Kubernetes道場 15日目 - Namespace / Resource QoS / ResourceQuota / LimitRangeについて - Toku\u0026rsquo;s Blog  リソース管理 See also Concept#コンテナやpodへのcpuメモリの割当て\nResourceQuotasやLimitRangeを設定することで、リソース管理をよりいい感じに行えるっぽい。（が、逆に面倒ではないかという気もする。）\nResourceQuotas https://kubernetes.io/docs/concepts/policy/resource-quotas/\nExample:\napiVersion:v1kind:ResourceQuotametadata:name:compute-resourcesspec:hard:requests.cpu:\u0026#34;1\u0026#34;requests.memory:1Gilimits.cpu:\u0026#34;2\u0026#34;limits.memory:2Gi適用例:\nkubectl create -f ./compute-resources.yaml --namespace=myspace Note:\n ResourceQuotaを設定したnamespaceに属する全Podの合計値が上限になる cpu, memory以外も色々ある  LimitRange https://kubernetes.io/docs/concepts/policy/limit-range/\nExample:\napiVersion:v1kind:LimitRangemetadata:name:limit-mem-cpu-per-containerspec:limits:- max:cpu:\u0026#34;800m\u0026#34;memory:\u0026#34;1Gi\u0026#34;min:cpu:\u0026#34;100m\u0026#34;memory:\u0026#34;99Mi\u0026#34;default:cpu:\u0026#34;700m\u0026#34;memory:\u0026#34;900Mi\u0026#34;defaultRequest:cpu:\u0026#34;110m\u0026#34;memory:\u0026#34;111Mi\u0026#34;type:Container namespaceに対して設定する cpu/memoryのrequests/limitsの下限、上限、デフォルト値を設定できる  ","excerpt":"https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\nKubernetesでは、複数の仮想的なクラスタを同じ物理クラスタ上に構 …","ref":"/tech-notes/a/software/k8s/namespace/","title":"Namespace"},{"body":"Plugins 次節以降で紹介していないもの:\n ervandew/supertab \u0026hellip; タブ補完を可能にしてくれる  補完リストのスクロールを上から下にしたい場合、vimrcに\nlet g:SuperTabDefaultCompletionType = \u0026quot;\u0026lt;c-n\u0026gt;\u0026quot;\nを設定する   cespare/vim-toml \u0026hellip; TOMLのシンタックスハイライト kana/vim-operator-user \u0026hellip; 後掲のvim-operator-replaceなどが依存している  ドキュメント: Vim: operator-user - Define your own operator easily    参考:\n vim – 強力なおすすめプラグイン – MY ROBOTICS 僕がVimで愛用しているプラグイン30連発 | 東京のWeb制作会社LIG  ctrlp.vim https://github.com/ctrlpvim/ctrlp.vim\nディレクトリ下のファイルからファイル名をインクリメンタル検索して開いたり、バッファ一覧から検索したり、開いてるバッファの該当行を探してジャンプしたりできる。\nvimrc設定例:\n\u0026#34; \u0026lt;C-p\u0026gt;で実行するフィーチャーをCtrlPMixedに変更\u0026#34; カレントディレクトリ下のファイル検索 + バッファ一覧 + 最後に開いたファイルリストlet g:ctrlp_cmd = \u0026#39;CtrlPMixed\u0026#39;\u0026#34; \u0026lt;C-p\u0026gt;で実行するコマンドを変更\u0026#34; git下じゃないときはvimのglobとかにフォールバックしてくれるlet g:ctrlp_user_command = \\ [\u0026#39;.git\u0026#39;, \u0026#39;cd %s \u0026amp;\u0026amp; git ls-files -co --exclude-standard\u0026#39;]nnoremap \u0026lt;Leader\u0026gt;/ \u0026lt;ESC\u0026gt;:CtrlPLine\u0026lt;Return\u0026gt;参考:\n ctrlp.vimの使い方まとめ - Qiita vimのファイル検索プラグインctrlp.vimの設定 – MY ROBOTICS  NERDTree https://github.com/scrooloose/nerdtree\n有名なVimのファイラプラグイン。\nUsage ツリービューの操作:\n   キー 用途     ? help表示（トグル）   I 隠しファイルの表示（トグル）    ファイル・ディレクトリを作成 ファイルツリーの任意の位置で m を押すとメニューが表示されるので、 (a)dd a childnode を選ぶ。\nディレクトリを作る場合は末尾に / を入力すること。\nでないと、空のファイルが作られる。\nCtrl-C でメニューを抜けることができた。(Macで)\nvim-operator-replace https://github.com/kana/vim-operator-replace\nドキュメント:\n Vim: operator-replace - Operator to replace text with register content  ヤンクしているテキストでカーソル下のテキストを置き換える。\nvimrc設定例:\nnmap \u0026lt;Space\u0026gt; \u0026lt;Plug\u0026gt;(operator-replace)※ドキュメントでは map になっているが、 nmap でも動いた。\n下のようなテキストを編集する:\nfoo bar baz 3行とも foo にしたいときは次のように操作すればいい:\n カーソルを先頭行 f 位置に置き、「ye」とタイプして foo をヤンク 「j」を押して2行目の行頭にカーソルを移動し、「e」とタイプする 「j^」とタイプして3行目の行頭に移動し、「.」をタイプする  （参考記事の通りにやるのは難しかった。。）\n参考:\n vim-operator-replaceでコピペを簡単に - 僕のYak Shavingは終わらない  yankround.vim https://github.com/LeafCage/yankround.vim\nレジスタ履歴を取得・再利用する。\nvimrc設定例:\nnmap p \u0026lt;Plug\u0026gt;(yankround-p)xmap p \u0026lt;Plug\u0026gt;(yankround-p)nmap P \u0026lt;Plug\u0026gt;(yankround-P)nmap gp \u0026lt;Plug\u0026gt;(yankround-gp)xmap gp \u0026lt;Plug\u0026gt;(yankround-gp)nmap gP \u0026lt;Plug\u0026gt;(yankround-gP)nmap \u0026lt;C-p\u0026gt; \u0026lt;Plug\u0026gt;(yankround-prev)nmap \u0026lt;C-n\u0026gt; \u0026lt;Plug\u0026gt;(yankround-next)nnoremap \u0026lt;Leader\u0026gt;y \u0026lt;ESC\u0026gt;:Unite yankround\u0026lt;Return\u0026gt;p や P でヤンクを貼り付けた後、 \u0026lt;C-p\u0026gt; や \u0026lt;C-n\u0026gt; で順に操作して選べる。\n:Unite yankround でUniteの小画面を開いてレジスタを一覧できる。 この小画面内で d でレジスタを消したり、 x で素早く対象を選んだりできる。（Unite全然使い倒してない）\nctrlp.vimと組み合わせると :CtrlPYankRound というコマンドが使えるようになって、これもレジスタを一覧できるのだけど、レジスタの内容でインクリメンタル検索できないので、 :Unite yankround の方が使いやすい。\n（GitHubにイシューが挙がっている。）\n参考:\n vimの便利なPlugin（その26）yankround | 技術者魂  ","excerpt":"Plugins 次節以降で紹介していないもの:\n ervandew/supertab \u0026hellip; タブ補完を可能にしてくれる  補完リストのスクロールを上から下にしたい場合、vimrcに\nlet …","ref":"/tech-notes/a/program/vim/plugin/","title":"Vim Plugins"},{"body":"1つ以上のコンテナを内包する、ワークロードの基本単位。\nSee also Container\nスケジューリング Node上へのPodのスケジューリング - Kubernetes\nNOTE:\n Podが起動できない理由:  OutOfMemory, OutOfCpu \u0026hellip; Nodeのリソースが足りない    Affinity  Node上へのPodのスケジューリング - Kubernetes#AffinityとAnti-Affinity  参考:\n Kubernetes道場 18日目 - Affinity / Anti-Affinity / Taint / Tolerationについて - Toku\u0026rsquo;s Blog KubernetesのNode AffinityとInternal Pod Affinityを使ってPodを高度スケジューリングする - Kekeの日記 KubernetesのNode Affinity, Inter-Pod Affinityについて - Qiita  TaintsとTolerations Taints and Tolerations - Kubernetes\nKubernetesのTaintsとTolerationsについて - Qiitaより:\n Node SelectorやNode Affinityが特定のノードに特定のPodをスケジュールするための仕組みに対し、TaintsとTolerationsは特定のノードにPodをスケジュールしないための仕組み\n ライフサイクル Podのライフサイクル - Kubernetes\nSee also Container#lifecycle-hooks\nPodの終了 https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods\n参考:\n Kubernetes: 詳解 Pods の終了 - Qiita KubernetesでRollingUpdateするためのPodの安全な終了 | SIOS Tech. Lab  Topics CrashLoopBackOff 発生条件:\n memory limits以上を使おうとしてOOMで殺され、繰り返し再起動されるとき  再起動間隔はexponential backoffで延びる    参考:\n KubernetesのResource RequestsとResource Limitsについて - Qiita  Pod Eviction See Concept#pod-eviction\n","excerpt":"1つ以上のコンテナを内包する、ワークロードの基本単位。\nSee also Container\nスケジューリング Node上へのPodのスケジューリング - Kubernetes\nNOTE:\n Podが …","ref":"/tech-notes/a/software/k8s/pod/","title":"Pod"},{"body":"Documentation 公式サイト: https://www.spinnaker.io/\n Set up Spinnaker  Cloud Providers  Docker Registry Kubernetes v2  GKE       Guides  Tutorials  Codelabs  Safe Deployments       Reference  API https://www.spinnaker.io/reference/api/docs.html    Quickstart 参考:\n https://github.com/spinnaker/spinnaker.github.io/blob/master/downloads/kubernetes/quick-install.yml  Concepts  Overview  Application management  :   Application deployment  Pipeline Stage Deployment strategies      Guides https://www.spinnaker.io/guides/\nKubernetes https://www.spinnaker.io/guides/user/kubernetes-v2/\n Deploy Kubernetes Manifests Patch Kubernetes Manifests  K8sのmanifestをpatch更新できる。 参考: Update API Objects in Place Using kubectl patch - Kubernetes   Rollout Strategies  ※ReplicaSetのみ有効 https://www.spinnaker.io/guides/user/kubernetes-v2/traffic-management/#you-must-use-replica-sets Red/Black Rollouts    参考:\n Introducing Rollout Strategies in the Kubernetes V2 Provider  Reference https://www.spinnaker.io/reference/\nArtifacts https://www.spinnaker.io/reference/artifacts/\n外部リソースを参照するオブジェクト。\n例:\n Dockerイメージ GCSやS3内のバイナリ  Artifacts In Kubernetes (Manifest Based) いくつかのリソースは vNNN 形式でSpinnaker内でバージョンが振られる。\nComponents    component description     Clouddriver クラウドインフラとのやりとりを司る   Deck Web UI   Gate API Gateway   Orca オーケストレーションエンジン    参考:\n Authentication - Spinnaker Horizontally Scale Spinnaker Services - Spinnaker  Spec Authentication / 認証 https://www.spinnaker.io/setup/security/authentication/\nGoogle Cloud IAPによる認証 参考:\n https://www.spinnaker.io/reference/halyard/commands/#hal-config-security-authn-iap Spinnaker Authentication with Cloud IAP - Damian Myerscough - Medium  Authorization / 認可  Setup: https://www.spinnaker.io/setup/security/authorization/  Google Groups via G Suite - Spinnaker   Architecture: https://www.spinnaker.io/reference/architecture/authz_authn/authorization/  Automated Triggersによって起動するPipelineの場合、以下の2つの方法のいずれかで権限設定する:\n Service Accounts - Spinnaker Pipeline Permissions - Spinnaker \u0026hellip; こっちは2020-01-08時点でまだαらしい  Service Account 削除\ncurl -X DELETE $FRONT50/serviceAccounts/{サービスアカウントID} 参考: https://github.com/spinnaker/front50/blob/a25e184f6afd4dd63a8c8fdb63fe109b378f9991/front50-web/src/main/groovy/com/netflix/spinnaker/front50/controllers/ServiceAccountsController.groovy#L69\nCIツール連携  https://www.spinnaker.io/setup/ci/ https://www.spinnaker.io/reference/halyard/commands/#hal-config-ci  2020-01-17現在、Concourse, Jenkins, Google Cloud Build, Travis CI, Werckerに対応しているようだ。\nHow-to Kubernetesアカウントを追加する  https://www.spinnaker.io/setup/install/providers/kubernetes-v2/#adding-an-account  参考:\n Spinnakerでデプロイ先のクラスタを追加する - Qiita  ログレベルの変更 ~/.hal/default/service/settings/${component}.yml に以下の内容を記述:\nenv:JAVA_OPTS:\u0026#34;-Dlogging.level.com.netflix.${コンポーネント名}=DEBUG\u0026#34;参考:\n Fiat Service Account causes NPE if the Service Account is not a user in LDAP · Issue #3388 · spinnaker/spinnaker [SOLVED] How to change spinnaker\u0026rsquo;s services logging level? - Operations - Spinnaker  Topics Spinnaker Rollout Strategies vs K8s Rolling Update 参考:\n Spinnaker deployment strategies v. Kubernetes rolling update - Platforms - Spinnaker  GCP (GKE) Getting Started:\n https://github.com/GoogleCloudPlatform/spinnaker-for-gcp https://cloud.google.com/docs/ci-cd/spinnaker/spinnaker-for-gcp  Advanced:\n Spinnaker を使用したアプリの管理と複数の GKE クラスタへのデプロイ | ソリューション | Google Cloud  参考:\n GKE で Spinnaker を構築する - Qiita  Child Pages ","excerpt":"Documentation 公式サイト: https://www.spinnaker.io/\n Set up Spinnaker  Cloud Providers  Docker Registry …","ref":"/tech-notes/a/software/spinnaker/","title":"Spinnaker"},{"body":"https://www.freedesktop.org/wiki/Software/systemd/\n昨今のLinuxのinit（最初に起動するプログラム）としてほぼデファクトになっているソフトウェア。\nConfiguration systemd.unit https://www.freedesktop.org/software/systemd/man/systemd.unit.html\nTemplate Unit Files コマンドとかほぼ同じなんだけど、パラメータの異なるServiceを複数動かしたいようなときに使う。\n参考:\n systemdのユニットファイルをテンプレート化する - redj’s blog  systemctl CLI\nhttps://www.freedesktop.org/software/systemd/man/systemctl.html\ndaemon-reload https://www.freedesktop.org/software/systemd/man/systemctl.html#daemon-reload\nconfigと全unit fileを再読込みする。\nsystemctl daemon-reload ","excerpt":"https://www.freedesktop.org/wiki/Software/systemd/\n昨今のLinuxのinit（最初に起動するプログラム）としてほぼデファクトになっているソフトウェ …","ref":"/tech-notes/a/software/systemd/","title":"systemd"},{"body":"Documentation https://perldoc.perl.org/\n 邦訳: https://perldoc.jp/  PODの書き方  https://perldoc.perl.org/5.30.0/perlpod.html 邦訳: https://perldoc.jp/docs/perl/5.26.1/perlpod.pod  History 参考:\n Perl - Wikipedia http://history.perl.org/PerlTimeline.html  CPAN CPANモジュールのメンテに関する備忘録  comaint(1)でCPAN moduleのcomaintainerを追加する - Islands in the byte stream Minilla を使って CPAN にモジュールを上げてみた - weblog of key_amb 久しぶりにCPANリリース / 20170509 - progrhyme\u0026rsquo;s Tech Wiki  ","excerpt":"Documentation https://perldoc.perl.org/\n 邦訳: https://perldoc.jp/  POD …","ref":"/tech-notes/a/program/lang/perl/","title":"Perl"},{"body":"Documentation Guides:\n Managing Pipelines \u0026hellip; 作成、実行、無効化、削除、編集、設定の復元、etc.  Reference:\n Stages  Configuration Automated Triggers パイプラインを外部から実行するためのトリガー設定。\nDocker Registry https://www.spinnaker.io/setup/install/providers/docker-registry/ で設定しているリポジトリに新しいイメージがpushされたときに発火する。\n※タグが更新されないと発火しない\n参考:\n Working with Docker Images - Armory Spinnaker Documentation Spinnakerのパイプラインによる自動デプロイ - 仮想化通信  Webhooks https://www.spinnaker.io/guides/user/pipeline/triggers/webhooks/\n \u0026lt;spinnaker-url\u0026gt;/webhooks/webhook/$key な任意のURLを発行して、対象のパイプラインのトリガーにできる Spinnaker for GCPな環境でも外から叩けるURLが発行できそうだった  Manual Judgement Documents:\n Safe Deployments - Spinnaker  Manual Judgement stageを追加することで、人間による手動判断のプロセスを追加できる。\nMEMO:\n Manual Judgement stageでは通知を飛ばすことができる。これによってパイプラインの実行権限のある人に判断を促す Manual Judgement の結果によって処理を分岐させたい場合、続くstageで Conditional on Expression にチェックを入れ、条件として ${ #(\u0026quot;Manual Judgementのstage名\u0026quot;).equals(\u0026quot;選択肢\u0026quot;)} を入れる  Propagate Authentication これにチェックを入れると、認証機能によって許可されたユーザにしか判断が下せないようになる。\n参考:\n Authentication and Authorization - Armory Spinnaker Documentation Lab 5: Deployment Safeguards | workshops  ","excerpt":"Documentation Guides:\n Managing Pipelines \u0026hellip; 作成、実行、無効化、削除、編集、設定の復元、etc.  Reference:\n Stages …","ref":"/tech-notes/a/software/spinnaker/pipeline/","title":"Pipelines"},{"body":"See also ConfigMap\nOverview ConfigMapと同じような使い方ができるが、暗号化機構が備わっており、クレデンシャルなど機微情報を扱うのに向いている。\nPodから環境変数として読み込むという使い方をすることが多いようだ。\n参考:\n Kubernetes Secrets の紹介 – データベースのパスワードやその他秘密情報をどこに保存するか？ – ゆびてく  Documents  design-proposals/secrets.md - kubernetes/community  Secretsの作成 例1) テキストファイルから作成\necho -n \u0026#39;admin\u0026#39; \u0026gt; ./username.txt echo -n \u0026#39;1f2d1e2e67df\u0026#39; \u0026gt; ./password.txt kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt 例2) 自分で定義ファイル(YAML)を作る\necho -n \u0026#39;admin\u0026#39; | base64 YWRtaW4= echo -n \u0026#39;1f2d1e2e67df\u0026#39; | base64 MWYyZDFlMmU2N2Rm ## secret.yamlapiVersion:v1kind:Secretmetadata:name:mysecrettype:Opaquedata:username:YWRtaW4=password:MWYyZDFlMmU2N2Rmkubectl apply -f ./secret.yaml ","excerpt":"See also ConfigMap\nOverview ConfigMapと同じような使い方ができるが、暗号化機構が備わっており、クレデンシャルなど機微情報を扱うのに向いている。\nPodから環境変数と …","ref":"/tech-notes/a/software/k8s/secret/","title":"Secret"},{"body":"Getting Started  初心者向けガイド: https://www.terraform.io/guides/ ドキュメント: https://www.terraform.io/docs/  参考:\n terraform使い方(超基礎編) - Qiita  仕様 State https://www.terraform.io/docs/state/\nLocking https://www.terraform.io/docs/state/locking.html\nbackendによってサポートされていれば、排他制御が可能。\nExamples 公式のを見ると良い。\n https://github.com/hashicorp/terraform/tree/master/examples  AWS: https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples    ベストプラクティス 公式: https://github.com/hashicorp/best-practices/tree/master/terraform\n   Terraform Version 記事     v0.10 Terraform Best Practices in 2017 - Qiita   v0.7.x Terraformにおけるディレクトリ構造のベストプラクティス ｜ Developers.IO    オレオレ:\n TerraformでWorkspaceを使わずに複数環境をDRYに設定する - Qiita \u0026hellip; Terraform v0.10〜v0.11ぐらい対応  参考:\n Structuring HashiCorp Terraform Configuration for Production \u0026hellip; 2020-03-27. Workspacesを使わずにディレクトリを分けることのメリットが述べられている。  How-to バージョン固定 Terraform Settings - Configuration Language - Terraform by HashiCorp\nExamples:\nterraform { required_version =\u0026#34;\u0026gt;= 0.12\u0026#34; required_providers { aws =\u0026#34;\u0026gt;= 2.8\u0026#34; local = \u0026#34;1.2\u0026#34; } } provider \u0026#34;http\u0026#34; { version = \u0026#34;1.2.0\u0026#34; }  terraformのversion指定はtfenvでも可能  参考:\n tfupdateでTerraform本体/プロバイダ/モジュールのバージョンアップを自動化する - Qiita  BackendのS3やGCS等そのものをTerraformで管理 参考:\n Backend の S3 や DynamoDB 自体を terraform で管理するセットアップ方法 - Qiita  Tips デバッグ https://www.terraform.io/docs/internals/debugging.html\nログレベルの変更 TF_LOG 環境変数に TRACE, DEBUG, INFO, WARN, ERROR のいずれかをセットすることで変更できる。\nTF_LOG=DEBUG terraform plan ※しかし、どれを指定してもtraceレベルのログが出る気が…(v0.10.x)\ncountを使って複数のリソースを作成 Examples:\nvariable \u0026#34;instance_ips\u0026#34; { default = { \u0026#34;0\u0026#34; = \u0026#34;10.11.12.100\u0026#34; \u0026#34;1\u0026#34; = \u0026#34;10.11.12.101\u0026#34; \u0026#34;2\u0026#34; = \u0026#34;10.11.12.102\u0026#34; } } resource \u0026#34;aws_instance\u0026#34; \u0026#34;app\u0026#34; { count = \u0026#34;3\u0026#34; private_ip = \u0026#34;${lookup(var.instance_ips, count.index)}\u0026#34;# ... } variable \u0026#34;rds_roles\u0026#34; { default = [\u0026#34;WRITER\u0026#34;, \u0026#34;READER\u0026#34;] } resource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;rds_cpu\u0026#34; { count = \u0026#34;2\u0026#34; alarm_name = \u0026#34;RDS-${var.rds_roles[count.index]}-CPU\u0026#34; : } 参考:\n https://www.terraform.io/docs/configuration/resources.html#using-variables-with-count terraformでautoscalingしているサーバのcloudwatch alarmを自動設定する - Qiita Terraform でループして複数のリソースを作成する - Qiita  変数やoutputでmapを使うと記述量が減って便利 参考:\n Terraformのoutputでmapを利用する方法 - Qiita  mapのlistを作る方法  A hacky way to create a dynamic list of maps in Terraform  できない説  Cannot pass a list of maps to a resource/data · Issue #7705 · hashicorp/terraform Terraform でループして複数のリソースを作成する - Qiita  …が、手元で試したところ(v0.10.x)、下のようにしてlistとして定義・参照することができた。\nvariable \u0026#34;my_complex_data\u0026#34; { type = \u0026#34;list\u0026#34; default = [ { id = \u0026#34;1\u0026#34; name = \u0026#34;taro\u0026#34; height = \u0026#34;170\u0026#34; }, { id = \u0026#34;2\u0026#34; name = \u0026#34;hanako\u0026#34; height = \u0026#34;160\u0026#34; }, ] } foo_list = \u0026#34;${var.my_complex_data}\u0026#34; Tools 3rd Partyのツール\ntfenv https://github.com/Zordrak/tfenv\nrbenv, anyenvのようなツールで、複数バージョンのterraformを切り替えて使えるようになるもの。\n参考:\n tfenvでTerraformのバージョン管理をする - Qiita  参考  Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる - Qiita  ","excerpt":"Getting Started  初心者向けガイド: https://www.terraform.io/guides/ ドキュメント: https://www.terraform.io/docs/   …","ref":"/tech-notes/a/software/terraform/","title":"Terraform"},{"body":" https://kubernetes.io/docs/concepts/services-networking/service/ https://cloud.google.com/kubernetes-engine/docs/concepts/service  Overview Podの集合で実行されている持続的なワークロードをネットワークサービスとして公開する抽象的な手法。\nServiceを使用すると、メンバーPodのIPアドレスが変更されても、Serviceが存続している間に固定のIPアドレスを取得できる。\nService定義ファイルのサンプル:\nkind:ServiceapiVersion:v1metadata:name:my-servicespec:selector:app:MyAppports:- protocol:TCPport:80targetPort:9376これはKubernetesクラスタ内で my-service という名前でアクセスできる。\n仕様  Label Selector \u0026hellip; サービスを識別するためのラベルとそのセレクタ。 Endpoints API \u0026hellip; Service内のPodの変更に伴って更新される。  Serviceのtype https://cloud.google.com/kubernetes-engine/docs/concepts/service?hl=ja#types_of_services\n ClusterIP （デフォルト） \u0026hellip; クラスタ内で固定IPアドレスを獲得 NodePort \u0026hellip; 指定された1つ以上の nodePort 値を利用して、ノードのIPアドレスを通じてアクセス可能になる LoadBalancer \u0026hellip; ネットワークロードバランサを介したアクセスを提供 ExternalName \u0026hellip; See below Headless  ExternalName https://kubernetes.io/ja/docs/concepts/services-networking/service/#externalname\n外部から参照できるDNS名を提供する。\nこの機能を使うには、GKEなどのように、KubernetesにDNSコンポーネントが導入されている必要がある。\nExample:\napiVersion:v1kind:Servicemetadata:name:my-servicenamespace:prodspec:type:ExternalNameexternalName:my.database.example.com参考記事など  Service | Kubernetes Engine のドキュメント | Google Cloud Kubernetes道場 9日目 - Serviceについて - Toku\u0026rsquo;s Blog  ","excerpt":" https://kubernetes.io/docs/concepts/services-networking/service/ …","ref":"/tech-notes/a/software/k8s/service/","title":"Service"},{"body":"Rustの標準ライブラリ。\nプリミティブ型 str https://doc.rust-lang.org/std/primitive.str.html\nSee also Module std::str\n\u0026ldquo;string slice\u0026rdquo; とも呼ばれる。\nExamples:\nlethello=\u0026#34;Hello, world!\u0026#34;;// with an explicit type annotation lethello: \u0026amp;\u0026#39;staticstr=\u0026#34;Hello, world!\u0026#34;;io Module std::io\n基礎的なI/O機能を提供する。\nstdin Function std::io::stdin\npub fn stdin() -\u0026gt; Stdin\n当該プロセスの新しい標準入力ハンドルを生成する。\nExamples:\n// Using implicit synchronization usestd::io::{self,Read};fn main()-\u0026gt; io::Result\u0026lt;()\u0026gt;{letmutbuffer=String::new();io::stdin().read_to_string(\u0026amp;mutbuffer)?;Ok(())}Stdin Struct std::io::Stdin\nプロセスの標準入力ストリームのハンドル。\n個々のハンドルは、当該プロセスに対する入力データのグローバルバッファの参照を共有する。 ハンドルは BufRead メソッドにフルアクセスを得るためにロックされることがある。\nExamples:\nusestd::io;letmutinput=String::new();matchio::stdin().read_line(\u0026amp;mutinput){Ok(n)=\u0026gt;{println!(\u0026#34;{} bytes read\u0026#34;,n);println!(\u0026#34;{}\u0026#34;,input);}Err(error)=\u0026gt;println!(\u0026#34;error: {}\u0026#34;,error),}read_line Method Stdin::read_line\npub fn read_line(\u0026amp;self, buf: \u0026amp;mut String) -\u0026gt; Result\u0026lt;usize\u0026gt;\n当該ハンドルをロックして入力行を読み込む。\n詳しくは BufRead::read_line を見よ。\nprelude Module std::prelude\n全てのRustプログラムで自動的にimportされる必要最小限のライブラリ。\nstd::io::prelude のように、独自のpreludeを持つライブラリも多いそうだ。\nstr Module std::str\nSee also プリミティブ型 str\nstring Module std::string\nString Struct std::string::String\nSee also プリミティブ型 str\nExamples:\nlets=String::new();lethello1=String::from(\u0026#34;Hello, world!\u0026#34;);letmuthello2=String::from(\u0026#34;Hello, \u0026#34;);hello2.push(\u0026#39;w\u0026#39;);hello2.push_str(\u0026#34;orld!\u0026#34;);new Method String::new\npub const fn new() -\u0026gt; String\n空の String を生成する。 デフォルトでバッファを割り当てないので低コストだが、利用するバッファ量がわかっているならば、 with_capacity メソッドを代わりに使うことを検討せよ。\n","excerpt":"Rustの標準ライブラリ。\nプリミティブ型 str https://doc.rust-lang.org/std/primitive.str.html\nSee also Module std::str …","ref":"/tech-notes/a/program/lang/rust/std/","title":"std Library"},{"body":"About  https://github.com/rust-lang/rust \u0026hellip; ソースコードもRust  Getting Started  https://doc.rust-lang.org/book/  日本語訳: https://doc.rust-jp.rs/    Documentation https://www.rust-lang.org/learn \u0026hellip; ランディングページ\n Edition Guide Standard Library  See std Library   Cargo Book rustc book Rust Compiler Error Index rustdoc book  Style Guide  Rust Style Guide \u0026hellip; 2020-05-25現在の正式版はこちらのようだ  古い（と思われる）もの:\n https://doc.rust-lang.org/1.0.0/style/  参考:\n Outdated documentation on doc.rust-lang.org is exposed to search engines · Issue #695 · rust-lang/www.rust-lang.org  開発環境 2018/8/22現在、VSCode, IntelliJが人気のようだ。\nもちろん、Atomでも開発できそうだし、Eclipseもある。\nCommunity https://www.rustaceans.org/\nTips:\n Rustを書く人のことを「Rustacean」という。  CLI  rustup \u0026hellip; Rustコンパイラインストール。最新バージョンへのアップデート。クロスコンパイル rustc \u0026hellip; Rustコンパイラ  cargo Rustのビルドシステム兼パッケージマネージャ。\nExamples:\n# バージョン表示 cargo --version # プロジェクト作成 cargo new \u0026lt;project\u0026gt; cargo new --bin \u0026lt;project\u0026gt; cargo check # コンパイル可能かチェック # コンパイル。バイナリ生成 cargo build cargo build --release # 最適化込み cargo run # バイナリを作らずに直接実行 参考:\n Hello, Cargo! - The Rust Programming Language  rustup Rust toolchain installer.\nExamples:\n# ヘルプ表示 rustup help # Update Rust toolchains and rustup rustup update # 更新の有無を確認 rustup check # ブラウザでローカルにインストールされたドキュメントを開く rustup doc rustc Examples:\n# コンパイル rustc main.rs # ヘルプ表示 rustc --[h]elp ## 全コマンドオプションを表示 rustc --help -v # バージョン表示 rustc --version|-V Crates Rustのパッケージ管理システム。\nRustプログラムの単位でもある。\ncargo new するとcrateが作られる。\nhttps://crates.io/ : 公式レジストリっぽい。\n参考:\n Rust のモジュールシステム - Qiita  rand 乱数生成\n","excerpt":"About  https://github.com/rust-lang/rust \u0026hellip; ソースコードもRust  Getting Started …","ref":"/tech-notes/a/program/lang/rust/","title":"Rust"},{"body":"Tools Cloud SQL Proxy Cloud SQL第2世代インスタンスにアクセスできる公式のプロキシサーバ。\nGetting Started:\n Cloud SQL Proxy について | Cloud SQL for MySQL | Google Cloud Cloud SQL Proxy を使用して MySQL クライアントを接続する | Cloud SQL for MySQL  systemd対応 下の記事にあるように、SystemdのTemplate Unit Filesを使うと、1台で複数のDBに接続したいときに便利。\n参考:\n Cloud SQL Proxy (TCP Socket)を systemd で起動させる - Qiita systemd#Template Unit Files  Topics 外部IPアドレス 第2世代のインスタンスのIPアドレスはデフォルトで固定。\nhttps://cloud.google.com/sql/docs/mysql/connect-external-app\n","excerpt":"Tools Cloud SQL Proxy Cloud SQL第2世代インスタンスにアクセスできる公式のプロキシサーバ。\nGetting Started:\n Cloud SQL Proxy …","ref":"/tech-notes/a/google/gcp/sql/","title":"Cloud SQL"},{"body":"About UEFI（EFI）とは - IT用語辞典 e-Wordsより:\n コンピュータ内の各装置を制御するファームウェアとオペレーティングシステム（OS）の間の通信仕様を定めた標準規格の一つ。従来のBIOSに代わるもの。UEFI対応ファームウェアを指してUEFIと呼ぶこともある。\n  業界団体: UEFIフォーラム https://uefi.org/  参考:\n Unified Extensible Firmware Interface - Wikipedia  仕様 https://uefi.org/specifications\n2020-05-04時点の最新版: UEFI Specification Version 2.8 (Errata A) (released February 2020)\nセキュアブート Shielded VM | ドキュメント | Google Cloudより:\n すべてのブートコンポーネントのデジタル署名を検証し、署名検証が失敗した場合にブートプロセスを停止することで、システムが正規のソフトウェアのみを実行することを保証します。\n 参考:\n セキュア ブート | Microsoft Docs  歴史 UEFI（EFI）とは - IT用語辞典 e-Wordsより:\n 従来使われてきたBIOSは、16ビットマイクロプロセッサの時代に設計されたもので、マルチタスク環境で利用されることを想定していない点や、メインメモリの位置640KB〜1MBわずか384KBの領域にしか配置できない点など、現在のハードウェアやOSから見ると時代遅れで窮屈な制約が多い。\n  これを克服するため、64ビット環境を想定して新たに設計された近代的で拡張可能なファームウェアのインターフェース仕様としてUEFIの開発が始まった。\n MEMO:\n 開発当初は「EFI」（Extensible Firmware Interface）という名称だった。 2005年、業界団体のUEFIフォーラムへ移管され、同時に名称もUEFI（Unified EFI）に改められた。  ","excerpt":"About UEFI（EFI）とは - IT用語辞典 e-Wordsより:\n コンピュータ内の各装置を制御するファームウェアとオペレーティングシステム（OS）の間の通信仕様を定めた標準規格の一つ。従来 …","ref":"/tech-notes/a/firmware/uefi/","title":"UEFI"},{"body":"筆者はLinuxかmacOSを使うことが多い。\nAbout 参考:\n List of Unix commands - Wikipedia \u0026hellip; IEEE規格らしい  関連ページ  macOS#GNUコマンドを使う  リファレンス  SS64 Command line reference \u0026hellip; Linux, macOS etc.  日付・時刻・時間 date https://linuxjm.osdn.jp/html/GNU_coreutils/man1/date.1.html\nExamples:\n# 書式指定 date +%Y%m%d # YYYYMMDD date +%FT%T # ISO8601風 date +%s # unixtime date +%s.%N # ナノ秒まで取得 date +%s.%3N # ミリ秒まで取得 # 日時指定/相対 date -d tomorrow # 明日 date -d \u0026#39;1 hour\u0026#39; # 1時間後 date -d \u0026#39;1 days ago\u0026#39; # 昨日 # 日時指定/絶対 date -d @1530675922 # unixtime # ファイルのタイムスタンプを取得 date -r FILE ## unixtime形式で取得 date +%s -r FILE NOTE:\n Mac だと -d '〜' オプションが使えない %N はGNU拡張らしい  参考:\n 日付を取得する | UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス date コマンド | コマンドの使い方(Linux) | hydroculのメモ date コマンドで日時のミリ秒単位まで表示する - Qiita dateコマンドで、ファイルのタイムスタンプを取得 | ex1-lab macOS:  date(1) [osx man page]    ファイル操作 find ファイルやディレクトリを検索する。\n-exec オプションで見つけたファイルに対してコマンド実行することもできる。\nExamples:\n# path以下のファイル、ディレクトリを全てリストアップ find \u0026lt;path\u0026gt; # ファイルのみリストアップ find \u0026lt;path\u0026gt; -type f # 3日以内に更新されたファイルを探す find \u0026lt;path\u0026gt; -mtime -mtime -3 # 3日以上前のファイルを探して全て削除 find \u0026lt;path\u0026gt; -type f -mtime +3 -exec rm -f {} \\; 時間指定オプション:\n   オプション 意味     -mmin ファイルのデータが最後に修正された日時（分指定）   -mtime ファイルのデータが最後に修正された日時（日指定）   -amin ファイルのデータに最後にアクセスされた日時（分指定）   -atime ファイルのデータに最後にアクセスされた日時（日指定）   -cmin ファイルのデータとステータスが最後に修正された日時（分指定）   -ctime ファイルのデータとステータスが最後に修正された日時（日指定）    参考:\n find で日数が過ぎたファイルを検索・削除する | キュア子の開発ブログ findコマンドのmtimeオプションまとめ - Qiita  mktemp Man page of MKTEMP\n一時ファイル、またはディレクトリを作成する。\nmktemp # ディレクトリを作成 mktemp -d 参考:\n mktemp Man Page - macOS - SS64.com  readlink(1) Man page of READLINK\nExamples:\n# シンボリックリンクのリンク先を返す。再帰的に探索はしない readlink \u0026lt;link\u0026gt; # realpathと同じ働きをする readlink -f \u0026lt;file\u0026gt; realpath(1) Man page of REALPATH\n引数として与えられたファイル or ディレクトリの絶対パスを返す。 シンボリックリンクであれば、リンク先を再帰的に解決する。\ntee 標準出力に書きつつファイルにも書く、ということをやりたいときに使う。\n./a.sh | tee a.log ./a.sh | tee -a a.log # 追記 ./a.sh 2\u0026gt;\u0026amp;1 | tee a.log # 標準エラーもファイルに書く 参考:\n teeコマンドの使い方 - Qiita  touch Man page of TOUCH\ntouch -t 201807040100 path/to/file # mtimeを2018/7/4 01:00に変更 GNUオプション: ※macOSでは使えない\n   Option 効果     --[d]ate=日時 日時を指定する際に、 -t オプションの代わりに使える。dateコマンドの書式で日時を渡せるようだ    参考:\n 【 touch 】コマンド――タイムスタンプを変更する／新規ファイルを作成する：Linux基本コマンドTips（23） - ＠IT  アーカイブ zip/unzip ## dir/ を再帰的に圧縮 ## 展開すると dir/ も出来る zip -r foo.zip dir/ ## 中身を bar/ に展開 unzip foo.zip -d bar/ 参考:\n Linuxコマンド集 - 【 zip 】 ファイルを圧縮する（拡張子.zip）：ITpro Linux基本コマンドTips（35）：unzipコマンド――ZIPファイルからファイルを取り出す - ＠IT  テキスト処理 grep ## ファイル名だけ表示 grep -l PATTERN [PATH] head https://linuxjm.osdn.jp/html/GNU_textutils/man1/head.1.html\n## 先頭1行を表示 head -1 [file...] ## 先頭20行を表示 head -n 20 [file...] ## 先頭256Bを表示 head -c 256 [file...] ## 先頭256KBを表示 head --bytes 256k [file...] printf(1) 書式を指定して文字列を標準出力に出力。\nシェルのビルトイン関数と /usr/bin/printf がある。 違いはよくわからない。\nprintf \u0026#34;%s %02d\u0026#34; foo 1 #=\u0026gt; foo 01 env LANG=ja_JP.UTF-8 printf \u0026#34;%\u0026#39;d\u0026#34; 1234567890 #=\u0026gt; 1,234,567,890 参考:\n 【 printf 】コマンド――データを整形して表示する：Linux基本コマンドTips（319） - ＠IT シェルスクリプトで数字を３桁ごとのカンマ区切りにする  sed https://linuxjm.osdn.jp/html/GNU_sed/man1/sed.1.html\n与えられたテキストに対して、sedスクリプトで指定された文字列置換を行って結果のテキストを表示するストリームエディタ。\nmacOSとLinuxで挙動が違うので、注意が必要。\nExamples:\n# 各行のxを1つyに置換した結果を表示 sed s/x/y/ foo.txt # 各行のxをすべてyに置換した結果を表示 sed -e s/x/y/g foo.txt # 全文字をすべてyに置換した結果を表示 cat foo.txt | sed \u0026#39;s/./y/g\u0026#39; # xをyに、aをbに置換 sed -e s/x/y/ -e s/a/b/ foo.txt    オプション 効果     \u0026ndash;[e]xpression=SCRIPT 実行するコマンドとしてスクリプトを追加   \u0026ndash;[f]ile=FILE 実行するコマンドとしてスクリプトファイルを追加   \u0026ndash;[r]egexp-extended （※Linux）拡張正規表現を使う   -E （※macOS）拡張正規表現を使う    ※ -e, -f のどちらの指定もなければ、最初のオプションでない引数がsedスクリプトとして解釈される。\nsort ## 第2フィールドで数値の降順ソート cat file | sort -nr -k2 参考:\n https://linuxjm.osdn.jp/html/gnumaniak/man1/sort.1.html sort コマンド | コマンドの使い方(Linux) | hydroculのメモ  ファイルシステム exportfs exportfs -a # /etc/exports の全てのディレクトリをエクスポート exportfs -v # 現在エクスポート中のディレクトリ一覧 参考:\n exportfs コマンド  mount ## uid, gid指定 mount -o uid=1000,gid=1000 /dev/sdb1 /mnt ※NFSの場合、uid/gid指定は不可\nSee also:\n https://sites.google.com/site/progrhymetechwiki/linux/fs  参考:\n 【 mount 】コマンド――ファイルシステムをマウントする：Linux基本コマンドTips（183） - ＠IT 製品レビュー：企業ユーザーのためのSFU 3.5活用ガイダンス　第1回　SFU 3.5の概要とNFS機能　2．NFSとユーザー名マッピング - ＠IT  umount umount \u0026lt;mount先\u0026gt; umount \u0026lt;mount元\u0026gt; ユーザ管理 getent getent group \u0026lt;group\u0026gt; # グループに属しているユーザをリスト 参考:\n Linuxコマンドでユーザーのグループ確認・変更。 - Qiita  gpasswd gpasswd -a \u0026lt;login\u0026gt; \u0026lt;group\u0026gt; # ユーザをグループに所属させる gpasswd -d \u0026lt;login\u0026gt; \u0026lt;group\u0026gt; # ユーザをグループから削除 参考:\n 【 gpasswd 】コマンド――ユーザーが所属するグループを管理する：Linux基本コマンドTips（72） - ＠IT  groupadd グループ作成。\ngroupadd newgroup 参考:\n Linuxコマンド【 groupadd 】新規グループの作成 - Linux入門 - Webkaru  passwd passwd -l \u0026lt;login\u0026gt; # アカウントをロック passwd -u \u0026lt;login\u0026gt; # アンロック ロックされたアカウントはログインできず、利用不可になる。\n参考:\n Linux ユーザーアカウントをロック・アンロックする  useradd ユーザ追加。オプション多数\n   オプション 意味     -m ホームディレクトリ作成   -s \u0026lt;SHELL\u0026gt; ログインシェルを指定    Examples:\n## ホームディレクトリ作成 useradd -m \u0026lt;login\u0026gt; ## ログインシェルを/bin/bashに useradd -s /bin/bash \u0026lt;login\u0026gt; 参考:\n useraddコマンドについて詳しくまとめました 【Linuxコマンド集】  usermod usermod -g admin \u0026lt;login\u0026gt; # 主グループを変更 usermod -aG ops,app,... \u0026lt;login\u0026gt; # 副グループ追加 参考:\n usermodコマンドについて詳しくまとめました 【Linuxコマンド集】  リソース管理 top(1) top(1): tasks - Linux man page\nExamples:\n# インタラクティブモード top ## 描画間隔を5秒に変更 top -d 5 # バッチモードで1回だけ実行 top -b -n 1 ## CPUコアごとの負荷も表示 top -b -n 1 -1 インタラクティブモードの主な操作:\n M \u0026hellip; メモリ使用率順にソート P \u0026hellip; CPU使用率順にソート 1 \u0026hellip; CPUコアごとの負荷を表示 c \u0026hellip; プロセス名詳細を表示（トグル） q \u0026hellip; 終了 F or O \u0026hellip; ソートするフィールドを選ぶ R \u0026hellip; ソートの昇順/降順を切り替え  Mac版の違い:\n -b オプションやバッチモードがなさそう CPUコアごとに負荷を見る方法がわからん  参考:\n [Linux] top コマンドをインタラクティブに操作する | バシャログ。  プロセス管理 kill(1) Man page of KILL\nExamples:\n# シグナル名のリストを表示 kill -l # プロセスにSIGTERMを送信 kill \u0026lt;PID\u0026gt;... # SIGHUPを送信 kill -HUP \u0026lt;PID\u0026gt;... # プロセスの生存確認 kill -0 \u0026lt;PID\u0026gt; NOTE:\n macOSだと少しオプションが違うかも シェルのビルトインと /bin/kill でも少しオプションが違う  See Also:\n OS \u0026gt; Linux#Signal  参考:\n kill Man Page - macOS - SS64.com killでプロセスに「0」を送ると、プロセスの生存確認ができる - Perl日記  pgrep プロセス名で検索して該当するプロセス番号を表示。\nExamples:\npgrep perl pkill プロセス名で指定してシグナルを送信する。\nExamples:\npkill perl ps Man page of PS\nExamples:\nps aux ps aufxwww ps auxwww -L ps -ef ps -efL Options:\n   option 意味     f forest, プロセスをツリー状に表示   -L スレッド表示。 f と同時に指定はできない    trap シグナルによってプロセスが中断・停止させられたときに、実行するコマンドを指定する。\nSyntax:\ntrap \u0026#39;コマンド\u0026#39; シグナルリスト Examples:\ntrap \u0026#39;echo trapped.\u0026#39; 1 2 3 15 # trapをリセットする trap 1 2 3 15 NOTE:\n SIGKILL (9) はtrapできない  See Also:\n OS \u0026gt; Linux#Signal  参考:\n シグナルと trap コマンド | UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス shellのtrapについて覚え書き - Qiita trap コマンド | コマンドの使い方(Linux) | hydroculのメモ  ユーティリティー watch watch -n \u0026lt;N\u0026gt; command args... N秒ごとにコマンドを実行して出力を表示。\n参考:\n watch コマンド | コマンドの使い方(Linux) | hydroculのメモ  xargs NOTE:\n ※Qiitaに記事を書いており、そちらを更新するケースもある:  xargsコマンドの備忘録 - Qiita       オプション GNU macOS 機能     -r Yes ? 入力が空白しかないときはコマンド実行しない    参考:\n Man page of XARGS xargs - FreeBSD Manual Pages xargs Man Page - macOS - SS64.com  Child Pages ","excerpt":"筆者はLinuxかmacOSを使うことが多い。\nAbout 参考:\n List of Unix commands - Wikipedia \u0026hellip; IEEE規格らしい  関連ペー …","ref":"/tech-notes/a/cli/unix-cmd/","title":"UNIX系コマンド"},{"body":"","excerpt":"","ref":"/tech-notes/a/os/","title":"オペレーティングシステム"},{"body":"このセクションでは、ネットワークプロトコルやネットワーク通信、その技術に関する話題を扱う。\nインターネット 通信の流れ 参考:\n ネットワーク入門サイト - 全体の通信の流れ  ルーティング 参考:\n インターネット10分講座：経路制御 - JPNIC  AS Autonomous System. 共通のポリシーや同じ管理下で運用されるルータやネットワークの集合。\nインターネットはASの集合。\n AS番号 \u0026hellip; ASを識別するための番号。かつては2バイトだったが、AS番号の枯渇懸念のため、4バイトに拡張された。  参考:\n インターネット用語1分解説～4バイトAS番号とは～ - JPNIC BGPの仕組みと役割を理解する：IPルーティング入門（2） - ＠IT  トンネリング あるネットワークの上に仮想のネットワークを作り、物理的/論理的に離れたモノの間で通信を成立させる技術。\nパケットのカプセル化によって実現されるものが多い。\n様々なトンネリング技術:\n PPPoE (PPP over Ethernet) IP-in-IP  RFC 1853 で標準化されている。 IPv4 over IPv4, IPv4 over IPv6, IPv6 over IPv4, IPv6 over IPv6 の4種類がある。 参考:  IPIPトンネリング     GRE  RFC 2784で標準化されている。 IPトンネル内でパケットをカプセル化 暗号化機能は持たないため、データも暗号化したい場合、IPsecを併用する。 参考:  GRE（Generic Routing Encapsulation）とは     TUN TAP L2TP (Layer 2 Tunneling Protocol)  参考:  https://ja.wikipedia.org/wiki/Layer_2_Tunneling_Protocol     VXLAN  L3ネットワーク上に論理的なL2ネットワークを構築する。 24bitのVXLAN IDによって、最大で約1600万のネットワークを構成可能 UDP/IPでカプセル化 参考:  VXLANとは     VLANトンネリング  See https://sites.google.com/site/progrhymetechwiki/network/vlan   SSHポートフォワーディング(トンネリング)  参考:  SSHポートフォワード（トンネリング）を使って、遠隔地からLAN内のコンピュータにログインする - ククログ(2014-09-12) sshポートフォワーディング - Qiita      トンネリング技術により実現されるモノ:\n VPN  参考:\n トンネリング - Wikipedia TUN/TAP - Wikipedia AWS Solutions Architect ブログ: AWSでも役に立つトンネリング技術入門  帯域制御  トラフィックシェーピング \u0026hellip; トラフィック（通信量）を制御し、パケットを遅延させることで通信性能を最適化/保証し、レイテンシを低減し、帯域幅を確保すること。パケットシェーピングとも言う。  参考:\n トラフィックシェーピング - Wikipedia  ","excerpt":"このセクションでは、ネットワークプロトコルやネットワーク通信、その技術に関する話題を扱う。\nインターネット 通信の流れ 参考:\n ネットワーク入門サイト - 全体の通信の流れ  ルーティング 参考: …","ref":"/tech-notes/a/network/","title":"ネットワーク"},{"body":"ITに関するドキュメントやドキュメンテーションツールについて記す。\n","excerpt":"ITに関するドキュメントやドキュメンテーションツールについて記す。","ref":"/tech-notes/a/document/","title":"ドキュメント"},{"body":"UNIX UNIX（ユニックス）とは - IT用語辞典 e-Wordsより:\n 1969年にAT\u0026amp;T社ベル研究所で開発が始まったオペレーティングシステム（OS）。また、その流れを汲むOSの総称。\n  広義には、正規のUNIXシステムとUNIX系OSすべてを含む総称としてUNIXという語を用いることもある。\n UNIX系OS UNIX風の仕様や操作感、振る舞いのOS。\nUNIX系OS（UNIX-like OS）とは - IT用語辞典 e-Wordsによれば、\n 現在、「UNIX」の商標権は米業界団体The Open Group（オープングループ）が所有している。同団体の定めた「Single UNIX Specification」という仕様を満たし、認証を受けて商標利用のライセンス料を支払った製品のみが公式にUNIX互換であると名乗ることができる。\n とのことであり、これらにはSolaris, HP-UX, AIXなどのいわゆる商用UNIXと呼ばれるOS製品が該当するそうだ。\nその他、一般にUNIX系OSと呼ばれるもの:\n Linux BSD系  FreeBSD, OpenBSD, NetBSD macOS    ","excerpt":"UNIX UNIX（ユニックス）とは - IT用語辞典 e-Wordsより:\n 1969年にAT\u0026amp;T社ベル研究所で開発が始まったオペレーティングシステム（OS）。また、その流れを汲むOSの総 …","ref":"/tech-notes/a/os/unix/","title":"UNIX"},{"body":"関数 Google スプレッドシートの関数リスト - ドキュメント エディタ ヘルプ\nSUMIFS https://support.google.com/docs/answer/3238496?hl=ja\nSUMIFの条件部を複数指定できるバージョン。\nFormat: SUMIFS(合計範囲, 条件範囲1, 条件1, [条件範囲2, 条件2, ...])\nHow-to 日時の差を計算  DATEDIF \u0026hellip; 日付、月数、年数に対応  =(B2-A2) * 86400 // 秒数 参考:\n 2 つの時刻の差を計算する - Excel  数値によって分類する LOOKUP系の関数（ [VH]LOOKUP ）の最後の引数に true を与えると、「検索値以下で最も近い値」を取り出すことができる。\nこれによって、「点数によってランクを付ける」といったことが可能。\n例:\n   \\ A B     1 下限値 等級   2 0 D   3 26 C   4 51 B   5 76 A    上のような表があり、 =VLOOKUP(検索値, $A$2:$B$5, 2, TRUE) とやると、次のようになる:\n 検索値が (-∞, 0) =\u0026gt; #N/A 検索値が [0, 26) =\u0026gt; D 検索値が [26, 51) =\u0026gt; C 検索値が [51, 76) =\u0026gt; B 検索値が [76, ∞) =\u0026gt; A  参考:\n ExcelのVLOOKUP関数で「○以上△未満」の条件で表を検索する方法 | できるネット  ","excerpt":"関数 Google スプレッドシートの関数リスト - ドキュメント エディタ ヘルプ\nSUMIFS …","ref":"/tech-notes/a/google/sheet/","title":"Google Sheets"},{"body":"JSON 仕様 https://www.json.org/json-en.html\n","excerpt":"JSON 仕様 https://www.json.org/json-en.html","ref":"/tech-notes/a/data-format/","title":"Data Format"},{"body":"ファームウェア（FW）とは - IT用語辞典 e-Wordsより:\n コンピュータなどに内蔵されるソフトウェアの一種で、本体内部の回路や装置などの基本的な制御を司る機能を持ったもの。機器内部に固定的に組み込まれ、あまり内容の変更が行われないことから、ハードウェアとソフトウェアの中間的な存在としてファームウェア（firm：堅い、固定の）と呼ばれている。\n Child Pages ","excerpt":"ファームウェア（FW）とは - IT用語辞典 e-Wordsより:\n コンピュータなどに内蔵されるソフトウェアの一種で、本体内部の回路や装置などの基本的な制御を司る機能を持ったもの。機器内部に固定的に …","ref":"/tech-notes/a/firmware/","title":"Firmware"},{"body":"Getting Started  エディタの操作 → エディタ Vimの設定 → vimrc  Install Ubuntuに新しいVimを入れる 2020-05-06現在、Ubuntu 18.04に入っているVimのバージョンが8.0だった。\nより新しいバージョンを使うには、aptで ppa:jonathonf/vim のようなリポジトリの追加が必要そう。\n参考:\n 2019年12月の記事: How to Install Vim 8.2 in Ubuntu 18.04, 16.04, 19.10 | UbuntuHandbook  パッケージ管理 Vim 8から標準機能になった。\nhttps://vim-jp.org/vimdoc-ja/repeat.html#packages\n Vim script のパッケージは1つかそれ以上のプラグインを含むディレクトリである\n 参考:\n Vim 8.0 Advent Calendar 6 日目 パッケージ - Qiita  プラグインマネージャー サードパーティーのものが色々ある。\n Vundle \u0026hellip; 一番人気っぽいがここ数年、全然更新されてない（2020-05-05現在） vim-plug \u0026hellip; ミニマリストにオススメっぽい dein.vim \u0026hellip; 闇の力を得たプラグインマネージャー（笑） NeoBundleの後継  参考:\n Vim におけるプラグイン管理についてまとめてみた - Qiita  dein.vim https://github.com/Shougo/dein.vim\nヘルプ:\n https://github.com/Shougo/dein.vim/blob/master/doc/dein.txt :help dein  参考:\n NeoVim、そしてdein.vimへ - Qiita [dein.vim] hook の便利な使い方 - Qiita  Specs 正規表現 参考:\n vim正規表現リファレンス - Qiita  オプションのグローバルな値とローカルな値 Vim: オプションのグローバルな値とローカルな値 - while (“im automaton”); より。\n ふつうは set を使う ローカルに設定したい値は setlocal を使う。そうでないとグローバル値も変化してしまう  例えば ftplugin/xxx でファイルタイプごとの設定をするときに set を使ってしまうと、ファイルを開くたびにグローバルの設定値が変化しかねない    How-to 参考:\n Vimメモ : filetypeの確認 - もた日記  現在編集してるファイルのfiletypeを確認 エディタ上でどちらかを実行\n:set filetype?:echo \u0026amp;filetypefiletype一覧の確認 エディタ上で以下を実行:\n:echo glob($VIMRUNTIME . \u0026#39;/ftplugin/*.vim\u0026#39;):echo glob($VIMRUNTIME . \u0026#39;/indent/*.vim\u0026#39;):echo glob($VIMRUNTIME . \u0026#39;/syntax/*.vim\u0026#39;)\u0026#34; 拡張子との関係を一覧:autocmd filetypedetect関連プロジェクト  Neovim  Vimのメンテナンシビリティと拡張性を高め、モダン化するプロジェクト 参考:  Neovimがどういうプロジェクトなのかまとめ - Qiita neovim とは何か？ | Vim入門      Child Pages ","excerpt":"Getting Started  エディタの操作 → エディタ Vimの設定 → vimrc  Install Ubuntuに新しいVimを入れる 2020-05-06現在、Ubuntu 18.04に …","ref":"/tech-notes/a/program/vim/","title":"Vim"},{"body":"http://www.zsh.org/\nDocumentation  zsh: The Z Shell Manual  Source Code  https://sourceforge.net/p/zsh/code/ci/master/tree/ https://github.com/zsh-users/zsh \u0026hellip; Mirror  Syntax 配列 Bashと違って、配列の添字が 1 から始まることに注意が必要。\na=(x y z) echo $a[1] #=\u0026gt; x echo $a[2] #=\u0026gt; y 参考:\n zsh の配列操作の基本から応用まで - Qiita  Configuration # history -i でコマンドの実行時間表示 setopt extended_history 参考:\n Unix 系 OS でコマンド実行間にタイムスタンプを付ける zsh 設定 - プロンプト -  helpコマンド Zsh - ArchWiki#ヘルプコマンドより。\n Bashとは違って、Zshは組み込まれている help コマンドを有効にしていません。Zshでhelpを使うには、以下をzshrcに追加してください:\n autoload -U run-help autoload run-help-git autoload run-help-svn autoload run-help-svk unalias run-help alias help=run-help プロンプト 参考:\n zshプロンプトのカスタマイズ - Qiita  プロンプトの種類    プロンプト 説明     PROMPT 左プロンプト   RPROMPT 右プロンプト   SPROMPT correctで訂正の候補を出すときに表示されるプロンプトです   PROMPT2, RPOMPT2 コマンドが複数行になった時に表示されるプロンプトです   PROMPT3 ?   PROMPT4 ?    特殊文字    文字 出力内容 例     %n ユーザー名 root   %# ユーザー種別 #（rootのとき）\n%（root以外）   %m ホスト名 localhost   %d, %/ カレントディレクトリ /home/me/dir   %~ カレントディレクトリ ~/dir   %C カレントディレクトリ dir   %T 時間 (HH:MM)    %* 時間 (HH:MM:SS)    %D 日付 (YY-MM-DD)     色 こんな感じで色を付けられれる。\n# ①依存なし PROMPT=\u0026#39;%F{cyan} $n %f\u0026#39; # ②colorsを使う autoload -Uz colors colors PROMPT=\u0026#39;%{${fg[cyan]}%} $n %{${reset_color}%}\u0026#39; 色の文字か番号で色を指定できる。\n   番号 色     0 black   1 red   2 green   3 yellow   4 blue   5 magenta   6 cyan   7 white    参考:\n zshでプロンプトをカラー表示する - Qiita  色: 256色対応 Examples:\n# Zshパラメータ利用 # - %F{文字色番号} # - %K{背景色番号} # - %f ... 文字色リセット # - %k ... 背景色リセット PROMPT=\u0026#34;%K{082}%F{001}[%n@%m]%f%k\u0026#34; # エスケープシーケンス利用 PROMPT=$\u0026#39;%{\\e[30;48;5;082m%}%{\\e[38;5;001m%}[%n@%m]%{\\e[0m%}\u0026#39;  上2つはどちらも同じ効果を表す エスケープシーケンスについては See シェル#ANSIエスケープシーケンス  参考:\n zshのプロンプトを256色表示にする＋好きなフォーマットで時刻表示 - Qiita  MEMO:\n （2020-05-19）上のZshパラメータを使う方法がUbuntu 18.04デスクトップ環境 + 端末アプリだと上手く行ってない （2020-05-24）macOS + iTerm2なら上手く行った^  複数行対応 左側のPROMPTなら改行文字を入れればいいが、 precmd() でプリントするという手もある。\nprint -P オプションを付けると、PROMPTのフォーマットで出力できるみたい。\n参考:\n zsh の右プロンプトを2行にする - Qiita prompt - Multiline RPROMPT in zsh - Super User  vcs_info メモ:\n check-for-changes をtrueにしても、まだgitの管理下にない新規ファイルがあるだけだと stagedstr にも unstagedstr にも表れない。  参考:\n zsh/vcs_info-examples at master · zsh-users/zsh zshのターミナルにリポジトリの情報を表示してみる · けんごのお屋敷 Show Git State in ZSH Prompt via vcs_info | Timothy Basanov  Feature ZLE Zsh Line Editor.\nZshのコマンドライン編集機能。\nたぶん、peco等でキーボードショートカットを作るときに使う人が多いのではないかな。\nExamples:\n# 編集を終了し、入力されたコマンドを実行する zle accept-line # 画面をクリアする zle clear-screen 参考:\n コマンドライン編集機能 Zsh Line Editor を使いこなす - Qiita  Tools パッケージ管理ツールについては、シェル \u0026gt; パッケージ管理参照。\nPackages / Plugins  https://github.com/zsh-users/zsh-syntax-highlighting  fish shellのようなシンタックスハイライトを提供してくれる See 2020-05-22#Ubuntu 18.04でzsh-syntax-highlightingを入れた    Child Pages ","excerpt":"http://www.zsh.org/\nDocumentation  zsh: The Z Shell Manual  Source Code …","ref":"/tech-notes/a/cli/shell/zsh/","title":"Zsh"},{"body":"コンピュータ上での文字の取り扱いについて。\n主に文字コードの話になるだろうと想定。\nUnicode 世界中の様々な言語の文字を収録して通し番号を割り当て、同じコード体系で使えるようにしたもの。\n参考:\n Unicode（ユニコード）とは - IT用語辞典 e-Words  絵文字 絵文字が探せるサイト:\n https://emojipedia.org/ 絵文字一覧 🤣 | Let\u0026rsquo;s EMOJI  用途別:\n 図形・幾何学模様:  Unicode 幾何学模様 - CyberLibrarian 【みんなの知識 ちょっと便利帳】記号/符号の種類・名称・読み方 =しるし物/目印・装飾類=    ","excerpt":"コンピュータ上での文字の取り扱いについて。\n主に文字コードの話になるだろうと想定。\nUnicode 世界中の様々な言語の文字を収録して通し番号を割り当て、同じコード体系で使えるようにしたもの。\n参考: …","ref":"/tech-notes/a/char/","title":"文字"},{"body":"Micfosoftが提供するOSSのクロスプラットフォームなコードエディタ。\nElectronをベースにしており、IDE並の機能を持つ。\n3rd Partyの拡張機能も多数あり、機能を拡充することができる。\nDocumentation  https://code.visualstudio.com/docs  Get Started:  Visual Studio Code Key Bindings   User Guide:  Managing Extensions in Visual Studio Code      Features スニペット機能  ユーザ定義のスニペットを作成可能  File \u0026gt; Preferences \u0026gt; User Snippets コメント付きJSON形式で書く グローバルなスニペット ワークスペースごとのスニペット   スニペットが有効になると、補完で選択可能になる  参考:\n 独自のスニペットを作成 | 非公式 - Visual Studio Code Docs VS Codeをスニペット作成は簡単で便利だった！ - lisz-works  Preferences 昔はJSON設定ファイルを直接編集するようなスタイルだったが、2018年9月現在、GUIで設定できる項目も増えてきたようだ。\n2種類の設定がある。\n ユーザ設定 \u0026hellip; ワークスペースによらない、ユーザ環境で常に有効になる設定。 ワークスペース設定 \u0026hellip; ワークスペースの .vscode/settings.json に保存される。  Quick Reference:\n   config 値（*） 意味     editor.insertSpaces true, false ソフトタブ（タブキーで半角スペースを挿入）のon/off   editor.renderWhitespace none, all, boundary スペースやタブを描画するかどうか。 boundary では単語境界は描画しない    （*）デフォルト値は太字\n参考:\n VSCodeのエディター設定の話 - タブ文字がなぜか半角スペースになってしまう - Qiita  言語ごとの設定を行う インデントなどの設定を言語ごとに変えることができる。\nsettings.jsonで \u0026quot;[ruby]\u0026quot;: {} などのエントリを作って、その中に設定を記述すればいい。\nコマンドパレットで Preferences: Configure language specific settings と入力し、設定したい言語を選ぶやり方もある。\n参考:\n vscode - Visual Studio Codeで言語ごとにインデントの設定をしたい - スタック・オーバーフロー  自動フォーマット https://code.visualstudio.com/docs/editor/codebasics#_formatting\n   config 値（*） 意味     editor.formatOnSave true, false 保存時にコードフォーマッタをかける    （*）デフォルト値は太字\nインデント設定    config 値（*） 意味     editor.detectIndentation true, false ファイルタイプごとのインデント設定を有効にする   editor.insertSpaces true, false ソフトタブ（タブキーで半角スペースを挿入）のon/off   editor.tabSize 4 インデント幅    （*）デフォルト値は太字\nなぜか設定が反映されないときや、一時的に設定を変更したいときは、画面右下のインデント設定をクリックすることでアドホックに変更が可能。\n参考:\n VS Codeでインデントを設定するには：Visual Studio Code TIPS - ＠IT 【Visual Studio Code】インデント幅の変更方法と、変えても反映されない時の対処法 vscode - Visual Studio Codeで言語ごとにインデントの設定をしたい - スタック・オーバーフロー  フォント設定    config 値（*） 意味     editor.fontSize  エディタのフォントサイズ    （*）デフォルト値は太字\n参考:\n Visual Studio Codeでフォントサイズをいい感じにする - Qiita  ファイルを常に新しいタブで開く workbench.editor.enablePreview: false に設定し、プレビューを無効化する。\n参考:\n [Visual-Studio-Code] ファイルを常に新しいタブで開くようにvscodeを設定するには？ | CODE Q\u0026amp;A 問題解決 [日本語]  テキストの折り返し デフォルトは editor.wordWrap が折り返さない設定(= off)になっている。\nその他、次のオプションが有る:\n on \u0026hellip; エディタの右端で折り返す wordWrapColumn \u0026hellip; editor.wordWrapColumn で設定した値で折り返す bounded \u0026hellip; editor.wordWrapColumn 設定値とエディタの幅の小さい方で折り返す  参考:\n VS Codeでテキストの折り返しを設定するには：Visual Studio Code TIPS - ＠IT  ショートカットキー    Win/Linux Mac 機能     Ctrl+, ⌘+, 設定画面を開く   Ctrl+p ⌘+p ファイルを検索して開く   Ctrl+Shift+p, F1 ⌘+Shift+p, F1 コマンドパレットを開く   Ctrl+Shift+x ⌘+Shift+x 拡張機能を開く   Ctrl+` Ctrl+` ターミナルの表示/非表示   Ctrl+Shift+` Ctrl+Shift+^ 新しいターミナルの作成   Ctrl+k v ⌘+k v Markdownファイルのプレビュー画面をサイドバイサイドで表示   Ctrl+Shift+v ⌘+Shift+v Markdownファイルのプレビュー画面を別タブで表示   Ctrl+k Ctrl+s ⌘+k ⌘+s キーバインド一覧を開く   Ctrl+k Ctrl+t ⌘+k ⌘+t カラーテーマ(配色)設定    リファレンス:\n keyboard-shortcuts-linux.pdf keyboard-shortcuts-macos.pdf keyboard-shortcuts-windows.pdf  参考:\n Visual Studio Code キーボード ショートカット - Qiita VS CodeでMarkdownをプレビューするには？：Visual Studio Code TIPS - ＠IT  キーバインドの変更 ↑のキーバインド一覧から変更可能\nExtensions 改行コードの表示  code-eol  設定値: code-eol.color \u0026hellip; 改行を表す記号の文字色を16進数のカラーコードで指定。  例: \u0026quot;#841a75\u0026quot; (ラズベリー色)     line-endings  2018年9月、code-eolを入れて使っている。\ntextlint  vscode-textlint  日本語の書き方など指摘・修正してくれるLintツール。\n使い方:\n VS Codeでtextlintを使って文章をチェックする - Qiita  How-to VS Codeの更新 Ubuntu:\n debパッケージをダウンロード sudo dpkg -i code_xxx.deb  ","excerpt":"Micfosoftが提供するOSSのクロスプラットフォームなコードエディタ。\nElectronをベースにしており、IDE並の機能を持つ。\n3rd Partyの拡張機能も多数あり、機能を拡充することがで …","ref":"/tech-notes/a/program/vscode/","title":"Visual Studio Code"},{"body":"各種エディタやIDEでTerraformを書くための設定など。\nIntelliJ IDEA See also IntelliJ IDEA\nPlugins  HashiCorp Terraform / HCL language support - IntelliJ IDEs | JetBrains File Watcher \u0026hellip; ファイル保存時に terraform fmt を実行するため  設定  File Watcherによる terraform fmt を設定する  Visual Studio Code See also Visual Studio Code\n参考:\n VSCodeでTerraformを書くときの設定(2019/11/07追記: HCL2対応) - Qiita  Extensions  Terraform - Visual Studio Marketplace  2020年5月、公式になった    参考:\n Supporting the HashiCorp Terraform Extension for Visual Studio Code  設定  自動フォーマット（ editor.formatOnSave ）をONにしておく -\u0026gt; terraform fmt が掛かるようになる  ","excerpt":"各種エディタやIDEでTerraformを書くための設定など。\nIntelliJ IDEA See also IntelliJ IDEA\nPlugins  HashiCorp Terraform / …","ref":"/tech-notes/a/software/terraform/editor/","title":"エディタ"},{"body":"About シェルとは - IT用語辞典 e-Wordsより:\n シェルとは、コンピュータのOSを構成するソフトウェアの一つで、利用者からの操作の受け付けや、利用者への情報の提示などを担当するもの\n shやbashはシェルソフトウェア（シェルプログラムともいう）の例。\nANSIエスケープシーケンス ターミナルの出力文字に色や装飾を付けたりできる。\nExamples:\n# 太字 echo -e \u0026#34;Normal \\e[1mBold\\e[0m\u0026#34; # 文字色、背景色変更 echo -e \u0026#34;Default \\e[43m\\e[31mRed text on Yellow background\\e[0m\u0026#34; # 256色対応 # - \\e[38;5;文字色番号m # - \\e[48;5;背景色番号m echo -e \u0026#34;Default \\e[48;5;239m\\e[38;5;93mPurple text on Gray background\\e[0m\u0026#34; コードの例:\n   Code 効果     0 Reset all attributes   1 Bold/Bright   31 Red text   32 Green text   33 Yellow text   34 Blue text   35 Magenta text   36 Cyan text    NOTE:\n BashやZshでは $'\\e[...m' のANSI-C Quotingを使わなければならないケースがあるかも。  参考:\n ANSIエスケープシーケンス チートシート - Qiita bash:tip_colors_and_formatting - FLOZz\u0026rsquo; MISC Zsh#色: 256色対応  fish shell https://fishshell.com/\n Finally, a command line shell for the 90s\nfish is a smart and user-friendly command line shell for Linux, macOS, and the rest of the family.\n 使いやすいシェルとして人気のもの。\n C++ 実装 POSIX 非互換 プラグイン機能がある  参考:\n fish-shell でシェルの海をスイスイ泳いでみた | 株式会社ヌーラボ(Nulab inc.) fish shellが結構良かった話 - Qiita シェル芸人のためのfish入門 - Qiita \u0026hellip; Bashとの違いがわかりやすかった  Getting Started Install:\n https://fishshell.com/ の「Go fish」から  Documentation:\n https://fishshell.com/docs/current/  Tutorial — fish-shell 3.1.2 documentation    fisher https://github.com/jorgebucaran/fisher\n人気のパッケージ管理ツール。\nSee also パッケージ管理#fish\nExamples:\n# oh-my-fishのテーマをfisherでインストール fisher add oh-my-fish/theme-\u0026lt;テーマ名\u0026gt; 参考:\n 初心者がShellを知りFish〜Fisherを導入するまで - Qiita fisher v3 で変わったこと | Hi120kiのメモ  Child Pages ","excerpt":"About シェルとは - IT用語辞典 e-Wordsより:\n シェルとは、コンピュータのOSを構成するソフトウェアの一つで、利用者からの操作の受け付けや、 …","ref":"/tech-notes/a/cli/shell/","title":"シェル"},{"body":"関連ページ:\n Bash \u0026gt; Cookbooks  NOTE:\n BashのことはなるべくBashのページに書こうと思うが、調査が甘くてBashじゃないと動かないコードがここに書かれることもあるかもしれない。  About シェル上で動作する簡易なプログラミング言語、あるいはそれによって書かれたプログラム。\n参考:\n シェルスクリプトとは - IT用語辞典 e-Words  Getting Started リファレンス  POSIX 1003.1 - man page for sh (posix section 1p) - Unix \u0026amp; Linux Commands CONTENTS - Shell \u0026amp; Utilities: Detailed TOC | The Open Group  Shell Command Language   Shell Command Language (www.unix.org))  System V や POSIX の古典的な仕様がまとまってるっぽい雰囲気    コーディング規約  Shell Style Guide \u0026hellip; Google の  参考: Googleの肩に乗ってShellコーディングしちゃおう - Qiita    入門サイトなど  UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス シェルスクリプト入門 書き方のまとめ | Memo on the Web シェルスクリプトの基礎知識まとめ - Qiita  Spec パラメータと変数 Parameter Expansion Shell Command Language#2.6.2 Parameter Expansion\n${expression} こういうやつ。最もシンプルなのは ${parameter} とそのままブレースで囲むだけ。\n種類:\n ${#parameter} \u0026hellip; 文字列の長さを表す  参考:\n 【 文字列の長さを調べる 】 | 日経クロステック（xTECH）  演算子 NOTE:\n [ 条件式 ] は test 条件式 と同じ。  See test    ドキュメント:\n Bash Reference Manual  参考:\n シェルスクリプト（bash）のif文やwhile文で使う演算子について - Qiita  単項条件演算子    演算子 真の条件     -v VAR 変数VARが定義されている。※ -v $VAR ではない   -n $str $str に長さ1以上の文字列が入っている   -z $str $str が空文字   -x $path $path が実行可能ファイル   -L $path $path がシンボリックリンク   -S $path $path がソケット    参考:\n \u0026lt;Bash, zsh\u0026gt; シェル変数が定義されているかを判定する方法 - ねこゆきのメモ  二項条件演算子    構文 真の条件     \u0026ldquo;$str1\u0026rdquo; = \u0026ldquo;$str2\u0026rdquo; $str1と$str2が等しい   \u0026ldquo;$str1\u0026rdquo; != \u0026ldquo;$str2\u0026rdquo; $str1と$str2が等しくない   $x -eq $y 数値$xと$yが等しい   $x -ne $y 数値$xと$yが等しくない   $x -gt $y 数値$xが$yより大きい   $x -lt $y 数値$xが$yより小さい   $x -ge $y 数値$xが$y以上   $x -le $y 数値$xが$y以下   $path1 -nt $path2 $path1 のタイムスタンプが $path2 より新しい   $path1 -ot $path2 $path1 のタイムスタンプが $path2 より古い    ループ ## 無限ループ while true; do if true; then continue # 後続の処理をスキップして次の周回へ else : fi : done ## イテレータでループ for i in $(get_some_list); do : done 参考:\n 【 次の繰り返しに移る「continue」 】 | 日経クロステック（xTECH）  case構文 Shell Command Language#Case Conditional Construct\n構文:\ncase 値 in パターン1 ) 処理1 ;; パターン2 ) 処理2 ;; パターン3 ) 処理3 ;; … パターンn ) 処理n ;; esac NOTE:\n シェルのパターンマッチを使うこともできる  参考:\n case 文の使用方法 | UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス  パターンマッチ Shell Command Language#2.13. Pattern Matching Notation\n   パターン マッチ文字列     ? 任意のアスキー1字   * ヌル文字を含む任意の文字列   [ [...] で [] 内の任意の1字にマッチする    Parameter Expansion  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02  Examples:\nparameter=${parameter:-word} if [ -z ${var+x} ]; then echo \u0026#34;var is unset\u0026#34;; else echo \u0026#34;var is set to \u0026#39;$var\u0026#39;\u0026#34;; fi 参考:\n shell - How to check if a variable is set in Bash? - Stack Overflow  Built-Ins . (dot) https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_18\n: (colon) null utility\n https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_16 Bash: https://tiswww.case.edu/php/chet/bash/bashref.html#Bourne-Shell-Builtins  何もしないコマンド\nreturn 関数かdot scriptを終了する\nhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_24\nExamples:\nreturn 0 # 0以外だと異常終了扱い return 1 # 引数省略時は最後のコマンドのexit statusになる return 参考:\n シェルスクリプト return コマンド - Qiita https://github.com/progrhyme/experiments/tree/master/bash/source-scripts  unset https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_29\nExamples:\n# シェル変数または環境変数を削除 unset [-v] FOO # 関数名を削除 unset -f my_func 参考:\n 【 unset 】コマンド――変数や関数を削除する：Linux基本コマンドTips（307） - ＠IT  ","excerpt":"関連ページ:\n Bash \u0026gt; Cookbooks  NOTE:\n BashのことはなるべくBashのページに書こうと思うが、調査が甘くてBashじゃないと動かないコードがここに書かれることもある …","ref":"/tech-notes/a/cli/shell/script/","title":"シェルスクリプト"},{"body":"端末エミュレータ、ターミナルエミュレータなどとも呼ばれる。\nmacOS  ターミナル.app \u0026hellip; 標準でインストールされている端末アプリ iTerm2  Topics 色  256 Colors - Cheat Sheet - Xterm, HEX, RGB, HSL  Child Pages ","excerpt":"端末エミュレータ、ターミナルエミュレータなどとも呼ばれる。\nmacOS  ターミナル.app \u0026hellip; 標準でインストールされている端末アプリ iTerm2  Topics 色  256 …","ref":"/tech-notes/a/software/terminal/","title":"ターミナルソフトウェア"},{"body":"Software Test Engineeringまで入るかも。\n一旦、負荷テストもここに入れる。\n負荷テストツール どんなものがあるかメモ:\n ab JMeter Gatling Locust  Topics スタブとモックの違い どっちがどっちかいつもよくわからなくなる。\nスタブの定義らしきもの:\n テスト対象モジュールが依存するモジュールの代用品として動作し、決められた動きをするもの  モックの定義らしきもの:\n テスト対象モジュール、またはスタブが利用するモジュールの代用品として動作し、どのような使われ方をしたかをチェックするもの  例えばどのメソッドが何回呼ばれたか、とか    参考:\n スタブとモックの違い - Qiita 自動テストのスタブ・スパイ・モックの違い | gotohayato.com スタブとは何？ Weblio辞書 モックアップとは何？ Weblio辞書  MEMO:\n 2020-05-23 旧Wikiに載せていたリンクは切れてしまっていた。  ","excerpt":"Software Test Engineeringまで入るかも。\n一旦、負荷テストもここに入れる。\n負荷テストツール どんなものがあるかメモ:\n ab JMeter Gatling Locust …","ref":"/tech-notes/a/software/test/","title":"Software Test"},{"body":"ネットワーク関係のUnixコマンドやCLIツールについて、ここに記す。\ndig https://linuxjm.osdn.jp/html/bind/man1/dig.1.html\nDNSクエリを送信し、結果を得る。\n構文:\ndig [@ server ] domain [Aq query-type ] [Aq query-class ] [+ Aq query-option ] [-Aq dig-option ] [%comment ]  @server \u0026hellip; ネームサーバを指定  query-option:\n   Option 意味     +short 結果のIPやホスト名だけを返す   +trace ルートDNSから問合せ    参考:\n digコマンドで覚えておきたい使い方11個 | 俺的備忘録 〜なんかいろいろ〜 digコマンド 使い方 オプション DNS BIND  mtr デフォルトは ICMP を使う。\nオプション:\n   Option 意味     -T,--tcp TCP SYN を使う   -u UDP を使う   -P,--port \u0026lt;port\u0026gt; UDP/TCP で port を指定する。   -v,--version バージョン表示。    ※古いバージョンだとオプション効かないかも。man とか見て。\nss netstatとまあまあ同じ感じで使える。\nnetstatより推奨っぽいが、作りがバギーという噂もどこかで。。\nExamples:\n# LISTENしているポート ss -l # TCP, UDPとも名前解決せずに全ての接続を表示 ss -antu 参考:\n Linuxでプロセスが何のポート使っているかを調べる - Qiita  traceroute デフォルトは UDP を使う。\nオプション:\n   Option 意味     -I ICMP を使う。   -T TCP を使う。   -p \u0026lt;port\u0026gt; UDP/TCP で port を指定する。    ","excerpt":"ネットワーク関係のUnixコマンドやCLIツールについて、ここに記す。\ndig https://linuxjm.osdn.jp/html/bind/man1/dig.1.html\nDNSクエリを送信 …","ref":"/tech-notes/a/cli/network/","title":"ネットワーク関係のCLI"},{"body":"シェルスクリプトのパッケージ管理ツールについて。\nたまに調べるのでこのページにまとめる。\n汎用  basherpm/basher \u0026hellip; clenvと似てる。複数環境切替えなんて機能はもちろんない rossmacarthur/sheldon \u0026hellip; Rust製。Zshに向いてそう。なんでもできそう rerun \u0026hellip; フレームワーク色がある progrhyme/clenv \u0026hellip; 拙作。未完  参考:\n シェルスクリプトのパッケージマネージャー「basher」の機能概要と使い方 - Qiita \u0026hellip; 2020年に書いたbasherの紹介記事 A Package Manager For Shell Scripts - Juan Ibiapina \u0026hellip; basherの作者による紹介記事 \u0026quot;clenv\u0026quot; というシェルスクリプトのパッケージ管理ツールのようなものを作った - weblog of key_amb  Bash  bpkg ash-shell/ash \u0026hellip; フレームワークだそうだ  参考:\n bash package manager: bpkgの紹介 - Qiita  Zsh  Oh My Zsh \u0026hellip; プラグインマネージャーというよりはフレームワークなのかな zsh-users/antigen zplug zplugin tarjoilija/zgen antibody  参考:\n おい、Antigen もいいけど zplug 使えよ - Qiita \u0026hellip; b4b4r07氏のエントリ もっと便利になれる zsh プラグインによる CLI ライフ - Qiita \u0026hellip; b4b4r07氏のエントリ A comparison of all the ZSH plugin mangers I used : zsh  fish  jorgebucaran/fisher \u0026hellip; これが人気っぽい oh-my-fish \u0026hellip; fisher以前はこれが人気だったっぽい。fishで使えるテーマがたくさんある  https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md \u0026hellip; 利用可能なテーマ一覧。    ","excerpt":"シェルスクリプトのパッケージ管理ツールについて。\nたまに調べるのでこのページにまとめる。\n汎用  basherpm/basher \u0026hellip; clenvと似てる。複数環境切替えなんて機能はもちろ …","ref":"/tech-notes/a/cli/shell/pkg-man/","title":"Package Managers"},{"body":"","excerpt":"","ref":"/tech-notes/a/software/pkg-man/","title":"Package Managers"},{"body":"既存のクラウドインフラなどからTerraformの設定ファイルを生成してくれるもの。\nGCPが出してるけど、AWS, Azureなど他のクラウドのほかKubernetes, Datadog, GitHubなどTerraformの多くのプロバイダに対応している。\nInstall Homebrew:\nbrew install terraformer ※Terraformプロバイダをプラグインとして ~/.terraform.d/plugins/{darwin,linux}_amd64/ に配置する必要がある。\nUsage Examples:\nterraformer import google --projects=prj1,prj2 \\  --regions=asia-northeast1,asia-northeast2 \\  --resources=networks,subnetworks,gcs ./generated/ 以下にリソースの定義ファイルとtfstateファイルが生成される。\n","excerpt":"既存のクラウドインフラなどからTerraformの設定ファイルを生成してくれるもの。\nGCPが出してるけど、AWS, Azureなど他のクラウドのほかKubernetes, Datadog, …","ref":"/tech-notes/a/software/terraform/terraformer/","title":"terraformer"},{"body":"リファレンスについては See Rust#Documentation\n変数 Rustでは変数はデフォルトでイミュータブル（変更不可）。\nExamples:\nletfoo=5;// immutable letmutbar=5;// mutable 参考:\n Variables and Mutability - The Rust Programming Language  型  String provided by Struct std::string::String  Associated Function いわゆる静的メソッド。\n例: String::new\n参照 \u0026amp; がつくと参照を表す。\nExamples:\n// 例1 usestd::io;fn main(){letmutguess=String::new();io::stdin().read_line(\u0026amp;mutguess).expect(\u0026#34;Failed to read line\u0026#34;);}// 例2 fn main(){lets1=String::from(\u0026#34;hello\u0026#34;);letlen=calculate_length(\u0026amp;s1);println!(\u0026#34;The length of \u0026#39;{}\u0026#39; is {}.\u0026#34;,s1,len);}fn calculate_length(s: \u0026amp;String)-\u0026gt; usize {s.len()}参考:\n References and Borrowing - The Rust Programming Language  ","excerpt":"リファレンスについては See Rust#Documentation\n変数 Rustでは変数はデフォルトでイミュータブル（変更不可）。\nExamples:\nletfoo=5;// immutable …","ref":"/tech-notes/a/program/lang/rust/spec/","title":"言語仕様"},{"body":"コンテンツをMarkdown等で管理して、静的サイトを作れるソフトウェア製品。\n製本ツールであっても、HTML形式での出力に対応しているものはここに入れると思う。\n参考 https://www.staticgen.com/ \u0026hellip; OSS比較サイト\nChild Pages ","excerpt":"コンテンツをMarkdown等で管理して、静的サイトを作れるソフトウェア製品。\n製本ツールであっても、HTML形式での出力に対応しているものはここに入れると思う。 …","ref":"/tech-notes/a/software/static-site-generator/","title":"Static Site Generators"},{"body":"Python製で割とよく使われている負荷試験ツール。\nGetting Started  https://docs.locust.io/en/stable/index.html  https://docs.locust.io/en/stable/installation.html https://docs.locust.io/en/stable/quickstart.html    メモ:\n installはpipで。 発射台が1台なら locust -f path/to/locustfile.py --host=https://your-site.com/ で実行される。  --no-web オプションをつけない限りwebサーバが立ち上がり(デフォルトは http://localhost:8089 )、テスト実行状況やメトリクスが見れて便利   発射台をmaster + slave複数台で構成することもできる  Documentation  APIリファレンス : https://docs.locust.io/en/stable/api.html  locustコマンド SYNOPSIS:\nlocust -f locustfile.py --host=https://example.com locust -f locustfile.py --host=https://example.com --no-web -c 100 -r 5 -t 30m ## 20分毎に20クライアントずつ増加させる locust -f locustfile.py --host=https://example.com --no-web -c 100 -r 5 -t 1h40m \\  --step-load --step-clients 20 --step-time 20m Options:\n   Option Description     -f , \u0026ndash;locustfile  locust python script file   \u0026ndash;no-web Web UIを起動しない   -c \u0026lt;クライアント数\u0026gt;, \u0026ndash;clients \u0026lt;クライアント数\u0026gt; 最大同時クライアント数   -r \u0026lt;HATCH_RATE\u0026gt;, \u0026ndash;hatch-rate \u0026lt;HATCH_RATE\u0026gt; 秒間でいくつクライアントを生成するか   -t \u0026lt;実行時間\u0026gt;, \u0026ndash;run-time \u0026lt;実行時間\u0026gt; \u0026lt;実行時間\u0026gt; 実行した後、停止する。ex: 300s, 20m, 3h, 1h30m   \u0026ndash;csv  CSVに統計情報を保存   \u0026ndash;logfile     \u0026ndash;step-load 一定時間ごとにクライアント数を増加させる。\u0026ndash;step-clients, \u0026ndash;step-timeの指定が必要   \u0026ndash;step-clients \u0026lt;クライアント数\u0026gt;    \u0026ndash;step-time \u0026lt;時間\u0026gt;     Configuration locustfile https://docs.locust.io/en/stable/writing-a-locustfile.html\n Locust class  wait_time \u0026hellip; クライアントがタスク間に挟むインターバルを設定する  https://docs.locust.io/en/stable/api.html#module-locust.wait_time between(min_wait, max_wait) \u0026hellip; 最小時間、最大時間の間のランダムな時間 constant(wait_time) \u0026hellip; 一定時間 constant_pacing(wait_time) \u0026hellip; 実行時間によらず、一定間隔でタスクを実行する。例えば、 wait_time = constant_pacing(1) としたとき、実行時間が0.3秒なら次の待ち時間は0.7秒に、実行時間が0.2秒なら待ち時間は0.8秒になる。      Features Step Load Mode https://docs.locust.io/en/stable/running-locust-in-step-load-mode.html\n--step-load オプションを使って、一定時間ごとに負荷を増加させる。\nmaster-slave構成で分散実行 https://docs.locust.io/en/stable/running-locust-distributed.html\n 1台のマシンでもコアが複数あればマルチコアの恩恵を受けられる  ※Qiitaにも書いた。Locustを1台のマシンで分散実行する（CLI編） - Qiita\nExample:\n##!bash host= locustfile=yourlocustfile.py slave_num=15 # slave数（並列数 - 1） max_clients=200 # 最大クライアント数 duration=90m # 総実行時間 step_clients=5 # クライアントの増加数 / インターバル step_interval=1m # インターバル ## master nohup taskset -c 0 locust -f $locustfile --no-web \\  -c $max_clients -t $duration -H $host \\  --master --expect-slaves $slave_num \\  --step-load --step-clients $step_clients --step-time $step_interval \\  --logfile output/locust.master.log -L WARNING --csv output/locust.master.$(date +\u0026#39;%Y%m%d_%H%M\u0026#39;) \\  \u0026amp;\u0026gt; /dev/null \u0026amp; ## slaves for no in $(seq 1 ${slave_num}); do nohup taskset -c $no locust -f $locustfile --no-web \\  -c $max_clients -H $host \\  --slave --master-host 127.0.0.1 \\  --logfile output/locust.slave$no.log -L WARNING --csv output/locust.slave$no.$(date +\u0026#39;%Y%m%d_%H%M\u0026#39;) \\  \u0026amp;\u0026gt; /dev/null \u0026amp; done NOTE:\n master:  --master オプションを付ける --expect-slaves=N オプションで接続を待ち受けるslaveの数を指定する。指定のslave数に達してから試験開始する --step-load オプションはmasterで指定する 待受けポート番号を変える場合は --master-bind-port=\u0026lt;ポート番号\u0026gt; オプションで。デフォルトは 5557 ポート   slave:  --slave, --master-host \u0026lt;masterのアドレス\u0026gt; を指定する ポート番号がデフォルトと異なるなら --master-port=\u0026lt;ポート番号\u0026gt; オプションで指定    Tips:\n slaveの数を増やすとmasterの負荷が上がる気がする  How-to Locustでプロキシサーバ経由でテストリクエスト送信 https://github.com/locustio/locust/issues/203 によると環境変数を設定するだけでも行けるということなのだが、私が試したときは駄目だったので、下のようにした\nproxies = {} if \u0026#39;HTTP_PROXY\u0026#39; in os.environ: proxies[\u0026#39;http\u0026#39;] = os.environ[\u0026#39;HTTP_PROXY\u0026#39;] if \u0026#39;HTTPS_PROXY\u0026#39; in os.environ: proxies[\u0026#39;https\u0026#39;] = os.environ[\u0026#39;HTTPS_PROXY\u0026#39;] self.client.get(\u0026#39;/api\u0026#39;, params=params, proxies=proxies) ※このやり方はpython-requestsに依存している\nFastHttpLocustを使ってパフォーマンスアップ Increase Locust’s performance with a faster HTTP client — Locust 0.14.5 documentation\n デフォルトのHTTPクライアントとしてpython-requestsを使っているが、geventhttpclientを使うFastHttpLocustを代わりに使うことができる  python-requestsと非互換なところもあるので注意    Example:\nfrom locust import TaskSet, task, between from locust.contrib.fasthttp import FastHttpLocust class MyTaskSet(TaskSet): @task def index(self): response = self.client.get(\u0026#34;/\u0026#34;) class MyLocust(FastHttpLocust): task_set = MyTaskSet wait_time = between(1, 60) ","excerpt":"Python製で割とよく使われている負荷試験ツール。\nGetting Started  https://docs.locust.io/en/stable/index.html …","ref":"/tech-notes/a/software/test/locust/","title":"Locust"},{"body":"当面、このページはリファレンス的に各サブコマンドの解説など記す。\nユースケースについてはGit#How-toを参照。\n参考資料  【Git】基本コマンド - Qiita  apply ## git diffコマンドで作ったpatchを適用する git apply file.patch 参考:\n Git でパッチファイルを作成する | まくまくGitノート  archive NOTE:\n tar を使わないとファイルに実行ビットがついてしまうようだ。  参考:\n Git リポジトリの内容を zip ファイルにする - Qiita  branch https://git-scm.com/docs/git-branch\n# ローカルのbranchを表示 git branch ## マージ済みのbranchを表示 git branch --merged ## 出力フォーマット指定 git branch --format=\u0026#34;\u0026lt;FORMAT\u0026gt;\u0026#34; # 今のbranchを元に新しいbranchを作る git branch \u0026lt;newbranch\u0026gt; # 既存のbranchを元に新しいbranchを作る git branch \u0026lt;oldbranch\u0026gt; \u0026lt;newbranch\u0026gt; --format オプションで指定できるフォーマットについてはgit-for-each-refを見よ。\ncheckout ## topicブランチを作成 git checkout -b topic ## remoteブランチからローカルブランチを作成 git checkout -b foo origin/foo ## 空ブランチを作る git checkout --orphan empty 参考:\n gitの空ブランチを作る - Qiita  cherry-pick 別ブランチで開発中の機能などをコミット単位で取り込むときに使う。\ngit cherry-pick \u0026lt;SHA1\u0026gt; ## マージコミットのcherry-pick git cherry-pick -m 1 \u0026lt;SHA1\u0026gt; 参考:\n merge commitをcherry-pickする - Qiita  clone https://git-scm.com/docs/git-clone\n## 深さ1の shallow clone git clone --depth 1 \u0026lt;URL\u0026gt; ## ブランチ指定 git clone --branch BRANCH URL commit https://git-scm.com/docs/git-commit\n# 変更・削除したファイルを全てコミットする git commit --[a]ll # 変更点を表示してコミット git commit -v # 空コミット git commit --allow-empty # コミットメッセージを変更 git commit --amend diff ## スペース等の差分を無視 git diff -w ## ファイル名のみ表示 git diff --name-only 参考:\n colordiffを使わずにdiffをカラー表示する - ももいろテクノロジー  fetch ## remote で削除された branch について、local のトラッキングブランチも消す git fetch -p|--prune for-each-ref https://git-scm.com/docs/git-for-each-ref\nlocal branch, remote branchのHEAD, tagの情報を表示。\n# A simple example showing the use of shell eval on the output, demonstrating the use of --shell. # List the prefixes of all heads: #!/bin/sh git for-each-ref --shell --format=\u0026#34;ref=%(refname)\u0026#34; refs/heads | \\ while read entry; do eval \u0026#34;$entry\u0026#34; echo `dirname $ref` done FORMATで指定できるフィールド:\n   フィールド 意味     refname The name of the ref (the part after $GIT_DIR/).   refname:short branch, tagなど明らかな名前がついているものはこれで参照できる   objecttype blob, tree, commit, tag   objectsize    objectname     log ## 過去のコミットから対象文字列を含むコミットを検索 git log -S 文字列 ## 1行で表示 git log --pretty=oneline git log --oneline --graph --decorate ## フォーマット指定 git log --format=\u0026#34;%H\u0026#34; # full commit hash のみ 参考:\n Git - リビジョンの選択 git logのオプションあれこれ - 煙と消えるその前に git log をいい感じに alias して色付きで見やすくしておく - Qiita  pull https://git-scm.com/docs/git-pull\n# リファレンスには書いてないが、fetch時に--pruneしてくれるらしい git pull --prune    Option 効果     \u0026ndash;depth=N 取得する履歴数を制限する。shallowリポジトリの場合、履歴数を指定した数に増減させる    参考:\n リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita  rebase ## 過去のNコミットを編集 git rebase -i HEAD~N ## 1st コミットから編集 git rebase -i --root 参考:\n First commit が git rebase -i できない問題 → git rebase -i \u0026ndash;root でできる - 納豆には卵を入れる派です。  remote リモートリポジトリの管理。\n## リモートリポジトリ一覧 git remote git remote -v ## リモートリポジトリ追加 git remote add \u0026lt;リポジトリ名\u0026gt; \u0026lt;URL\u0026gt; ## リモートリポジトリ削除 git remote rm \u0026lt;リポジトリ名\u0026gt; ## URL変更 git remote set-url \u0026lt;リポジトリ名\u0026gt; \u0026lt;URL\u0026gt; ## リポジトリ名変更 git remote rename \u0026lt;リポジトリ名\u0026gt; \u0026lt;新しいリポジトリ名\u0026gt; 参考:\n これで完璧! git remoteでリポジトリを【追加,削除,確認,変更】 | 侍エンジニア塾ブログ（Samurai Blog） - プログラミング入門者向けサイト  revert git revert \u0026lt;SHA1\u0026gt; ## マージコミットの取消し git revert -m 1 \u0026lt;SHA1\u0026gt; 参考:\n https://github.com/git/git/blob/master/Documentation/howto/revert-a-faulty-merge.txt gitのmerge-commitをrevertする - 車輪を再発明 / koba04の日記  submodule https://git-scm.com/docs/git-submodule\nなんだかんだで割りと使っている。\n# submodule追加 git submodule add \u0026lt;git-url\u0026gt; \u0026lt;local-path\u0026gt; # 全submodule更新 git submodule foreach git pull origin master sumobuleの削除 =\u0026gt; https://github.com/progrhyme/git-wraps/blob/master/bin/git-submodule-delete\n参考:\n Git submodule の基礎 - Qiita git submoduleしてるリポジトリをリモートの最新に更新する - Qiita  向き先url変更  .gitmodules の向き先を新urlに変更 git submodule sync で反映  .git/config に変更が反映される   git submodule update とかで更新  参考:\n submodule の向き先 url を変更する - Qiita  tag SYNOPSIS:\n## 作成 git tag \u0026lt;タグ名\u0026gt; ## 注釈付き git tag -a \u0026lt;タグ名\u0026gt; -m \u0026lt;メッセージ\u0026gt; ## 表示 git show \u0026lt;タグ名\u0026gt; ## 一覧 git tag ## 削除 git tag -d \u0026lt;タグ名\u0026gt; ## リモートに反映 git push \u0026lt;リモート\u0026gt; \u0026lt;タグ名\u0026gt; git push --tags ## 削除反映 git push \u0026lt;リモート\u0026gt; :\u0026lt;タグ名\u0026gt; 参考:\n 【Git】tag関連コマンド - Qiita  ","excerpt":"当面、このページはリファレンス的に各サブコマンドの解説など記す。\nユースケースについてはGit#How-toを参照。\n参考資料  【Git】基本コマンド - Qiita  apply ## git …","ref":"/tech-notes/a/software/git/cli/","title":"gitコマンド"},{"body":"特定のバージョンの情報をこのページ、またはこの下位ページに書いていく。\nCatalina  macOS Catalina v10.15 macOS 16番目のメジャーリリース 2019年10月7日リリース  変更点:\n 32bit Appが動かなくなった  32 ビット App と macOS High Sierra 10.13.4 以降の互換性 - Apple サポート    ","excerpt":"特定のバージョンの情報をこのページ、またはこの下位ページに書いていく。\nCatalina  macOS Catalina v10.15 macOS 16番目のメジャーリリース 2019年10月7日リ …","ref":"/tech-notes/a/os/mac/ver/","title":"macOS Versions"},{"body":"5/24 macOSでターミナルの操作動画をタイプしたキーと共に録画する ブログ用にキャプチャ動画を撮りたいと思った。\nやり方は前に調べてOS \u0026gt; macOS#画面を動画で撮影してGIFアニメに変換に書いておいた。\nKeyCastrのインストールとセットアップ まず、キー入力を表示するためにKeyCastrを入れる。これは一択である。\ndmgボリュームをマウントし、アプリケーションをいつものフォルダにインストール。\n開発者が未確認のため実行できないようなので、FinderからCtrlキーを押しながらアプリをクリックして「開く」を選ぶ。\n 参考: 開発元が未確認のMacアプリケーションを開く - Apple サポート  また、たぶんキーボード入力とかディスプレイとか（想像）にアクセスするため、アプリにアクセシビリティを与えてあげないといけない。　macOSの「システム環境設定」を開き、「セキュリティとプライバシー \u0026gt; アクセシビリティ \u0026gt; プライバシー」設定画面で、「下のアプリケーションにコンピュータの制御を許可。」のリストにKeyCastrを加える。\n設定したら、KeyCastrを再起動する。\nこれでタイプしたキーがKeyCastrのウィンドウに表示されるようになった。\nウィンドウが消える前にクリックアンドドラッグすることで、画面上の任意の位置に動かすことができる。\n録画のため、ターミナル画面の右下隅あたりに移動しておく。\n5文字ぐらいタイプしてみて、右側にはみ出さない程度の位置がベスト。\n追記: macOS Catalinaでの設定箇所の違い Catalinaの場合、アクセシビリティの設定箇所が異なる。\n「システム環境設定」を開き、「セキュリティとプライバシー \u0026gt; 入力監視 \u0026gt; プライバシー」設定画面で、「ほかのアプリケーションの使用中でも、下のアプリケーションにキーボードからの入力の監視を許可。」のリストにKeyCastrを加える。\nターミナル画面の録画 いま私はmacOS Mojaveを使っているので、「⌘⇧5」キーを押すことでスクリーンキャプチャを録ることができる。\nやってみて気づいたが、このショートカットキーから静止画も撮れるようだ。\nショートカットキーを押すと撮影位置を表す破線枠と、その下にメニューバーが現れる。 動画を録るには、破線枠で撮影位置を調整した後、メニューバーの真ん中右側の「選択部分を収録」を選んでENTERキーを押す。 すると、録画が開始される。\n録画が終わったらもう一度「⌘⇧5」キーを押して、メニューバーを呼び出し、停止ボタンを押す。すると、動画がデスクトップに保存される。\nなお、ターミナル画面を撮影するときは、以下に気をつけるとよいと思う:\n ウィンドウの透過はオフにしておく 文字サイズを大きめにしておく 入力するコマンドやキーのアンチョコを用意しておく  動画をGIFアニメ化 GIFアニメ化のアプリには、GiftedかPicGIF Liteかの選択肢があったが、Appストアの評価を見てPicGIF Liteに決めた。\n使ってみたところ、無料でも機能が充実していて素晴らしいと思った。\nPicGIF Liteを起動し、先ほど録画した動画のmovファイルをドラッグアンドドロップすると、取り込むことができる。\nここでフレームレートを指定できる。 今回は秒間4フレームとした。\n動画を取り込んだ後、余分なフレームを削除したり、順番を入れ替えたりできるようだ。 最初と最後の余計な部分を削った。\n初期状態だとキャンバスが360x240と小さく、画像がぼやけてしまうので、大きめにしておくといい。\n今回はプリセットに合わせることを考えておらず、余白が少し大きくなってしまったので、カスタムのキャンバスサイズを定義した。\n以上。\nGitpodというクラウドIDEがよさそう https://www.gitpod.io/\nクラウドIDEでもあるEclipse TheiaベースのオンラインIDE.\nGitHub, GitLabの既存プロジェクトをインポートしてワンクリックで開発環境を立ち上げられるそうだ。\nEclipse TheiaとともにTypeFox社がファウンダー / 開発元。\n参考:\n クラウドIDE「Gitpod」を試してみたら予想以上に使えそうだった - Qiita Gitpodが最強過ぎる件について - Qiita 2020-04-03 クラウド・デスクトップ環境コードエディタ「Eclipse Theia 1.0」リリース | Think IT（シンクイット）  MBAをCatalinaに上げた Macに関する記事をQiitaに上げようと思ったが、せめてその前にCatalinaに上げるべきだろうという謎の義務感によりアップグレードを実行。\nKeyCastrが32ビット版で動かなくなったので、どうやら非公式のサイトからインストールしてしまっていたらしいと気づいた。\nbrew cask でインストールできると知ったので、その方式に変えた。\n Brewfileの更新: https://github.com/progrhyme/myenv/commit/a6bc1671c49a786b16918b12e0b33010e94d5b52  macOSのウイルス対策ソフト たまに調べる。\nやはりノートンが老舗でバランス良く、安心感ある印象。\n セキュリティソフトの比較 2020 - the比較 \u0026hellip; これ表になっててわかりやすい 比較2020\u0026rsquo;【Mac用】ウイルス対策ソフト31点のおすすめ；軽いセキュリティソフト: 家電批評モノマニア \u0026hellip; 縦に長い。ざっと流し見した  久しぶりにRustを触った 最後に触ったのは2年前ぐらいかな？\nMacBookにツールチェインをインストールしていたが、 rustup update で最新化できたっぽい。 1回目は一部コンポーネントの更新に失敗したが、再実行したら完璧になったっぽい。\n","excerpt":"5/24 macOSでターミナルの操作動画をタイプしたキーと共に録画する ブログ用にキャプチャ動画を撮りたいと思った。\nやり方は前に調べてOS \u0026gt; macOS#画面を動画で撮影してGIFアニメに …","ref":"/tech-notes/a/memo/20200524/","title":"2020-05-24"},{"body":"5/23 gcloud-promptにテストとCIを足した https://github.com/progrhyme/gcloud-prompt/pull/1\n複数のシェルから同時に触っても表示が壊れたりしないように、排他制御機構を入れたのだけど、逆にエンバグしそうで怖くなったので、テストを足した。\nテストのため、 gcloud コマンドの挙動をなんちゃって実装したシェルスクリプトを書いたけど、これはスタブなのだろうか、モックなのだろうかというのが気になった。\nとりあえずコメントでは「stub」ということにしておいたけど。\nSee Software \u0026gt; テスト#スタブとモックの違い\n今回実装した機能を鑑みるに、\n gcloud info や gcloud config が呼ばれたときに決まった結果を返す -\u0026gt; スタブ gcloud-prompt.shから gcloud config コマンドが呼ばれたときに、呼ばれた回数を記録 -\u0026gt; モック  両方の性質を合わせ持ってることになるのかな？\n詳しい人いたら教えてほしい。\nbasher link がmacOSで動かなかった シェルスクリプトのパッケージマネージャー「basher」の機能概要と使い方 - Qiitaに追記した通り。\n既に修正PRも送っている:\n modify: Don\u0026rsquo;t use \u0026quot;readlink -f\u0026quot; in \u0026quot;resolve_link\u0026quot; by progrhyme · Pull Request #80 · basherpm/basher  デバッグに苦しんだ副産物として、 realpath をエミュレートするBashスクリプトが出来た:\n https://github.com/progrhyme/bash-realpath  デバッグコードがたくさん残っているので、実験的な意味合いが強いが。\n","excerpt":"5/23 gcloud-promptにテストとCIを足した https://github.com/progrhyme/gcloud-prompt/pull/1\n複数のシェルから同時に触っても表示が壊れ …","ref":"/tech-notes/a/memo/20200523/","title":"2020-05-23"},{"body":"5/22 Ubuntu 18.04でzsh-syntax-highlightingを入れた zshでの help コマンドを探していたら https://wiki.archlinux.jp/index.php/Zsh にたどり着き、zsh-syntax-highlightingの存在を知った。\nfish shellのようなシンタックスハイライトを提供してくれるプラグインらしい。\n早速試してみることにした。\nINSTALL.mdによれば、UbuntuだとxenialかOBSのリポジトリからパッケージで入れるとよさそうだったが、macOSならHomebrewで入れれるようだったので、Linuxbrewでも行けるかまずはやってみることにした。\n$ brew install zsh-syntax-highlighting : ==\u0026gt; Installing dependencies for zsh-syntax-highlighting: patchelf, ncurses, zlib, pcre, gettext, libbsd, expat,gdbm, openssl@1.1, berkeley-db, perl, texinfo and zsh : けっこう依存が色々あったが、無事にインストールできた。\n試しに source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh を実行してみると、ちゃんとコマンドなどにハイライトが効くようになった。\ndotfilesの対応は https://github.com/progrhyme/myenv/commit/63ce3a305e6cfa6b5b247e9eba1f8ef58edb94b5 こんな感じで。\nこれで私のZsh環境がまた一歩fish shellに近づいた。\n（追記）macOSにも入れた: https://github.com/progrhyme/myenv/commit/71cf5a49b5ebc5fbd3dc190e5d3f46fa25d23d3b\n","excerpt":"5/22 Ubuntu 18.04でzsh-syntax-highlightingを入れた zshでの help …","ref":"/tech-notes/a/memo/20200522/","title":"2020-05-22"},{"body":"See Also:\n Bash \u0026gt; Cookbooks  ユーザー入力を受け付ける read を使う。\necho -n \u0026#34;Are you sure? (y/N) \u0026#34; read answer if [ \u0026#34;$answer\u0026#34; != \u0026#34;y\u0026#34; ]; then echo \u0026#34;Canceled.\u0026#34; exit fi 参考:\n 【Linux】シェルスクリプトでキーボード入力を受付ける方法  コマンドの出力結果にタイムスタンプをつける do_something | while IFS= read -r line; do echo \u0026#34;$(date)$line\u0026#34;; done 参考:\n linux - How to add a timestamp to bash script log? - Server Fault  OSの判別 参考:\n シェルスクリプトでOSを判別する - Qiita  絵文字を使う  絵文字のユニコードを探す U+1F3A3 だったら \\U1F3A3 とする  4桁だったら小文字のuで、 \\u2122 としてもいいっぽい。\n絵文字を探すには http://www.fileformat.info/info/emoji/list.htm とか https://emojipedia.org/ を使うといい。\n参考:\n シェル上で🍣🍣（Unicode絵文字）を表示させる - Qiita  シェル関数が定義されているか調べる コマンド同様に、 which function or command -v function で取れる。\ntest -v function ではNG.\n数字を3桁ずつカンマ区切りで出力 See UNIX系コマンド#printf(1)\nオプション解析 シェルスクリプトでコマンドラインオプションをどう解析するか。\n参考:\n bash によるオプション解析 - Qiita  getopts, getopt, 自前解析のメリット・デメリット。自前解析推し   Example of how to parse options with bash/getopt  sourceされたスクリプト内でファイル自身のパスを取得 Bash / Zsh両対応:\nscript_dir=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd) 参考:\n bash/zshでsourceされたスクリプト内で、ファイル自身の絶対パスをとるシンプルな記法 - Qiita  排他制御 スクリプトのポータビリティを保ちつつ、簡単に実現するなら、ロック取得コマンドとして次の2つのコマンドが使える:\n mkdir $lock_dir ln -s $$ $lock_file \u0026hellip; 自身のプロセスIDでsymlinkを作成  自分では前者を使うことが多かったが、後者だとロック確保したプロセスを特定できるので、よりスマートだと思う。\n参考:\n シェルスクリプトでの排他処理 - Qiita シェルスクリプトで排他・共有ロック\u0026amp;セマフォ - Qiita Bashでロックを取る方法 - 超ウィザード級ハッカーのたのしみ  ","excerpt":"See Also:\n Bash \u0026gt; Cookbooks  ユーザー入力を受け付ける read を使う。\necho -n \u0026#34;Are you sure? (y/N) \u0026#34; read …","ref":"/tech-notes/a/cli/shell/script/cookbook/","title":"Cookbooks"},{"body":"5/19 basherを使ってみた 昨日見つけたbasherがclenvを置き換えられそうだったので、試してみた。\n作業環境はUbuntu 18.04.\nInstall READMEの通りにやってみる。\n$ git clone https://github.com/basherpm/basher.git ~/.basher $ export PATH=\u0026#34;$HOME/.basher/bin:$PATH\u0026#34; $ eval \u0026#34;$(basher init -)\u0026#34; basher init usage has changed, please specify the name of your shell as an argument: eval \u0026#34;$(basher init - bash)\u0026#34; # or zsh, fish, sh etc For more information, check this PR: https://github.com/basherpm/basher/pull/77 初期化コマンドが変わったらしいので、やり直す。\n$ eval \u0026#34;$(basher init - zsh)\u0026#34; $ basher Usage: basher \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] Some useful basher commands are: help Display help for a command commands List all available basher commands init Configure the shell environment for basher See \u0026#39;basher help \u0026lt;command\u0026gt;\u0026#39; for information on a specific command. $ basher commands commands completions help init install link list outdated package-path uninstall upgrade 使ってみる まずはシェルスクリプトモジュールをinstallし、includeでシェルに読み込むというのを試す。\n# 自作のgcloud-promptをインストール $ basher install progrhyme/gcloud-prompt Cloning into \u0026#39;/home/progrhyme/.basher/cellar/packages/progrhyme/gcloud-prompt\u0026#39;... : # 略 $ basher list progrhyme/gcloud-prompt $ include progrhyme/gcloud-prompt gcloud-prompt.sh $ gcloud_prompt default|my-project1,asia-northeast1 # kube-ps1をインストール $ basher install jonmosco/kube-ps1 Cloning into \u0026#39;/home/progrhyme/.basher/cellar/packages/jonmosco/kube-ps1\u0026#39;... : # 略 $ include jonmosco/kube-ps1 kube-ps1.sh $ kube_ps1 (%{%F{4}%}⎈ %{%f%}|%{%F{1}%}reagent_experiment%{%f%}:%{%F{6}%}default%{%f%}) $ kubeoff $ kube_ps1 $ 次は実行ファイルを含むリポジトリをinstallしてみる。\n$ basher install progrhyme/git-wraps $ ll ~/.basher/cellar/bin/git-* lrwxrwxrwx 1 progrhyme progrhyme 77 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-branch-clean -\u0026gt; /home/progrhyme/.basher/cellar/package s/progrhyme/git-wraps/bin/git-branch-clean lrwxrwxrwx 1 progrhyme progrhyme 70 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-pulls -\u0026gt; /home/progrhyme/.basher/cellar/packages/progr hyme/git-wraps/bin/git-pulls lrwxrwxrwx 1 progrhyme progrhyme 74 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-pulls-all -\u0026gt; /home/progrhyme/.basher/cellar/packages/p rogrhyme/git-wraps/bin/git-pulls-all lrwxrwxrwx 1 progrhyme progrhyme 72 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-skelton -\u0026gt; /home/progrhyme/.basher/cellar/packages/pro grhyme/git-wraps/bin/git-skelton lrwxrwxrwx 1 progrhyme progrhyme 83 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-submodule-all-pull -\u0026gt; /home/progrhyme/.basher/cellar/p ackages/progrhyme/git-wraps/bin/git-submodule-all-pull lrwxrwxrwx 1 progrhyme progrhyme 81 5月 19 20:55 /home/progrhyme/.basher/cellar/bin/git-submodule-delete -\u0026gt; /home/progrhyme/.basher/cellar/pac kages/progrhyme/git-wraps/bin/git-submodule-delete $ basher list jonmosco/kube-ps1 progrhyme/gcloud-prompt progrhyme/git-wraps ふつうに使えそう。\nbin/* 以下のものはsymlinkなので、例えば実行ファイルが「同じリポジトリに含まれる lib/foo.sh に依存するシェルスクリプト」だとしても問題なく動くはず。\n一応このケースも試しておく:\n$ basher install progrhyme/shove $ ~/.basher/cellar/bin/shove Run tests by /bin/zsh ------------------------- Test Summary Report ------------------- All tests successful. Files=0, Tests=0, Successes=0, Failures=0 Result: PASS 問題なし。\nパッケージリストの管理ができるかどうか Brewfileとかbundlerのようなことをやりたい。\nclenvだと、 Clamfile っていうので管理できるようにしていた。\nどうやらそれそのものの機能はないようだけど、ローカルのディレクトリをパッケージとしてインストールする link サブコマンドと、 package.sh に記した依存するパッケージを追加でインストールする、という機能によって、できなくはない、ということがわかった。\n$ mkdir test-basher-package $ cat \u0026lt;\u0026lt;EOS \u0026gt; test-basher-package/package.sh DEPS=progrhyme/shove:progrhyme/toolbox EOS $ basher link test-basher-package progrhyme/test-basher-package Package \u0026#39;progrhyme/shove\u0026#39; is already present Cloning into \u0026#39;/home/progrhyme/.basher/cellar/packages/progrhyme/toolbox\u0026#39;... : # 略 shoveはさっきインストールしたのでスキップされている。\nこのテスト用のパッケージをuninstallしても、依存パッケージは残ったまま。\n$ basher uninstall progrhyme/test-basher-package $ basher list jonmosco/kube-ps1 progrhyme/gcloud-prompt progrhyme/git-wraps progrhyme/shove progrhyme/toolbox ちなみにこの basher link で実際に起こることしては ~/.basher/cellar/packages/ にsymlinkされるだけなので、処理としては軽い。\nなので、例えば適当なディレクトリに package.sh を置いて、そこに DEPS で自分が使いたいパッケージのリストを記しておき、一時的にそのディレクトリを basher link でローカルインストールした後、削除する、ということをすれば、DEPSに記したパッケージリストをインストールできる。\n…が、わざわざそんなことをするぐらいなら、パッケージリストを配列にでも入れてforループで処理してしまえば十分だと思った。\n（追記）自分ではこんな感じで実装した。\n後で、この basher_bundle_install を実行するだけのコマンド basher-bundle-install を作った。\nUbuntu Zshでbasherに乗り換えてみた 挙動を確認できたので、clenv -\u0026gt; basherへの移行を進めようかと思って、やってみた。\n下のような形で対応できた。\n Comparing de911093ac\u0026hellip;96760448e · progrhyme/myenv  一応他の環境には影響を与えないようにやったけど、他の環境でもすぐに乗り換えてしまおうと思っている。\n追記: その後の対応  5/22 Ubuntu Bashで乗り換え  https://github.com/progrhyme/myenv/commit/f3430b33ecd261684b518224ff0eb1f42d3ad594   5/23 Mac Book Airで乗り換え  https://github.com/progrhyme/myenv/commit/2e581fcbd0142250708aeaf7152f76569b72ad7a    ","excerpt":"5/19 basherを使ってみた 昨日見つけたbasherがclenvを置き換えられそうだったので、試してみた。\n作業環境はUbuntu 18.04.\nInstall READMEの通りにやってみ …","ref":"/tech-notes/a/memo/20200519/","title":"2020-05-19"},{"body":"5/18 clenvは2つのプロジェクトに分割した方がいいかもしれない https://github.com/progrhyme/clenv\n拙作のシェル環境管理ツールだが、やりたいことと実現方法がマッチしてないかも？ OR やりたいことが曖昧かも？ という気がしてきた。\n主なユースケース:\n 実行ファイルをPATHの通ったところに置きたい シェルスクリプトモジュールを管理したい。任意のスクリプトから好きなときに呼び出して使ったり、自分のシェル環境で読み込んで使いたい  備考:\n   はシェルスクリプトだけでなく、バイナリ形式で配布されているものも取得できた方が便利。参考: https://github.com/Songmu/ghg   シェルスクリプトの中には単独で完結してなくて、リポジトリに同梱しているシェルスクリプトに依存しているものもあるので、そういうのは上手くやらないといけない。これはclenvで既に達成している（はず）    現状の（構想の）問題点:\n   をやるにしろ、2. をやるにしろ、モジュールのバージョン管理はtoo muchである   環境を分けて管理する機能も要らない。自分でも default しか使ってないし  参考:\n シェル \u0026gt; パッケージ管理  新プロジェクト構想 ①実行ファイル取って来る君\n仮称「binpack」とする。\n ghgとclamの機能を混ぜる clenvみたいに複数環境は要らなくて、最低限、実行ファイルを所定のパスに展開できればいい シェルスクリプトで書く必要なし。配布が面倒なのは嫌なので1バイナリにできて書きやすいGoかRustで、GitHubのライブラリがあるといいな  Issues:\n 実行ファイル名が衝突したらどうするか？  ②シェルスクリプトのモジュール管理\n仮称「shellter」とする。\n clenvみたいに lib/ にsymlink貼る必要なし。 modules/$module とかに展開したら、所定のルールで読み込めればいい cllibみたいに動的にロードするシェル関数もあるといい load $module とやったら、 $module で所定のパスにあるスクリプトが読めればいいだろう  既にやられていたかも RustのGitHubライブラリ探してたら、丁度作ろうとしていたものを見つけたかも？\n sheldon - crates.io: Rust Package Registry  これでいいんじゃないか？\n……うーん、実行ファイルを含むパッケージの場合、各ディレクトリごとにPATHに入れることはできるようだが、まとめて $SHLDON_ROOT/bin/ とかに入れれるかわからん。\nどっちかというと、シェルプラグイン管理に重きを置かれている印象。\n少し拡張すればできそうだけど。\n追記: COMPLETION対応 実行ファイルとセットでcompletionファイルをロードするようにしたいこともある。\nそういう場合はやっぱりclenvやbasherみたいにセットで管理できた方が便利かな。\nclenvはbasherで完全に置き換えられそう https://github.com/basherpm/basher\nライブラリのロードが include user/repo lib/file.sh みたいにして行けるので、一昨日作った gcloud-prompt だったら、 include progrhyme/gcloud-prompt gcloud-prompt.sh で行ける。簡単。\nどうもパッケージの bin/ 以下に置いたものが自動でデフォルトだと $HOME/.basher/celler/bin/ に展開されるっぽい。symlinkかもしれんが。\n","excerpt":"5/18 clenvは2つのプロジェクトに分割した方がいいかもしれない https://github.com/progrhyme/clenv\n拙作のシェル環境管理ツールだが、やりたいことと実現方法がマ …","ref":"/tech-notes/a/memo/20200518/","title":"2020-05-18"},{"body":"https://www.freedesktop.org/software/systemd/man/journalctl.html\nsystemdのログをクエリするためのCLI.\nExamples:\n# tail -f する journalctl -f # 最新のログを表示 journalctl -e # ユニット(sshd, httpd, etc.)を指定 journalctl -u ユニット名 参考:\n journalctl 最低限覚えておくコマンド - Qiita  ","excerpt":"https://www.freedesktop.org/software/systemd/man/journalctl.html\nsystemdのログをクエリするためのCLI.\nExamples:\n# …","ref":"/tech-notes/a/software/systemd/journalctl/","title":"journalctl"},{"body":"5/17 gcloud-prompt作った これ: https://github.com/progrhyme/gcloud-prompt\n作り始める前に、一応既存のがないかは調べた。 下が見つかった:\n https://github.com/antoniomo/gcloud-ps1 https://github.com/ocadaruma/zsh-gcloud-prompt  上はactiveなconfigurationを表示しているだけ。\n下は逆に、 default configuration前提で、 account, project の情報を表示している。\n自分のニーズとしては、 project や compute.region を入れたい。\nあまりconfigurationsを活用できてないけど、なるべくconfigurationsで管理していきたい気持ちはあるので、activeなconfigurationも表示したいと思った。\n…で、上のgcloud-ps1のコードを参考にしながら、とりあえずMacの.zshrcにベタに実装していたが、愚直に実装するとgcloudコマンドが遅すぎて使い物にならないことに気がついた。\nコマンド1回で0.3sぐらいかかってたので、configuration, project, compute.regionをそれぞれ取得していたら、ENTERを打つたびに1秒待つことになる。\nさすがに無理である。\nactiveなconfigurationの取得 そこで、activeなconfigurationの取得については、環境変数CLOUDSDK_ACTIVE_CONFIG_NAMEが設定されていればそちらを、そうでなければ $HOME/.config/gcloud/active_config を直接見ることにした。\nconfigパラメータの取得 …で、configパラメータの取得だが、現在の設定リストは default configurationであれば $HOME/.config/gcloud/configurations/config_default に保存されている。\nただし、INIファイル形式で、さすがにシェルスクリプトで自前でパースするのはしんどそう。\nCLIリファレンスを読み込んでいると、 gcloud config list --format=FORMAT オプションで任意のキーを所望のフォーマットで取得できることがわかった。\nこれも毎回実行していると遅いので、コマンドの実行結果をキャッシュファイルに書いて、上のファイルとのタイムスタンプを比較して、更新されていなければキャッシュファイルをcatして返すようにした。\nclenv対応 submoduleにしたくなかったので、clenv/bin/clamでinstallできるようにした。\nなにげに自作のシェルスクリプトライブラリを自分のシェル環境で常にロードして使うのは初めてだったのかも？\n自分で作ったclenvの使い方をすっかり忘れていたので、ソースを解読して使い方を把握した。\nname=gcloud-prompt version=0.5.0 libraries=\u0026quot;gcloud-prompt.sh\u0026quot; 上を clam.spec ってファイルで作っておくとclamでインストールして、 gcloud-prompt.sh をclenv/bin/cloadで読み込めるところに配置してくれる。\nシェル環境の方の対応コミットは下:\n https://github.com/progrhyme/myenv/commit/7d9b708187836fcafc03591808e17eda88dded62  clenvのライブラリをロードするコードがなかったので、追加した。\n","excerpt":"5/17 gcloud-prompt作った これ: https://github.com/progrhyme/gcloud-prompt\n作り始める前に、一応既存のがないかは調べた。 下が見つかった: …","ref":"/tech-notes/a/memo/20200517/","title":"2020-05-17"},{"body":"About macOSで人気の端末アプリ。\nターミナル.app より細かい設定が色々できるらしい。\n起動アプリ名は「iTerm.app」\nGetting Started  Downloads \u0026lt;- インストールはここから Documentation  Keyboard Shortcuts    Key Function     ⌘D 画面を左右に分割   ⌘⇧D 画面を上下に分割   ⌘] 画面分割時に次のペインに移動   ⌘[ 画面分割時に前のペインに移動   ⌥⌘E Expose All Tabs   ⌘⇧B Toolbeltの表示/非表示   ⌘; コマンド自動補完のポップアップを呼び出す   ⌘⇧; （Shell Integration）コマンド履歴を呼び出す   ⌥⌘/ 最近のディレクトリを呼び出す   ⌘F テキスト検索    参考:\n MacのターミナルアプリはiTerm2で決まり!!オススメの設定と基本的な機能まとめ – Webrandum  Configuration 参考:\n 2020-05-16#MacBookにiTerm2を入れて設定してみた  背景画像の設定 Profiles \u0026gt; Window \u0026gt; Background Image で「Enabled」にチェックを入れると、ローカルのファイルシステムにある画像を選べる。\n参考:\n iTerm2を使いこなす - おしゃれな気分でプログラミング  Usage テキスト検索モード ⌘F で入れる。\n マウス操作せず、 TAB, ⇧TAB キーで選択範囲を広げられる。 ⌥ENTER で現在選択されているテキストをペースト  Features https://iterm2.com/features.html\n Toolbelt \u0026hellip; もう1つの作業スペース。 ⌘⇧B で表示できる。 tmux Integration  シェル変数 後掲のShell Integrationを有効にしないと使えないものもあるかもしれない。\n   Name Type 意味     ITERM_PROFILE 環境変数 現在の設定プロファイル。例: Default   ITERM_SESSION_ID 環境変数     参考:\n iTerm2 のカレントのプロファイルは $ITERM_PROFILE で取得できる。 - 全力で怠けたい  Shell Integration https://www.iterm2.com/documentation-shell-integration.html\nシェルと連携して機能強化できる。\ntmuxと一緒には使えないそうだ。\n機能:\n Auto Command Completion \u0026hellip; メニューバーから View \u0026gt; Auto Command Completion で有効化できる  NOTE:\n Auto Command Completionのツールチップ表示中は、タブキーによるシェルの補完や zsh-autosuggestions による補完は効かない。 Esc キーでAuto Command Completionを解除できる  参考:\n 2020-05-16#MacBookにiTerm2を入れて設定してみた  How-to SSH接続時に背景を変更する 背景色のみを変えることもできるが、リモート接続用の設定プロファイルを（複数）用意し、接続先によって切り替えるということも可能。\n某現場では gcloud compute ssh を使うことが多いので、下のようなスクリプトを作り、 gcloud-ssh とaliasした。\n#!/usr/bin/env bash  set -eu NEW_ITERM_PROFILE=${NEW_ITERM_PROFILE:-remote} original_profile=$ITERM_PROFILE # Ctrl-C trap \u0026#34;echo -e \\\u0026#34;Interrupted. \\033]1337;SetProfile=${original_profile}\\a\\\u0026#34; exit;\u0026#34; INT # Set given profile echo -ne \u0026#34;\\033]1337;SetProfile=${NEW_ITERM_PROFILE}\\a\u0026#34; gcloud compute ssh \u0026#34;$@\u0026#34; echo -ne \u0026#34;\\033]1337;SetProfile=${original_profile}\\a\u0026#34; exit 参考:\n iTerm2でSSHログイン先別にプロファイルを自動的に切替えて事故防止する方法 | Developers.IO [macOS] SSHログインしたときだけターミナルの背景色を変えたい (iTerm2) | Developers.IO  参考記事  iTerm2のおすすめ設定〜ターミナル作業を効率化する〜 - Qiita 俺よりiTerm使いこなしてるやつおる？ - ハイパーマッスルエンジニアになりたい  ","excerpt":"About macOSで人気の端末アプリ。\nターミナル.app より細かい設定が色々できるらしい。\n起動アプリ名は「iTerm.app」\nGetting Started  Downloads …","ref":"/tech-notes/a/software/terminal/iterm2/","title":"iTerm2"},{"body":"テキストファイルの差分を取るコマンド。\nExamples:\n# ディレクトリのdiff diff -r dir1/ dir2/ # コマンドの出力結果を比較 diff \u0026lt;(command1) \u0026lt;(command2) 関連ツール  git diff \u0026hellip; See git#diff  colordiff https://www.colordiff.org/\n差分に色を付けて見やすくしてくれる。\n公式ドキュメントには見つからないが、macOSならbrewでインストールできる。\nbrew install colordiff ","excerpt":"テキストファイルの差分を取るコマンド。\nExamples:\n# ディレクトリのdiff diff -r dir1/ dir2/ # コマンドの出力結果を比較 diff \u0026lt;(command1) …","ref":"/tech-notes/a/cli/unix-cmd/diff/","title":"diff"},{"body":"About OSSのZshコンフィグレーションフレームワーク。\n ソースコード: https://github.com/ohmyzsh/ohmyzsh  Getting Started  Install \u0026hellip; ソースコードのREADME.mdの通り。 Documents: GitHub Wiki  Themes Plugins    Usage Update https://github.com/ohmyzsh/ohmyzsh#getting-updates\n2, 3週間に1回ぐらいシェル上でアップグレードのチェックが掛かるらしい。\nまたは、 upgrade_oh_my_zsh を実行すると手動アップデートが可能。\nCustom Plugins サードパーティー製のプラグイン。\n$ZSH_CUSTOM or ${oh-my-zshのインストールディレクトリ}/custom 以下に配置すればよさそう。\nzsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions\nfishみたいにhistoryから自動補完を効かせてくれるやつ。\n参考:\n 2020-05-16#zsh-autosuggestionsをインストールして設定  ","excerpt":"About OSSのZshコンフィグレーションフレームワーク。\n ソースコード: https://github.com/ohmyzsh/ohmyzsh  Getting Started …","ref":"/tech-notes/a/cli/shell/zsh/ohmyzsh/","title":"Oh My Zsh"},{"body":"5/16 zshをfishっぽくいい感じにできた 5/13にfishでちょっといいと思った機能はzshでもできそうだと気がついたので、やってみた。\n…で、やってみたらできた。\n作業環境はUbuntu 18.04.\nやったこと:\n oh-my-zshをインストール テーマを選ぶ shrink-pathを設定し、プロンプトをいい感じに調整 zsh-autosuggestionsをインストールして設定  1つずつ軽く振り返っておく。\noh-my-zshをインストール https://github.com/ohmyzsh/ohmyzsh\nREADME.mdの通りに。一応 tools/install.sh の中身はざっと見た。\nzshじゃないとデフォルトではchshされてしまうのと、インストール後に zsh -l が走ることは確認した上で、そのまま実行:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 元の ~/.zshrc は退避された上で、oh-my-zshが作った ~/.zshrc が配置されていることに気づいた。\nとりあえず自分の ~/.zshrc に戻して、oh-my-zshが作った ~/.zshrc の記述を ~/.zshenv と ~/.zshrc に追記する。\nこれだけでも PROMPT が変わって、見た目が変わったなという印象。\nただ、自分は RPROMPT に色々詰め込んでいるので、調整が必要。\nプロンプトについては次とその次のステップで調整する。\nテーマを選ぶ https://github.com/ohmyzsh/ohmyzsh/wiki/Themes から選ぶ。\nExternalなテーマもあるらしいけど、今は興味なし。\n上から見ていって、agnosterがよさげだったので、君に決めた。\nこれもデフォルトだと左PROMPTが長くて、しかもリポジトリのREADMEの通りにやろうとしても AGNOSTER_* な変数はセットされていない。\n仕方ないので、~/.oh-my-zsh/themes/agnoster.zsh-theme で定義されている build_prompt() 関数を自分の ~/.zshrc の中でオーバーライドすることにした。\nagnoster.zsh-theme を覗くと次のようになっていたので、それで行けそうだと思った。\n$ tail ~/.oh-my-zsh/themes/agnoster.zsh-theme ## Main prompt build_prompt() { RETVAL=$? prompt_status prompt_virtualenv prompt_aws prompt_context prompt_dir prompt_git prompt_bzr prompt_hg prompt_end } PROMPT=\u0026#39;%{%f%b%k%}$(build_prompt) \u0026#39; shrink-pathを設定し、プロンプトをいい感じに調整 shrink-pathは標準プラグインとしてoh-my-zshに同梱されている。\nhttps://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path\nこのパスにREADME.mdも置かれているので、読むと使い方がわかる。\n利用するには .zshrc 内で plugins+=(shrink-path) すればいい。\nそれから、 PROMPT や RPROMPT 内に '$(shrink-path -f)' と記すと、ホームディレクトリからの絶対パスで、親ディレクトリは先頭1文字に縮めて表示してくれる。\n最終的に、agnoster.zsh-themeの build_prompt() 関数を次のように書き換えた:\nbuild_prompt() { RETVAL=$? prompt_status prompt_segment blue $CURRENT_FG $(shrink_path -f) prompt_git prompt_end } これで下のような感じになった。\n  zsh-autosuggestionsをインストールして設定 https://github.com/zsh-users/zsh-autosuggestions\nINSTALL.md に従って、次のコマンドを実行:\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 残念ながら今の環境は256色に対応してないみたいで、次のように設定した:\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\u0026#34;fg=green,bold\u0026#34; 下のような感じでサジェストが出る。\n  Ctrl+e or Ctrl+f でサジェスト候補を選択できる。\n参考:\n ターミナルでコマンド履歴の入力補完 - Qiita  もうこれは完全にfishと言っていいだろう。\n…というか、自分にとってはfishをセットアップするより楽だった気がする。\n今回の変更は次の2コミットに該当する:\n dotfilesの変更: https://github.com/progrhyme/myenv/commit/b4ef98a8b1ef9ae6f0a39532590d79c8161fc161 セットアップスクリプトへの反映: https://github.com/progrhyme/myenv/commit/96a552660c9b79dcf73a1e87a8fc6664d33864f4  ※oh-my-zshが勝手に PAGER=less と LESS=-R を設定していやがったので、.zshrc内でunsetしている。\nMacBookでもoh-my-zshをセットアップ Ubuntuと同様で、特にハマることはなかった。\nセットアップコードのリファクタリングを行った。\n リファクタ: https://github.com/progrhyme/myenv/commit/dac7a0695ec3d81269d0adc6bfc9c2750753be3a macOS用の対応: https://github.com/progrhyme/myenv/commit/e35842708298c0803a2f655affc56d3c653f61af  MacBookにiTerm2を入れて設定してみた iTerm2良いよーっていうミームを受け取ったので、試しに使ってみることにした。\nSee also Software \u0026gt; ターミナル \u0026gt; iTerm2\nInstall https://iterm2.com/downloads.html から最新安定版を入手して普通にインストール。\n初期設定 とりあえず Preferences \u0026gt; Profiles で「Default」プロファイルを弄る:\n Colors \u0026hellip; デフォルトの「Dark Background」をベースに微調整 Text  フォントを「Roboto Mono for Powerline」の16ptに よくわからんが「Blinking text」にチェック 「Use built-in Powerline glyphs」にもチェックしてみた。フォントの見た目がちょっと変わった   Window  透明度を適当に設定 Settings for New Windows  幅と高さをいい感じに調整 Screen: 「Screen with Cursor」にした     Terminal \u0026hellip; Scrollback lines を「3000」にした  NOTE:\n Colors:  Cursor Colors \u0026gt; Cursor Boost が何の設定なのかわからん ディレクトリやシェルスクリプトのコメントがCyan.Brightになるのが違和感ある    また、 Preferences \u0026gt; Keys \u0026gt; Hotkey でホットキーも設定しておく。\nなんとなく ⌥ + ⌘ + ENTER にした。\n参考:\n iterm2の設定覚え書き - Qiita  Shell Integrationの導入 俺よりiTerm使いこなしてるやつおる？ - ハイパーマッスルエンジニアになりたいによれば、とりあえずShell Integrationは入れろということらしい。\nので、素直に入れてみる。\nhttps://www.iterm2.com/documentation-shell-integration.html\nのガイドに従い、次のコマンドでzsh用のスクリプトを取得:\ncurl -L https://iterm2.com/shell_integration/zsh \\ -o ~/.iterm2_shell_integration.zsh 読み込むと、プロンプトの左端に小さな矢印がついて、実行コマンドの成否がわかる。\n機能がagnosterのプロンプトと被っているので、.zshrcを次のように変更して、iTerm2のShell Integrationを有効化したら、agnosterのプロンプトを調整することにした。\n https://github.com/progrhyme/myenv/commit/232924a0cd51ab4902a3e45a6a3ff25e2d0b5bd8  そういえばこれ、iterm2_shell_integration.zsh を読み込んだ後に PROMPT を設定してるけど、ちゃんと動いてるな。不思議だ。。\nAuto Command Completionも有効にしてみた。\nこれをONにすると、zsh-autosuggestionの方はカニバって動かないようだったので、Shell Integrationが有効なときはzsh-autosuggestionを使わないようにした:\n https://github.com/progrhyme/myenv/commit/dd1b7d023fdcd9b69343e6e57a2d7280d6071003  それにしても、Shell Integrationの機能の多くは既にpecoで実現していたな。。\n（追記）Auto Command Completionはたくさん表示されると迷うし、タブ補完が効かなくなってちょっとお節介な感じなので、やっぱりzsh-autosuggestionに戻した。\n所感 慣れたら少しは生産性上がるかも。\niTerm2だとVimのdefault colorschemeの設定が変わっている なぜかわからないが、ターミナル.appと比べると :highlight の結果にだいぶ差があった。\niTerm2が256色対応だから？\n.vimrc で colorscheme elflord を設定するとややマシになった。\n参考: vimrc#colorscheme\n","excerpt":"5/16 zshをfishっぽくいい感じにできた 5/13にfishでちょっといいと思った機能はzshでもできそうだと気がついたので、やってみた。\n…で、やってみたらできた。\n作業環境はUbuntu …","ref":"/tech-notes/a/memo/20200516/","title":"2020-05-16"},{"body":"5/15 Docsy on HugoでLunr.jsによる検索の日本語対応をした 当サイトで日本語検索が上手く行かないことに気がついた。\n現在、Lunr.jsによるローカル検索を使っているが、Lunr.jsはデフォルトでは日本語に対応してないそうだ。\nそろそろGoogleカスタム検索エンジンに移行する機運か…と思いつつも、まずは日本語対応できないか少し調べてみた。\n JSの全文検索lunrをNode.jsで使う | Simple is Beautiful.  これを参考に下の対応で行けた:\n https://github.com/progrhyme/tech-notes/commit/8aad142a51747ccd9a4dbfbb6498aad5fe489905  lunr.min.js は unpkg.com でホストされてるのだけど、 lunr-languages はなさそうだった。\nなんか適当に「lunr-languages cdn」とかググってたら https://www.jsdelivr.com/ に行き着いて、CDN経由でJS取得するURLが得られた。\nインターネットって素晴らしい。\n","excerpt":"5/15 Docsy on HugoでLunr.jsによる検索の日本語対応をした 当サイトで日本語検索が上手く行かないことに気がついた。\n現在、Lunr.jsによるローカル検索を使っている …","ref":"/tech-notes/a/memo/2020/20200515/","title":"2020-05-15"},{"body":"Documentation  Build, test, and deploy with Pipelines 邦訳: Pipelines を使用したビルド、テスト、およびデプロイ  YAML アンカー Bitbucket Pipelines の FAQ   デモリポジトリ: https://bitbucket.org/bitbucketpipelines/workspace/projects/DOC  参考:\n 【初心者向け】bitbucket-pipelinesのキーワードとTips - Qiita  Features Deployments Documentation:\n Bitbucket Deployments - アトラシアン製品ドキュメント  Bitbucket Deployments のセットアップ ロールバック    NOTE:\n Deployments設定で、デプロイ先環境の管理ができる。 bitbucket-pipelines.ymlのstep設定で deployment: Production などと指定すると、そのstepのビルドがデプロイ先環境と紐付けられる。 ダッシュボードで履歴が確認できる ロールバックもGUIぽちぽちで行ける  How-to プルリクエストで実行する ドキュメント: bitbucket-pipelines.yml の設定 - アトラシアン製品ドキュメント\npull-requests というキーワードによって、PRをトリガーとするパイプライン処理を記述できる。\nExample:\npipelines:pull-requests:\u0026#39;**\u0026#39;:#this runs as default for any branch not elsewhere defined- step:script:- ...feature/*:#any branch with a feature prefix- step:script:- ...参考:\n プル リクエストを使用したデプロイ  ステップを手動実行する ドキュメント: bitbucket-pipelines.yml の設定 - アトラシアン製品ドキュメント\n trigger: manual をつける。 ※最初のステップは手動にはできない  Example:\npipelines:default:- step:script:- ./run-test.sh- step:trigger:manualscript:- ./deploy.shTips:\n パイプライン全体を手動トリガーで実行する場合、customパイプラインを使う  Dockerイメージの利用 Docker イメージをビルド環境として使用する - アトラシアン製品ドキュメント\n DockerHubでは認証情報を渡すことでプライベートイメージの利用も可能 AWSのECRやGCPのGCRも利用可能  パイプラインの変数 パイプラインでの変数 - アトラシアン製品ドキュメント\n 「secure」チェックをONにすると、パイプラインの実行ログ上でもマスクされ、表示されなくなる  $MY_SECRET のように表示される    パイプラインをトリガーせずにコミット コミットメッセージに [skip ci] または [ci skip] を含める。\nBitbucket Pipelines の FAQ - アトラシアン製品ドキュメント\nパイプラインからリポジトリを変更してプッシュする リポジトリにプッシュ バックする - アトラシアン製品ドキュメント\nExample:\npipelines:default:- step:script:- echo\u0026#34;Made a change in build ${BITBUCKET_BUILD_NUMBER}\u0026#34;\u0026gt;\u0026gt;changes.txt- gitaddchanges.txt- gitcommit-m\u0026#34;[skip ci] Updating changes.txt with latest build number.\u0026#34;- gitpushTopics Server版ではどうすればよいか？  サーバ版ではBitbucket Pipelinesの提供がない（2020-05-14時点）  Cloud版向けのツールらしい。 Pipelines in Bitbucket server - Bitbucket Development / Bitbucket Server - The Atlassian Developer Community  Bambooのインテグレーションがあるよって言ってる   [BSERV-9245] Bitbucket Pipelines for Bitbucket Server - Create and track feature requests for Atlassian products.    Bitbucketサーバ版に対応してそうなCIツール:\n CircleCI  ","excerpt":"Documentation  Build, test, and deploy with Pipelines 邦訳: Pipelines を使用したビルド、テスト、およびデプロイ  YAML アンカー …","ref":"/tech-notes/a/web-service/bitbucket/pipeline/","title":"Bitbucket Pipelines"},{"body":"5/14 kubectlのctx/nsをプロンプトに表示できるようにした とりあえず個人用のmacOSだけ。下のコミットで実現:\n https://github.com/progrhyme/myenv/commit/a9363d648db469a493de55b60178ae5a2d25ce44  どうせみんなやってるだろうと思ってググったら、案の定いっぱい出てきた。\nスパブラさんがzshのプラグイン的なものを作っていて、使いやすそうだったのでこれを使うことにした。\n https://github.com/superbrothers/zsh-kubectl-prompt  vcs_info と合わせるとごちゃごちゃしそうだったので、 precmd() の中で RPROMPT を料理するようにリファクタした。\n（追記） Ubuntuでも設定した。\nGKEのcontextとか長すぎてつらいなって思ったら、 kubectl config rename-context ってコマンドがあることを知った。\nbash対応 https://github.com/jonmosco/kube-ps1 を見つけた。zshにも対応してるので、最初からこっちでもよかったかも。\n某現場では、一旦submoduleで組み込んだ。 .bashrc に下のように追記した:\n# kube-ps1 toggle_kubectl_prompt() { if [[ -n \u0026#34;${__KUBECTL_PROMPT__:-}\u0026#34; ]]; then __KUBECTL_PROMPT__= PS1=$__base_ps1 else __KUBECTL_PROMPT__=1 PS1=\u0026#34;\\$(kube_ps1)\\n${__base_ps1}\u0026#34; fi } if [[ ! -v __no_kubectl_configured ]]; then if ! command -v kubectl \u0026amp;\u0026gt;/dev/null; then __no_kubectl_configured=1 elif ! kubectl config current-context \u0026amp;\u0026gt;/dev/null; then __no_kubectl_configured=1 fi fi if [[ ! -v __no_kubectl_configured ]]; then source $MYENV_ROOT/submodule/kube-ps1/kube-ps1.sh KUBE_PS1_PREFIX=\u0026#39;\u0026lt;\u0026#39; KUBE_PS1_SUFFIX=\u0026#39;\u0026gt;\u0026#39; __base_ps1=$PS1 if [[ ! -v __KUBECTL_PROMPT__ ]]; then echo \u0026#34;Show Kubernetes context/namespace on prompt.\u0026#34; echo \u0026#34;Exec \\\u0026#34;toggle_kubectl_prompt\\\u0026#34; to hide/unhide.\u0026#34; __KUBECTL_PROMPT__=1 PS1=\u0026#34;\\$(kube_ps1)\\n${__base_ps1}\u0026#34; fi fi メモ:\n toggle_kubectl_prompt はzsh同様、ifの中でもいいかも KUBE_PS1_(PREFIX|SUFFIX) は色変えられなかった  pecoでkubectx/ns相当の操作  Bash: https://github.com/progrhyme/dotfiles/commit/65cb850e53a7006d065185e8ad12cb09a53c6127  ","excerpt":"5/14 kubectlのctx/nsをプロンプトに表示できるようにした とりあえず個人用のmacOSだけ。下のコミットで実現: …","ref":"/tech-notes/a/memo/2020/20200514/","title":"2020-05-14"},{"body":"5/13 iTerm2はターミナル.appと比べて何が良いのか？ Software \u0026gt; ターミナル \u0026gt; iTerm2にもメモったけど、「それ全部ターミナル.app + tmuxでできるな」って思った。\n参考:\n MacのターミナルアプリはiTerm2で決まり!!オススメの設定と基本的な機能まとめ – Webrandum  …って思って、Twitterで聞いてみたら、知り合いが教えてくれた。\nTriggers (特定語句に反応して通知やハイライトが出来る)\nSmart Selection (ターミナル上でクアドラプル（4回）クリックすると\u0026quot;URLだけ\u0026quot;とか絶妙にいい感じの範囲選択をしてくれる)\nとかでしょうか！\n\u0026mdash; たいぷらいたー (@no_clock) May 13, 2020  HotkeyとかNotificationをカスタムできることろとかですかね？ターミナル.appはあまりつかってないので、もしかしたらできるかもですが......https://t.co/704RTHagLh\n\u0026mdash; blue (@blue_1617) May 13, 2020  今度、入れてみるか。\nfishでちょっといいと思った機能はzshでもできそう  プロンプトでpathを縮めるやつ: ohmyzsh/plugins/shrink-path at master · ohmyzsh/ohmyzsh historyから自動補完: zsh-users/zsh-autosuggestions: Fish-like autosuggestions for zsh  powerline fontsはzshでも使えるし、自分にとってはこっちの方向性の方がトータルとしてハッピーになれるかも。\n","excerpt":"5/13 iTerm2はターミナル.appと比べて何が良いのか？ Software \u0026gt; ターミナル \u0026gt; iTerm2にもメモったけど、「それ全部ターミナル.app + tmuxでできるな」 …","ref":"/tech-notes/a/memo/2020/20200513/","title":"2020-05-13"},{"body":"リファレンス的に各コマンドの解説を書いていく。\nユースケース別の使い方はHalyard#How-toなどを参照すること。\nGlobal Parameters    オプション 意味     --daemon-endpoint \u0026lt;ADDRESS\u0026gt; 指定があればそのdaemonに接続に行く   -d, --debug daemonの詳細なネットワークトラフィックを出力   -l, --log CLIのログレベルを設定   -h, --help ヘルプ表示    backup # バックアップ作成。tarballが出来る hal backup create config # Spinnakerのコンポーネントのリソース利用量を変更 hal config deploy component-sizing \u0026lt;component\u0026gt; [delete|edit] [parameters] # IAP認証を有効化 hal config security authn iap enable # 該当プロバイダのアカウント一覧 hal config provider $PROVIDER account list # 該当プロバイダの該当アカウントにRBACのロール設定 hal config provider $PROVIDER account edit $ACCOUNT \\  --read-permissions $ROLE1,$ROLE2,... \\  --write-permissions $ROLE1,$ROLE2,... 参考:\n https://www.spinnaker.io/setup/security/authorization/#accounts  canary Canary analysis settings. kayentaの設定らしい。\nExamples:\nhal config canary \u0026lt;integration\u0026gt; account list hal config canary \u0026lt;integration\u0026gt; account edit ACCOUNT [parameters] Integrations:\n aws, datadog, google, newrelic, prometheus, signalfx  deploy Spinnakerのデプロイメントの設定とその表示。\nSYNOPSIS:\n# 状態表示 hal config deploy hal config deploy SUBCOMMAND parameters Subcommands:\n component-sizing, edit, ha  component-sizing 各コンポーネントのリソース利用量の設定管理。\nExamples:\nhal config deploy component-sizing COMPONENT edit \\  --container-requests-cpu 100m \\  --container-requests-memory 256Mi \\  --container-limits-cpu 200m \\  --container-limits-memory 512Mi \\  --pod-requests-cpu 100m \\  --pod-requests-memory 256Mi \\  --pod-limits-cpu 200m \\  --pod-limits-memory 512Mi \\  --replicas 2 Components（一部）:\n clouddriver deck echo fiat front50 gate igor kayenta orca rosco  notification 通知設定の管理。\nSYNOPSIS:\n# 設定一覧表示 hal config notification hal config notification SUBCOMMAND parameters Subcommands:\n github-status pubsub slack twilio  slack Slack通知設定。\nSYNOPSIS:\nhal config notification slack enable hal config notification slack disable hal config notification slack edit --token $TOKEN provider 各種クラウドプロバイダなどの設定管理。\nSubcommands（一部）:\n appengine aws azure cloudfoundry dcos docker-registry ecs google kubernetes oracle  docker-registry Docker Registryの管理。GCRもこちら\nExamples:\n# 状態表示 hal config provider docker-registry # 有効化・無効化 hal config provider docker-registry enable hal config provider docker-registry disable # account管理 hal config provider docker-registry account list hal config provider docker-registry account get ACCOUNT hal config provider docker-registry account add ACCOUNT [parameters] hal config provider docker-registry account delete ACCOUNT [parameters] hal config provider docker-registry account edit ACCOUNT [parameters] ## GCRをService Account Key認証で追加 hal config provider docker-registry account add asia-gcr-io \\  --address https://asia.gcr.io --username _json_key \\  --password-file path/to/service-account-key.json \\ NOTE:\n レジストリにリポジトリを追加する場合は edit サブコマンドを使う。  例:\nhal config provider docker-registry account edit ACCOUNT --add-repository foo/bar storage Persistent storage.\nExamples:\nhal config storage \u0026lt;integration\u0026gt; edit [parameters] Integrations:\n azs, gcs, oracle, s3  deploy # Spinnakerの設定変更を適用する hal deploy apply # Spinnakerに接続する hal deploy connect # 各サービスのログを集める hal deploy collect-logs ","excerpt":"リファレンス的に各コマンドの解説を書いていく。\nユースケース別の使い方はHalyard#How-toなどを参照すること。\nGlobal Parameters …","ref":"/tech-notes/a/software/spinnaker/halyard/hal/","title":"halコマンド"},{"body":"5/12 macOSのターミナルでフォントサイズのプリセットを変更 16ptにしたいんだけど16ptがプリセットにない、と思って試行錯誤していたら、変更方法を見つけた。\n 環境設定からプロファイルを選択し、「テキスト」タブでフォント欄の「変更」を押す（ここまではわかっていた） フォント設定画面で、左上に歯車アイコンがあり、そこを押すとプルダウンメニューが出てくる。「サイズを編集」を選ぶ 新しいサイズで「16」を入力し、「+」で追加できる  macOSでもfishを少しだけ試す 5/10の続き。\nmacOSの方がハマらないんじゃないかなと思って。\nfish, fisher, テーマのインストール fishのInstallはbrewでOK.\nfish コマンドで起動してUbuntuのときと同じコマンドでfisherをインストール。\ncurl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish fisher add oh-my-fish/theme-bobthefish でテーマを入れたら、文字化けした。\npowerline fontsのインストール https://github.com/powerline/fonts\ninstall.sh がmacOSにも対応しているようだったので、 git clone してinstall.shを実行。\n…で、ターミナルのフォントをpowerline対応フォントにしたら、それっぽい見た目になった。\n…が、bobthefishのスクリーンショットと違ってあまりカラフルでない。\nfish自体のカラースキームをいじらないといけないのかな？\n","excerpt":"5/12 macOSのターミナルでフォントサイズのプリセットを変更 16ptにしたいんだけど16ptがプリセットにない、と思って試行錯誤していたら、変更方法を見つけた。\n 環境設定からプロファイルを選 …","ref":"/tech-notes/a/memo/2020/20200512/","title":"2020-05-12"},{"body":"DNSプロトコルやDNSサーバなどに関して。\nGetting Started 入門コンテンツ:\n インターネット10分講座 DNS - JPNIC  Glossary スタブとフォワード  スタブゾーン, 条件付きフォワーダ いずれも別のサーバに問合せを転送することができる。 フォワード  問合せを外部に転送 DNS キャッシュサーバを指定する 外部へ問合せするDNSキャッシュサーバをまとめられる   スタブ  その zone をホストする DNS コンテンツサーバを指定 サブドメインを委任するときとか 子ゾーンをスタブゾーンとする 親ゾーンでは子ゾーンをホストするすべての DNS サーバを認識するようにする    参考:\n スタブ ゾーンと条件付きフォワーダとの違い 実用 BIND 9で作るDNSサーバ（6）：サブドメインの運用と委任 (3/3) - ＠IT unbound.conf(5) – 日本Unboundユーザー会  レコード https://tools.ietf.org/html/rfc1035\n NS A CNAME MX TXT SOA :  参考:\n DNSレコードタイプの一覧 - Wikipedia DNSレコードの登録ルール（バリデーションルール）  TXT https://tools.ietf.org/html/rfc1464\nExample:\nexample.jp. IN TXT \u0026quot;exampleA\u0026quot; \u0026quot;exampleB\u0026quot; 仕様:\n \u0026quot; で括ってエントリを値を記述する。 \u0026quot; で括った1エントリについて  文字数は最大255文字。\u0026quot; も含めると最大257文字   エントリを複数記述できる。エントリ間に半角スペースを入れる。 TXTレコードの右辺全体に記述できる文字数は最大1,024文字  DNSSEC DNSのセキュリティを高める技術の1つで、主にキャッシュポイズニングを防げるっぽい。\n参考:\n インターネット10分講座：DNSSEC - JPNIC  ","excerpt":"DNSプロトコルやDNSサーバなどに関して。\nGetting Started 入門コンテンツ:\n インターネット10分講座 DNS - JPNIC  Glossary スタブとフォワード  スタブゾー …","ref":"/tech-notes/a/network/dns/","title":"Domain Name System"},{"body":"5/11 お名前.comからGoogle Domainsに移行する （5/17追記）ブログ書いた: お名前.comからGoogle Domainsに移行した - progrhyme\u0026rsquo;s tech blog\nメールとUXがうざいし、サイトUIがとってもわかりにくくて不便なので。\n前々からやりたかったけど、やる気がある今の内にやってしまう。\n手順は下を参考にした:\n お名前comからgoogle domainsにドメイン移管する - Qiita  URLやUIが変わっていて、全くこのままというわけではなかったが、大まかな流れは同じだった。\nGoogle Domainsは別にGCPプロジェクトなくても使えるんですね。\nTerraformでDNSレコード管理しようかと思ってたけど、やりたかったらCloud DNSに移譲しないといけないのかな？\n「トランスファー申請不承認のご連絡」 Google Domains側で手続きして約20分後に、お名前.comから上の題のメールが。\n上記ドメインのトランスファー申請につきまして、下記いずれかに該当する ため申請を不承認といたしました。 1.該当URLより不承認処理が行われた 2.Whois情報公開代行サービスの設定が行われている 3.ドメインの契約終了日まで7日以内（JPドメインのみ） 4.期限内に承認処理が行われなかった 再度申請を行う場合は、上記事項に該当しないことを確認した上で申請を 行ってください。 2.のWhois情報公開代行サービスを設定しているからですね。\n早速解除して、Google Domainsから払い戻しが来たタイミングで再度、移管申請。\n今度は大丈夫だろう。（フラグ）\n「【重要】トランスファー申請に関する確認のご連絡」 お名前.com by GMOは、上記ドメインについて に他社 レジストラへのトランスファー申請を承りました。 トランスファー手続きにつきまして、他社レジストラへ移管をご希望の場合は 期日までに以下URLから承認のお手続きをお願いいたします。 再申請から約25分後、無事フラグを回避できた。\nGoogle Domains -\u0026gt; CloudflareにNS移譲設定 お名前.comから移譲設定をしていたが、さすがにその設定は引き継がれていなかった。\nCloudflareの管理画面でDNSサーバを確認して、Google Domainsでカスタムネームサーバとして設定。\n参考:\n プロフィールサイトをGitHub Page + CloudFlareによる独自ドメイン×SSL配信に移行しました - progrhyme\u0026rsquo;s tech blog  ついでに、CloudflareでDNSSECの対応ができたので、DSレコードを生成して、Google Domains側で設定した。\nss -l オプションの誤解？ -\u0026gt; 解決 hugo server はデフォルト1313ポートで起動して待ち受け状態になるので、 ss -l | grep '\\b1313\\b' で取れるだろうと思ったら、取れなかった。\nss -ant | grep '\\b1313\\b' なら取れた。\n…と、ここまで書いて原因がわかった。\n-n が足りなかった。\n% ss -ltp |grep LISTEN | grep hugo LISTEN 0 128 127.0.0.1:xtel 0.0.0.0:* users:((\u0026#34;hugo\u0026#34;,pid=1532,fd=11)) % ss -ltnp |grep LISTEN | grep hugo LISTEN 0 128 127.0.0.1:1313 0.0.0.0:* users:((\u0026#34;hugo\u0026#34;,pid=1532,fd=11)) そういうことですね。\n","excerpt":"5/11 お名前.comからGoogle Domainsに移行する （5/17追記）ブログ書いた: お名前.comからGoogle Domainsに移行した - progrhyme\u0026rsquo;s …","ref":"/tech-notes/a/memo/2020/20200511/","title":"2020-05-11"},{"body":"5/10 TerraformのKubernetes Providerを試してみる ※ブログに移した: TerraformのKubernetes ProviderでK8sのリソース管理にトライ - progrhyme\u0026rsquo;s tech blog\nUbuntuでもanyenvを使うことにした Ubuntuで最近Ruby触ってなかったので、入っているRubyが古いことに気づいたのだけど、rbenvも git clone して入れたものなので、古い。\nplenv, pyenvも同様である。\n4/28にmacOSでanyenvを試したのだけど、Ubuntuでも使ってみることにした。\nhttps://github.com/anyenv/anyenv\n自分環境のセットアップスクリプトに setup-rbenv.sh とか入れてるけど、anyenvで管理した方が筋がよさそう。\nanyenv install Linuxbrewを入れてるので、brewでインストールできた。\n% brew install anyenv ==\u0026gt; Downloading https://linuxbrew.bintray.com/bottles/anyenv-1.1.1.x86_64_linux.bottle.tar.gz ######################################################################## 100.0% ==\u0026gt; Pouring anyenv-1.1.1.x86_64_linux.bottle.tar.gz 🍺 /home/linuxbrew/.linuxbrew/Cellar/anyenv/1.1.1: 23 files, 48.4KB % anyenv init # Load anyenv automatically by adding # the following to ~/.zshrc: eval \u0026#34;$(anyenv init -)\u0026#34; % eval \u0026#34;$(anyenv init -)\u0026#34; ANYENV_DEFINITION_ROOT(/home/quiche/.config/anyenv/anyenv-install) doesn\u0026#39;t exist. You can initialize it by: \u0026gt; anyenv install --init % anyenv install --init Manifest directory doesn\u0026#39;t exist: /home/quiche/.config/anyenv/anyenv-install Do you want to checkout ? [y/N]: y Cloning https://github.com/anyenv/anyenv-install.git master to /home/quiche/.config/anyenv/anyenv-install... Cloning into \u0026#39;/home/quiche/.config/anyenv/anyenv-install\u0026#39;... remote: Enumerating objects: 48, done. remote: Total 48 (delta 0), reused 0 (delta 0), pack-reused 48 Unpacking objects: 100% (48/48), done. Completed! ここまでやって exec $SHELL -l してもまだPATHには変化なし。\nどうも何かしら *env をインストールしないといけないらしい。\nanyenv install rbenv してからシェルに再ログインすると、PATHに $HOME/.anyenv/envs/rbenv/shims, $HOME/.anyenv/envs/rbenv/bin が追加された。\nrubyのインストールでややハマった % rbenv install 2.7.1 -v : ruby: error while loading shared libraries: libruby.so.2.7: cannot open shared object file: No such file or directory uncommon.mk:1130: recipe for target \u0026#39;revision.tmp\u0026#39; failed make: *** [revision.tmp] Error 127 BUILD FAILED (Ubuntu 18.04 using ruby-build 20200401-11-g12af1c3) 上のようなエラーで失敗した。\nどうもこれはrdocの生成でコケているようだ。\nただ、ビルドログを見たら下のようなエラーも出ていた。\n% view /tmp/ruby-build.20200510143333.6198.log : 1660 *** Following extensions are not compiled:$ 1661 dbm:$ 1662 \u0026gt;-Could not be configured. It will not be installed.$ 1663 \u0026gt;-Check ext/dbm/mkmf.log for more details.$ 1664 gdbm:$ 1665 \u0026gt;-Could not be configured. It will not be installed.$ 1666 \u0026gt;-Check ext/gdbm/mkmf.log for more details.$ 1667 *** Fix the problems, then remove these directories and try again if you want.$ : よくわからないままビルドに必要そうなパッケージをインストールしてリトライした。\nsudo apt install build-essential bison libffi-dev libgdbm-dev libgdbm-compat-dev \\ libreadline-dev libssl-dev zlib1g-dev 参考: Rubyをソースからコンパイルするときの依存ライブラリ - Qiita\n上で、いくつかのパッケージは既にインストールされていた。\nリトライした結果、結局、さっきと同じrubyのエラーで失敗した。\nビルドログから、dbm関連のエラーは消えていたので、そこは解消したらしい。\n闇雲に別のまっさらなシェルを立ち上げて再度インストールを試みたところ、成功した。\nまだ ~/.rbenv に古いrbenvが入っていて、 ruby が ~/.rbenv/shims/ruby を向いていたので、その辺が悪さをしていたのかもしれない。\nこれで駄目だったらrdocの生成をオフしようかと思っていた。\n参考:\n Ruby インストール時の rdoc エラー[Ubuntu] - ハッキングバカ  clenvでTravis CIのビルド通知とバッジを修正した https://github.com/progrhyme/clenv\n昔、リポジトリを key-amb -\u0026gt; progrhyme に移したのだけど、そのせいでバッジとSlack通知がおかしくなっていた。\nSlackのインテグレーション自体は生きていたので、 travis コマンドで設定をし直した。\ngem i travis travis encrypt \u0026#34;\u0026lt;Slack Workspace\u0026gt;:\u0026lt;Slack Integration Token\u0026gt;\u0026#34; --add notifications.slack.rooms これで .travis.yml が更新されたので、GitHubにpushして完了。\nバッジも新しいURLで取得した。\n参考:\n https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications  次世代のシェルとは https://ngs-lang.org/\n4年前にもブクマしてたやつ。\nこれC言語製だったか。\n今さっきググったらGolang製のフォーマッタ/パーサ/インタープリタを見つけた。\nhttps://github.com/mvdan/sh\nなんか、そのうち全部JavaScriptになるんじゃないかな、って気もするんだよなぁ。\nmacOSはJavaScriptでOSと対話できるようになったし、GNOME ShellもJavaScriptで拡張できるらしいし。\nまあ、よくできたプログラム言語がごろごろある現状、敢えて0から再実装する必要ないよねってことか。\nそんなわけでclenvを再開するモチベーションが湧かない今日この頃。\nNode.jsが筆頭だけど、JavaScriptで実装されたシェルも色々あるみたい。\n※ただ、OSのシェルとはどれもちょっと違うかも。\nPOSIXはもう気にしなくてもいいだろうと思うものの、どの環境でもスッと動いてほしいとは思う。\nそういえばfishってどうだっけと思って、改めてチラ見してシェルにメモした。\nこれはC++製なんですね。\n参考:\n 知らないうちにMacがシステム標準でJavaScriptで操作できるようになってた (JXA) - Qiita 第492回 GNOME Shellの拡張機能を作ってみよう：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社 JavaScript シェル - JavaScript リダイレクト 1 | MDN  Ubuntuでfishを少しだけ試してみた Install:\nhttps://launchpad.net/~fish-shell/+archive/ubuntu/release-3 の通り:\nsudo apt-add-repository ppa:fish-shell/release-3 sudo apt-get update sudo apt-get install fish fish で起動する。\n体感そんな悪くない。\nbashで書いたスクリプトはシバン書いてるから実行したら普通に動くし、特に戸惑うことはない感じ。\n少しカスタマイズしたら十分使いやすくなりそう。\nfisherを試す テーマを使ってみたかったので、fisherを入れてテーマを入れてみる。\nhttps://github.com/jorgebucaran/fisher\nREADMEに従ってインストール\ncurl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish 色々ハマったんだけど、最終的に次の要領で、まあまあいい感じになった:\npowerlineのインストール sudo apt install powerline 参考:\n fish powerline on ubuntu the easy way  ※↑に書かれている ~/.config/fish/config.fish の設定をすると、fishでpowerlineは使えるが、他のテーマを入れるとおかしくなる。（カニバってしまう？）\npowerlineを使うには対応したフォントが必要らしい。これに中々気づかなかった。\n 【連載】にわか管理者のためのLinux運用入門 [210] Powerlineでカッコよく - シェル編（bash、zsh、fish）｜サーバ/ストレージ｜IT製品の事例・解説記事  https://github.com/microsoft/cascadia-code/releases から、最新版を ~/.fonts にインストールした。\n参考: フォントのインストール | Ubuntu初心者の集いブログ\nテーマの追加 この後、fishを起動し、 fisher add oh-my-fish/theme-bobthefish で、まあまあいい感じになった。\nただ、プロンプトの左端が I となっていて、これはスクリーンショットによると本来は矢印記号が出るはずなんじゃないかと思う。\ntheme-bobthefish のガイドに従って、 https://github.com/ryanoasis/nerd-fonts/releases も入れてみたけど、特に変わらない。\n上手く行かなかったこと 上まで辿りついたが、 theme-budspencer だと上手く行かなかった。\nプロンプトでENTERだけを押しても改行されない感じになってしまう。\n参考  【Ubuntu】 shellをfish + fisherman に変えた話 - 0.5から始める機械学習 【2019年版】macのターミナルにFishとFishermanを導入する - Qiita  GASでWebアプリ作るテスト Google Apps ScriptでWebアプリケーションをつくる - Qiitaを写経。 ステップ5の「データをGoogleスプレッドシートに保存」はまだできていない。\nJS, CSSを分割したところから上手く行かなくなった。 原因は以下の2つ:\n Qiita上ではJS, CSSのコードが省略されている。GitHubの完全版からコピる必要があった。 コード.gsの doGet() 関数を下に従って変更する必要があった:  GASでWebページを作るときにHTMLとCSSを別ファイルに記述する方法    ","excerpt":"5/10 TerraformのKubernetes Providerを試してみる ※ブログに移した: TerraformのKubernetes ProviderでK8sのリソース管理にトライ - …","ref":"/tech-notes/a/memo/2020/20200510/","title":"2020-05-10"},{"body":"5/9 シェルスクリプトのドキュメントコメントをPODで書くのはもうやめていいかな いつだったか、何かの本でそういう書き方を見てからずっとそうやってる。\n例:\n#!/usr/bin/env bash  : exit 0 : \u0026lt;\u0026lt;\u0026#39;__EOF__\u0026#39; =encoding utf8 =head1 NAME B\u0026lt;my-script\u0026gt; - short description =head1 DESCRIPTION : =cut __EOF__ これでPODに食わせるとドキュメントとして解釈してくれるので、スクリプト内では pod2text $0 とかでヘルプを表示できる。\n…が、そろそろ pod2text がどの環境にも入っていると想定すべきでないかも…という気がしてきた。\nところが、じゃあどう書いたらいいの？っていうのには決定版がない気がする。\nシェルスクリプトにちゃんとコメントを書こうとしている人たちの間では、主に2つの派閥がある気がする:\n スクリプトのヘッダや関数のヘッダとしてドキュメントコメントをそれなりのフォーマットで書きましょう派。Googleのコーディング規約もこれ usage() 関数内にヒアドキュメントで書きましょう派  いいとこ取りをしてる感じに見えるのは、 usage() 関数でコメントをパースしてヘルプっぽく出力してるもの。\n下のような例があった:\n シェルスクリプトでヘルプメッセージをコメントに書いて表示する - Qiita 自作シェルスクリプトにヘルプやらバージョンメッセージを実装？する面白い方法があった - Qiita  自分で独自フォーマットのコメントを書いている、という点では、下もこの類型にあたるか:\n シェルスクリプト群のドキュメント書くの面倒だから自動でREADME.mdを生成する - Qiita https://github.com/jmcantrell/bashful/blob/master/bin/shdoc  godocみたいなのないかな、と思って「shelldoc」とか「shdoc」とかでぐぐるとたくさん出てくる。\n参考:\n シェルスクリプト Tips | UNIX \u0026amp; Linux コマンド・シェルスクリプト リファレンス  Microk8sを使ってみる ※ブログに移した: UbuntuでKubernetesのテスト環境としてMicrok8sをセットアップした - progrhyme\u0026rsquo;s tech blog\n","excerpt":"5/9 シェルスクリプトのドキュメントコメントをPODで書くのはもうやめていいかな いつだったか、何かの本でそういう書き方を見てからずっとそうやってる。\n例:\n#!/usr/bin/env bash …","ref":"/tech-notes/a/memo/2020/20200509/","title":"2020-05-09"},{"body":"Features  SSO Overview - Argo CD - Declarative GitOps CD for Kubernetes  dexを使ってOpen ID対応できる   Automated Sync Policy - Argo CD - Declarative GitOps CD for Kubernetes  Automatic Pruning  デフォルトではリソースの削除はやらないが、このオプションをONにすると、削除同期もやってくれる      Demo https://cd.apps.argoproj.io/applications\n","excerpt":"Features  SSO Overview - Argo CD - Declarative GitOps CD for Kubernetes  dexを使ってOpen ID …","ref":"/tech-notes/a/software/argo/cd/","title":"Argo CD"},{"body":"5/8 terraformerをGCPで使ってみた GCPでdefault networkをimportしたいと思った。\nふつうに terraform import を使えばいいのだが、terraformerのことを思い出したので、使ってみることにした。\nterraformerを使えばHCLファイルを生成することができる。\nterraformerについての一般的な内容はterraformerにメモしている。\n作業環境: macOS\nInstall:\nbrew install terraformer 準備として、 ~/.terraform.d/plugins/darwin_amd64/ に terraform-provider-google_v3.20.0_x5 を置く。\n今回はterraform実行ディレクトリの .terraform/plugins からコピーした。\nterraformer import google --projects=my-project \\  --regions=asia-northeast1 --resources=networks,subnetworks 結果:\n% tree generated generated └── google └── my-project ├── networks │ └── asia-northeast1 │ ├── compute_network.tf │ ├── outputs.tf │ ├── provider.tf │ └── terraform.tfstate └── subnetworks └── asia-northeast1 ├── compute_subnetwork.tf ├── outputs.tf ├── provider.tf ├── terraform.tfstate └── variables.tf 6 directories, 9 files tfファイルのサンプル:\n% cat generated/google/my-project/networks/asia-northeast1/compute_network.tf resource \u0026#34;google_compute_network\u0026#34; \u0026#34;tfer--default\u0026#34; { auto_create_subnetworks = \u0026#34;true\u0026#34; delete_default_routes_on_create = \u0026#34;false\u0026#34; description = \u0026#34;Default network for the project\u0026#34; name = \u0026#34;default\u0026#34; project = \u0026#34;my-project\u0026#34; routing_mode = \u0026#34;REGIONAL\u0026#34; } tfstateのサンプル:\n% cat generated/google/my-project/subnetworks/asia-northeast1/terraform.tfstate { \u0026#34;version\u0026#34;: 3, \u0026#34;terraform_version\u0026#34;: \u0026#34;0.12.18\u0026#34;, \u0026#34;serial\u0026#34;: 1, \u0026#34;lineage\u0026#34;: \u0026#34;XXXXXXXXXXXX\u0026#34;, \u0026#34;modules\u0026#34;: [ { \u0026#34;path\u0026#34;: [ \u0026#34;root\u0026#34; ], \u0026#34;outputs\u0026#34;: { \u0026#34;google_compute_subnetwork_tfer--default_self_link\u0026#34;: { \u0026#34;sensitive\u0026#34;: false, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;https://www.googleapis.com/compute/v1/projects/my-project/regions/asia-northeast1/subnetworks/default\u0026#34; } }, \u0026#34;resources\u0026#34;: { \u0026#34;google_compute_subnetwork.tfer--default\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;google_compute_subnetwork\u0026#34;, \u0026#34;depends_on\u0026#34;: [], \u0026#34;primary\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;creation_timestamp\u0026#34;: \u0026#34;2020-05-07T02:07:01.455-07:00\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;gateway_address\u0026#34;: \u0026#34;10.146.0.1\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;ip_cidr_range\u0026#34;: \u0026#34;10.146.0.0/20\u0026#34;, \u0026#34;log_config.#\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;default\u0026#34;, : terraform_version がマシンにインストール済みのバージョンと違うのは、terraformerが同梱しているってことなのかな？\nKubernetesのマニフェストをVCSで管理して、削除まで正しく同期する方法 ※5/9 ブログを書いた: Kubernetesのマニフェストをリポジトリ管理しつつ、リソースの削除も反映したい件 - progrhyme\u0026rsquo;s tech blog\n某所で聞いたりして情報を集めた。\nこのエントリは後掲の関連リンクの続きである。\n 管理対象のリソースに label でバージョン番号を振り、新しいバージョンのリソースを配置した後、古いバージョンのリソースを削除する kubectl apply 時に --prune オプションを付ける Argo CDのAutomatic Pruning機能を使う リソースをTerraformで管理する  関連:\n 2020-05-05のメモ - Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った  ","excerpt":"5/8 terraformerをGCPで使ってみた GCPでdefault networkをimportしたいと思った。\nふつうに terraform import を使えばいいのだ …","ref":"/tech-notes/a/memo/2020/20200508/","title":"2020-05-08"},{"body":"5/6 GitHubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ なんかないかなと思ったけど、Songmu/ghg以上のものは見つからないな。\nhubコマンドあたりで実装されてたりはしなかった。\nhttps://hub.github.com/hub.1.html\nghgでmdBookを入れようと思ったが失敗した % env GHG_HOME=$HOME ghg get rust-lang/mdBook fetch the GitHub release for rust-lang/mdBook no assets available 悲しい。\n結局wget -\u0026gt; tar xvfで入れました。\n","excerpt":"5/6 GitHubのreleasesから実行ファイルを取ってきていい感じに管理できるやつ なんかないかなと思ったけど、Songmu/ghg以上のものは見つからないな。\nhubコマンドあたりで実装され …","ref":"/tech-notes/a/memo/2020/20200506/","title":"2020-05-06"},{"body":"5/5 Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った exportのやり方は調べてkubectlのページ#全てのマニフェストを取得したいに書いた。\n…というか、exportしてないと不安である。\nkustomizeで管理していても、野良のリソースがないことを保証できない。\n素のマニフェスト管理でも同様。\nkubectl apply は、ふつうは削除同期をやってくれないので。\n（※…と思って、リファレンスを読み返していたら、 --prune というオプションがα機能であるようだ。これについては、kubectl#applyに書いた）\n定期的にdumpして差分がないかチェックした方がいいんじゃないかな。\n特に、本番とstaging環境は。\n逆に、export -\u0026gt; applyの運用にしていれば、staging環境の差分をそのまま本番に適用する運用が可能ではないだろうか。\nこのやり方なら、仰々しいK8s対応のCI/CDツールなど使わなくても、kubectlとGitOpsだけで行けるかもしれない。\nまだ試してないので、実際にやってみたら色々と課題も出てくるだろうけど。\nNeoBundleからdein.vimに乗り換えた ※5/6 ブログ書いた: 今更だけどNeoBundleからdein.vimに乗り換えて、プラグインを6つ追加した - progrhyme\u0026rsquo;s tech blog\n今更かよって感じだけど乗り換えた。\nNeoBundleは2年ぐらい前に更新が止まっていた。\n作業マシンはUbuntu 18.04\nSee also Vim#deinvim\nインストール https://github.com/Shougo/dein.vim#quick-start に従う。\nインストール先は ~/.vim/dein とした。\ncurl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh \u0026gt; installer.sh sh ./installer.sh ~/.vim/dein 実際はこんな感じで、スクリプトで対応した。\nvimrcの移行 このコミットで対応した。\nとりあえず使ってるのは全部移行しようかと思ったけど、次の行のプラグインについてはどう移行すればいいのかぱっとわからず、悩んだ:\nNeoBundleLazy \u0026#39;mopp/layoutplugin.vim\u0026#39;, { \u0026#39;autoload\u0026#39; : { \u0026#39;commands\u0026#39; : \u0026#39;LayoutPlugin\u0026#39;} }そもそもこのプラグインはvim-pluginの雛形作成ツールで、今のところ使う予定がないので、消すことにした。\nあと、TOMLに対応したプラグインがなかったので、 'cespare/vim-toml' を入れた。\n以上。\nなんか、vim起動後にENTERが必要だったり、終了後に画面がクリアされなかったりする（NeoBundleの頃はそんなことはなかった）が、概ね問題なさそう。\n（追記）引き続き確認したところ、 'Align' プラグインで警告が出ていることに気がついた。 'vim-scripts/Align' に修正したら上の問題はなくなった。\n 修正コミット  ","excerpt":"5/5 Kubernetesのマニフェストは全部exportして管理した方がいいんじゃね？って思った exportのやり方は調べてkubectlのページ#全てのマニフェストを取得したいに書いた。\n…と …","ref":"/tech-notes/a/memo/2020/20200505/","title":"2020-05-05"},{"body":"5/4 git pull \u0026ndash;pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った 何番煎じだよって感じだけど、いい加減面倒になったので作った。\nコード: git-wraps/bin/git-branch-clean\ngitのaliasにも設定したかったので、オプションにも対応させた。\n% git bc -h NAME git-branch-clean - git subcommand to clean up merged local branches SYNOPSYS git branch-clean [OPTIONS] DESCRIPTION This is a git subcommand to clean up merged local branches. Branches \u0026#34;master\u0026#34; and \u0026#34;develop\u0026#34; are whitelisted by default. You can change the whitelist by \u0026#34;-a|--allow BRANCH\u0026#34; option. Current branch is always whitelisted. OPTIONS -i Interactive mode. Show prompt before deleting branch. -a|--allow BRANCH Add argument as branch name to whitelist which won\u0026#39;t be deleted. This option can be specified multiple times. Ex) # Whitelist = (develop, master, CURRENT) git branch-clean # Whitelist = (foo, CURRENT) git branch-clean -a foo # Whitelist = (test, master, CURRENT) git branch-clean -a test -a master -p|--pull Execute \u0026#34;git pull --prune\u0026#34; before deleting branches. -v|--verbose Verbose output. -h|--help Show help text. このスクリプトをPATHが通っている場所に置く。\n.gitconfigのaliasはこんな感じ:\n[alias] plr = pull --prune bc = branch-clean --pull bcp = branch-clean --pull git branch-clean か git plr か git bcp か、利用頻度によってaliasを調整するかもしれない。（※追記あり）\n参考:\n gitでbranchをお掃除する際のチートシート - Qiita リモートで消されたブランチが手元で残ってしまう件を解消する - Qiita  5/9 追記 git-branch-sweep -\u0026gt; git-branch-clean にリネームして、上を書き換えた。\nエイリアスは3つ登録した。\nUbuntuでkubectxをlinuxbrewで入れた https://github.com/ahmetb/kubectx\nREADMEには明記されてはいないのだけど、 brew install kubectx でふつうにインストールできて使えた。\nまあ、シェルスクリプトだしな。\nmemo/ ページの階層を増やしたらHogoのサイト内ページ参照が壊れた 下の変更による:\n [memo] Move some memos under 2020/ · progrhyme/tech-notes@325430d  例えば、20200502.md内のリンクを20200501へのリンクを {{\\\u0026lt; ref \u0026quot;/a/memo/20200501.md\u0026quot; \\\u0026gt;}} に戻すと、次のエラーが出る:\n% hugo -v --path-warnings INFO 2020/05/05 06:53:45 Using config file: Building sites … INFO 2020/05/05 06:53:45 syncing static files to /home/progrhyme/my/repos/tech-notes/public/ INFO 2020/05/05 06:53:45 postcss: use config file /home/progrhyme/my/repos/tech-notes/themes/docsy/postcss.config.js ERROR 2020/05/05 06:53:47 [ja] REF_NOT_FOUND: Ref \u0026#34;/a/memo/20200501.md\u0026#34;: \u0026#34;/home/progrhyme/my/repos/tech-notes/content/ja/a/memo/20200502.md:16:34\u0026#34;: page not found Total in 2470 ms Error: Error building site: logged 1 error(s) ","excerpt":"5/4 git pull \u0026ndash;pruneしてマージ済みローカルブランチを掃除するgitのサブコマンドを作った 何番煎じだよって感じだけど、いい加減面倒になったので作った。\nコード: …","ref":"/tech-notes/a/memo/2020/20200504/","title":"2020-05-04"},{"body":"5/3 GitHub Actionsには今ビルドを手動トリガーするネイティブ機能はない（が、同等のことはできる） Bitbucket Pipelinesの trigger: manual みたいな機能がリファレンス見てもなさそうだなと思ってググってみたら、なさそうだとわかった。\nフィーチャーリクエストが出ている:\n GitHub Actions Manual Trigger / Approvals - GitHub Community Forum  擬似的に同等のことはできる。以下、参考:\n GitHub Actions で手動トリガーのワークフローを作る - Qiita docker - Manual workflow triggers in Github Actions - Stack Overflow  on.watch.types: [stared] でstarをフックにしている例が面白いw    GitHub Actionsを使ってTerraformでGCP構成をCI/CDする Qiitaに投稿した。\n GitHub ActionsでGCPにTerraformでインフラCI/CDする - Qiita  参考:\n Github Actions で GCPに向けてTerraform を実行する - Qiita  GitにGPGで署名してGitHubに署名キーを登録してみた そんな設定があったけど、面倒なだけで特に意味はないのではないかと思っていたのでやってなかった。\nまあ、でもなりすましを防ぐ意味では有意義か。\n作業環境はUbuntu 18.04 LTS.\nGitHubのドキュメント:\n コミット署名の検証を管理する - GitHub ヘルプ  既存の GPG キーの確認 - GitHub ヘルプ 新しい GPG キーを生成する - GitHub ヘルプ GitHub アカウントへの新しい GPG キーの追加 - GitHub ヘルプ Git へ署名キーを伝える - GitHub ヘルプ コミットに署名する - GitHub ヘルプ    既存の GPG キーの確認を次のコマンドで:\n% gpg --list-secret-keys --keyid-format LONG 何もなかったので、新しい GPG キーを生成する。\n% gpg --version gpg (GnuPG) 2.2.4 : % gpg --full-generate-key % gpg --list-secret-keys --keyid-format LONG % gpg --armor --export XXXXXXXXXXXXXX Git へ署名キーを伝える\n% git config --global user.signingkey XXXXXXXXXXXXXX 以降、 git commit に -S オプションをつけると、コミットに署名がなされる。\nパスワードが要求されるが、パスワードマネージャーに保存しておくと以降、聞かれないで済む。\n常に署名したい場合、次のコマンドを実行:\n% git config --global commit.gpgsign true パスワードをランダムで生成してしまったので、すぐに打てなくて困った。\nパスワードを変更するには、次のコマンドで:\ngpg --edit-key XXXXXXXXXXXXXX passwd 一応 $HOME/.gnupg をバックアップしておいた。\n参考:\n GitHubにgpg署名付きのコミットをする - Qiita GPGで自分用の秘密鍵を1つに統一する · JoeMPhilips  ","excerpt":"5/3 GitHub Actionsには今ビルドを手動トリガーするネイティブ機能はない（が、同等のことはできる） Bitbucket Pipelinesの trigger: manual みたいな機能 …","ref":"/tech-notes/a/memo/2020/20200503/","title":"2020-05-03"},{"body":"5/2 Bitbucket PipelinesでGCPに対してTerraformを適用するには ※Qiitaに移しました:\n Bitbucket PipelinesでGCPに対してTerraformでインフラCI/CDする - Qiita  参考:\n 2020-05-01に調べたログ Bitbucketについてのメモ  （5/3追記）\n下の記事を見て、 GOOGLE_CREDENTIALS はパス名じゃなくてサービスアカウントキーのJSONままでも行けると気づいた。\n Github Actions で GCPに向けてTerraform を実行する - Qiita  YAMLで配列のマージはできなさそう ハッシュのマージはアンカーとエイリアスでできるのだけど、配列のマージはできなさそう。\n参考: list - How to merge YAML arrays? - Stack Overflow\n配列の1つ1つの要素にアンカーを付けて、再利用することは可能。\n- \u0026amp;markfoo- bar- *mark- *mark#=\u0026gt; [\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;foo\u0026#39;, \u0026#39;foo\u0026#39;]参考: プログラマーのための YAML 入門 (初級編)\nDangerはBitbucketにどのように対応しているか tfnotifyをBitbucketに対応させたいなーと思いながら、参考にできるかなと思って見ていた。\nCIサーバからBitbucketのREST APIを叩いているようだ。\n参考:\n Bitbucket Server by HeEAaD · Pull Request #481 · danger/danger Danger + BitBucket Cloud  ","excerpt":"5/2 Bitbucket PipelinesでGCPに対してTerraformを適用するには ※Qiitaに移しました:\n Bitbucket PipelinesでGCPに対してTerraformで …","ref":"/tech-notes/a/memo/2020/20200502/","title":"2020-05-02"},{"body":"5/1 CIでGCPに対してTerraformするには サービスアカウントのキーをJSONで作って、 GOOGLE_CREDENTIALS or GOOGLE_BACKEND_CREDENTIALS 環境変数に渡せば良さそう。 （事例によって異なる環境変数を使っていることがある。）\nhttps://www.terraform.io/docs/backends/types/gcs.html\n（追記） terraform plan のときにはApplication Credentialsが必要になる。\nGCS backend認証も上記の環境変数がない場合は、Application Credentialsにフォールバックするので、環境変数 GOOGLE_APPLICATION_CREDENTIALS にキーファイルのパスを設定するのがよい。\n事例:\n TerraformによるGCP環境の管理 Managing Google Cloud projects with Terraform Terraformツールを使ってGCPリソース管理 | DevSamurai  以前に調べたログ:\n 2020-04-27  tmuxのstatus lineの色設定をいい感じにした 2ヶ月ちょっと前に .tmux.conf をv2.9+対応にしたのだけど、status lineの色設定がなんかイマイチになってたので調整した。\nhttps://github.com/progrhyme/dotfiles/commit/7983437087fdf64aa652f44d922f90a69622353d\nだいぶややこしい設定になっていて、どこを変えればいいかよくわからなくなっていたのと、tmuxプロセスを全て終了しないと再読込みされないっぽかったので更に混乱した。\ntmuxプロセスA内でconfを編集しながら、tmuxプロセスBを起動して見た目を確認していたが、それだとtmuxプロセスAの設定が引き継がれるような挙動だった。\n参考にしたページ:\n tmux の status line の設定方法 - Qiita dotfiles/.tmux.conf at master · tokuhy/dotfiles  TerraformでGCPのService Account Keyを作成 Qiitaにこういうエントリを上げた:\n TerraformでGCPのService Account Keyを作成し、ローカルにファイルとして保存する - Qiita  何度か実行して確かめたところ、次のことがわかった。\n Service Account Keyの内容はtfstateに保存される よって、local_fileに書き出すコードは後で足してもいいし、一度消しても復元できる  ","excerpt":"5/1 CIでGCPに対してTerraformするには サービスアカウントのキーをJSONで作って、 GOOGLE_CREDENTIALS or GOOGLE_BACKEND_CREDENTIALS  …","ref":"/tech-notes/a/memo/2020/20200501/","title":"2020-05-01"},{"body":"4/30 UbuntuでHomebrewで入れたtfenvだとtfenv installに失敗する unzipで失敗する。\nデバッグしたところ、Homebrewの依存でインストールされたunzipが使われてしまうからのようだ。\ntfenvの libexec/helpers 内に which unzip を仕込んで確かめた。\nログ:\n% TFENV_DEBUG=true tfenv install 0.12.24 + [tfenv:22] '[' -z '' ']' ++++ [tfenv:23] readlink_f /home/linuxbrew/.linuxbrew/bin/tfenv : （中略） : + [tfenv-install:180] mkdir -p /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/versions/0.12.24 + [tfenv-install:181] unzip tfenv_download.DtVL3N/terraform_0.12.24_linux_amd64.zip -d /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/version s/0.12.24 UnZip 6.00 of 20 April 2009, by Debian. Original by Info-ZIP. Usage: unzip [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir] Default action is to extract files in list, except those in xlist, to exdir; file[.zip] may be a wildcard. -Z =\u0026gt; ZipInfo mode (\u0026quot;unzip -Z\u0026quot; for usage). -p extract files to pipe, no messages -l list files (short format) -f freshen existing files, create none -t test compressed archive data -u update files, create if necessary -z display archive comment only -v list verbosely/show version info -T timestamp archive to latest -x exclude files that follow (in xlist) -d extract files into exdir modifiers: -n never overwrite existing files -q quiet mode (-qq =\u0026gt; quieter) -o overwrite files WITHOUT prompting -a auto-convert any text files -j junk paths (do not make directories) -aa treat ALL files as text -C match filenames case-insensitively -L make (some) names lowercase -X restore UID/GID info -V retain VMS version numbers -K keep setuid/setgid/tacky permissions -M pipe through \u0026quot;more\u0026quot; pager See \u0026quot;unzip -hh\u0026quot; or unzip.txt for more help. Examples: unzip data1 -x joe =\u0026gt; extract all files except joe from zipfile data1.zip unzip -p foo | more =\u0026gt; send contents of foo.zip via pipe into program more unzip -fo foo ReadMe =\u0026gt; quietly replace existing ReadMe if archive file newer + [tfenv-install:181] error_and_die 'Tarball unzip failed' ++ [helpers:4] basename /home/linuxbrew/.linuxbrew/Cellar/tfenv/1.0.2/libexec/tfenv-install + [helpers:4] echo -e 'tfenv: tfenv-install: \\033[0;31m[ERROR] Tarball unzip failed\\033[0;39m' tfenv: tfenv-install: [ERROR] Tarball unzip failed + [helpers:5] which unzip /home/linuxbrew/.linuxbrew/bin/unzip + [helpers:6] exit 1 + [helpers:1] rm -rf tfenv_download.DtVL3N  brew uninstall unzip --ignore-dependencies した後、 tfenv install 0.12.24 したら成功した。 /home/linuxbrew/.linuxbrew/bin/unzip some.zip -d somedir は同じエラーで失敗する。 /usr/bin/unzip some.zip -d somedir は成功する。  単独でunzipコマンドを実行しても失敗しているので、Linuxbrewのunzipが壊れてるんだと思う。\n5/9 追記 これ、GCEにDebian 10とUbuntu 18.04とCent OS 8のVMを立てて追試したところ、全部linuxbrewのunzipが正常に動いた。\nなぜだ。。\n","excerpt":"4/30 UbuntuでHomebrewで入れたtfenvだとtfenv installに失敗する unzipで失敗する。\nデバッグしたところ、Homebrewの依存でインストールされたunzipが使 …","ref":"/tech-notes/a/memo/2020/20200430/","title":"2020-04-30"},{"body":" 公式リファレンス: https://docs.docker.com/engine/reference/builder/ 邦訳: Dockerfile リファレンス — Docker-docs-ja ドキュメント  ベストプラクティス  https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/  邦訳: http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html    参考:\n Introduce that Best practices for writing Dockerfiles \u0026hellip; 2018年12月Japan Container Daysでのモリハヤさんの発表 効率的に安全な Dockerfile を作るには - Qiita  ADDとCOPY http://docs.docker.jp/engine/userguide/eng-image/dockerfile_best-practice.html#add-copy\n COPY で間に合うときは COPY を使うべき ADD は圧縮ファイルの展開などの機能もある  Syntax 環境変数の利用 http://docs.docker.jp/engine/reference/builder.html#environment-replacement\n 全てではないが、一部の命令で環境変数の利用がサポートされている。 ENV 命令で環境変数をセットすることもできる。 コンテナ実行時に環境変数をセットする際は docker run に -e KEY=${VALUE} の形で渡す。  これらを CMD や ENTRYPOINT で解釈する際は、exec形式(= [\u0026quot;実行コマンド\u0026quot;, \u0026quot;引数\u0026quot;...]の形式)では展開されないため、シェル形式(= 実行コマンド 引数...)で記す必要がある。 または、ラッパースクリプトを指定するという手もアリだろう。    Instructions CMD コンテナのデフォルトの実行コマンド、またはその引数を指定する。\nCMD [\u0026#34;実行ファイル\u0026#34;, \u0026#34;ARG1\u0026#34;, \u0026#34;ARG2\u0026#34;, ...] # exec実行形式CMD [\u0026#34;ARG1\u0026#34;, \u0026#34;ARG2\u0026#34;, ...] # ENTRYPOINTのデフォルト引数CMD \u0026lt;コマンド...\u0026gt; # シェル形式 ２番目は ENTRYPOINT を指定した時、その引数となる。  docker run \u0026lt;コンテナ\u0026gt; 引数... として上書きできる   1, 3番目の形式は ENTRYPOINT と一緒には指定できない（はず…）  シェル形式の場合、 /bin/sh -c で起動されるようだ    ENTRYPOINT コンテナのデフォルトの実行コマンドを指定する。\nENTRYPOINT [\u0026#34;実行ファイル\u0026#34;, \u0026#34;ARG1\u0026#34;, \u0026#34;ARG2\u0026#34;, ...] # exec形式ENTRYPOINT 実行ファイル ARG1 ARG2 ... # シェル形式 上書きするには --entrypoint \u0026lt;コマンド...\u0026gt; とする。 シェル形式の場合、 /bin/sh -c で起動されるようだ CMD でデフォルト引数を与えると、 ENTRYPOINT として指定した「コマンド + 引数」の後に CMD として与えた引数がくっつく。  FROMubuntuENTRYPOINT [\u0026#34;top\u0026#34;, \u0026#34;-b\u0026#34;]CMD [\u0026#34;-c\u0026#34;]このコンテナを docker run で動かすと、 top -b -c が実行される（はず）。\nVOLUME docker run の -v オプションに相当。\nホストのディレクトリをコンテナにマウントする。\n参考:\n DockerのVolume機能について実験してみたことをまとめます - Qiita  Tips CMDとENTRYPOINTがどう作用するか http://docs.docker.jp/engine/reference/builder.html#cmd-entrypoint\n","excerpt":"公式リファレンス: https://docs.docker.com/engine/reference/builder/ 邦訳: Dockerfile リファレンス — Docker-docs-ja ド …","ref":"/tech-notes/a/software/docker/dockerfile/","title":"Dockerfile"},{"body":"リファレンス: https://docs.docker.com/engine/reference/commandline/cli/\nv17.0.3でのコマンド体系再編について 2017年1月にリリースされたv1.13（v17.0.3）でコマンド体系が再編された。\n古いコマンドも2020年4月現在では、まだ使えるものが多そうだが、注意が必要。\n参考:\n docker container / image コマンド新旧比較 - Qiita  チートシート version, helpの確認 # Help docker --help docker \u0026lt;COMMAND\u0026gt; --help # client/server version 表示 docker version See also https://docs.docker.com/engine/reference/commandline/version/\nコンテナの起動（実行） # コマンド実行 % docker run ubuntu /bin/echo \u0026#34;Hello, world\u0026#34; #=\u0026gt; Hello, world # bash を起動し、インタラクティブモードになる % docker run -it ubuntu /bin/bash root@b171dd1d7831:/# # バックグラウンドで hello world を1秒おきに出力し続ける % docker run -d ubuntu /bin/sh -c \u0026#34;while true; do echo hello world; sleep 1; done\u0026#34; c6e58ecccfdb5640938443911f85fa301338e0063afe1a13ab0ffc7c93aa7f5f # container id # Web サーバをホストのエフェメラルポートで動かす docker run -dP training/webapp python app.py # Web サーバをホストの 80番ポートで動かす docker run -d -p 80:5000 training/webapp python app.py # Web サーバを \u0026#34;web\u0026#34; という名前で動かす docker run -dP --name web training/webapp python app.py # Postgres サーバを \u0026#34;db\u0026#34; を、独自ネットワーク上で起動 docker run -d --net my-network --name db training/postgres # Web サーバに /webapp というボリュームを作って起動 docker run -dP --name web -v /webapp training/webapp python app.py # + ホストのマウントパス指定 docker run -dP --name web -v /var/lib/docker/volumes/data-webapp:/opt/webapp training/webapp python app.py # + ホストの共有領域のデータボリュームをディレクトリ名で指定(パスは上と同じになる) docker run -dP --name web -v data-webapp:/opt/webapp training/webapp python app.py See also run\nコンテナ操作(run 以外) # コンテナを作成するが起動しない。オプションは run に似ている docker create [OPTIONS] \u0026lt;IMAGE\u0026gt; [COMMAND] # 停止 docker stop $NAME_OR_ID # 再起動 docker start $NAME_OR_ID # 強制停止 docker kill $ID # コンテナ上でインタラクティブシェル(bash)実行 docker exec -it db bash # 作成した停止済みのコンテナを削除 docker rm $NAME_OR_ID # 停止しているコンテナの全削除。動作中のものはエラーになる docker rm `docker ps -a -q` コンテナの情報を見る # 動作中のコンテナ表示 docker ps # 停止しているものも含めて表示 docker ps -a # 停止していようがいまいが一番最近動かしたやつを表示 docker ps -l # top docker top $NAME_OR_ID # コンテナにマッピングされたホストのポートを表示 docker port $NAME_OR_ID \u0026lt;PORT\u0026gt; # ログ表示 docker logs $NAME_OR_ID # ログを tail -f する docker logs -f $NAME_OR_ID # コンテナの情報を JSON で dump docker inspect $NAME_OR_ID # + クエリで情報を絞り込む例 x 2: docker inspect --format=\u0026#39;{{json .NetworkSettings.Networks}}\u0026#39; $NAME_OR_ID docker inspect --format=\u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39; $NAME_OR_ID コンテナのイメージ操作 # 変更を施したコンテナからイメージを作成する docker commit -m \u0026#34;変更についてのコメント\u0026#34; -a \u0026#34;名前 \u0026lt;メアド\u0026gt;\u0026#34; $NAME_OR_ID [\u0026lt;リポジトリ\u0026gt;[:タグ]] # Dockerfile からイメージ作成 docker build -t リポジトリ:タグ path/to/[Dockerfile] # イメージにタグを付ける docker tag $IMAGE_ID リポジトリ:タグ # リポジトリにあるイメージを検索 docker search \u0026lt;キーワード\u0026gt; # イメージをリポジトリから取得 docker pull \u0026lt;イメージ\u0026gt; # イメージをリポジトリに push docker push リポジトリ # ローカルにあるイメージ一覧 docker images # イメージ削除 docker rmi $ID データボリューム操作 See volume\nネットワーク操作 See network\n不要なイメージ・ボリューム等の掃除 # 停止したコンテナを削除 docker container prune # 不要ボリュームを削除 docker volume prune # 古いイメージなどを削除 docker image prune # ネットワークの掃除 docker network prune # まとめて掃除 docker system prune 参考:\n Dockerのあれこれを断捨離する - Qiita docker volume pruneコマンドの使い方（実例付）CE対応 | めもたんす  リファレンス container コンテナ操作。\n# コンテナ一覧 docker container ls [-a] # コンテナ停止 docker container stop CONTAINER_ID_OR_NAME # コンテナ削除 docker container rm CONTAINER_ID_OR_NAME # 停止したコンテナを全て削除 docker container prune # コンテナ上でインタラクティブシェル(bash)実行 docker container exec -it CONTAINER_ID_OR_NAME bash cp https://docs.docker.com/engine/reference/commandline/cp/\nホスト - コンテナ間でファイル/ディレクトリのコピー\nSyntax:\ndocker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH image イメージ操作。\n# 一覧 docker image list [-a] # Dockerfile からイメージ作成 docker image build -t リポジトリ:タグ \u0026lt;Dockerfileがあるディレクトリ\u0026gt; # イメージ削除 docker image rm IMAGE_ID network https://docs.docker.com/engine/reference/commandline/network/\nネットワークの管理\n# ネットワーク一覧 docker network ls # 特定ネットワークの情報表示 docker network inspect $NW_NAME # コンテナをネットワークから切断 docker network disconnect $NW_NAME $CONTAINER_NAME_OR_ID # コンテナをネットワークに接続 docker network connect $NW_NAME $CONTAINER_NAME_OR_ID # 独自ネットワークを作成 docker network create -d $DRIVER $NW_NAME run run はコンテナ起動コマンド。\n   オプション 意味     -d, \u0026ndash;detach バックグラウンドでコンテナを動かす   -e, \u0026ndash;env 環境変数を1つずつ指定   \u0026ndash;env-file  ファイルを指定して、環境変数を設定   -i, \u0026ndash;interactive STDIN を開く   \u0026ndash;name NAME コンテナに名前をつける   \u0026ndash;net NW ネットワーク NW に配置する。未指定だとデフォルトのネットワークになる   -P, \u0026ndash;publish-all コンテナが外部に開くポートをすべてランダムにホストのエフェメラルポートに割当てる   -p, \u0026ndash;publish=[] ポートを指定してポートを公開する   \u0026ndash;privileged 特権を付与   \u0026ndash;restart=\u0026lt;string\u0026gt; コンテナが既に存在するときの再起動ポリシー。デフォルトは no. 他に always が指定可能   \u0026ndash;rm コンテナ停止時に削除   -t, \u0026ndash;tty TTY 割当て   -v, \u0026ndash;volume=[] データボリュームのマウント    volume https://docs.docker.com/engine/reference/commandline/volume/\nデータボリュームの管理\n# ボリューム作成 docker volume create [OPTIONS] # flocker driver を使い my-named-volume という名前で 20GB のボリュームを作成 docker volume create -d flocker --name my-named-volume -o size=20GB # 一覧 docker volume ls # dangling volume をリスト docker volume ls -f dangling=true # 削除 docker volume rm $VOLUME_NAME 参考 非公式リファレンス系:\n Dockerチートシート - Qiita docker コマンド チートシート - Qiita Dockerコマンドラインリファレンス  その他:\n Dockerで不要になったコンテナやイメージを削除する - @znz blog (ヽ´ω) \u0026lt; DockerのOperation not permittedとの戦争 - (ヽ´ω) \u0026lt; *****  ","excerpt":"リファレンス: https://docs.docker.com/engine/reference/commandline/cli/\nv17.0.3でのコマンド体系再編について 2017年1月にリリース …","ref":"/tech-notes/a/software/docker/cmd/","title":"dockerコマンド"},{"body":"4/29 Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート 久しぶりに起動したらアップデートする必要があった。\n2018.1にアップデートしたときのログ\n上と同じ手順で行けた。\n以下はログ。\ntar.gzをダウンロードして解凍し、 $HOME/vendor/ に配置。\nidea-IC -\u0026gt; idea-IC-181.4203.550 とsymlinkしていたので、付け替える。\ncd ~/vendor rm idea-IC ln -s idea-IC-201.6668.121 idea-IC ~/.local/share/applications/jetbrains-idea-ce.desktop を次のように編集:\n[Desktop Entry] Version=2020.1.0 Type=Application Name=IntelliJ IDEA Community Edition Icon=$HOME/vendor/idea-IC/bin/idea.png Exec=\u0026quot;$HOME/vendor/idea-IC/bin/idea.sh\u0026quot; %f Comment=The Drive to Develop Categories=Development;IDE; Terminal=false StartupWMClass=jetbrains-idea-ce ※ $HOME は展開して書き替えないといけないかも。\nUbuntuに昔入れたminikubeをUninstall localkubeというdaemonが動いていることに気がついたのがきっかけだけど、2〜3年使っていないので掃除することにした。\n実行したコマンド:\nsudo systemctl stop localkube sudo systemctl disable localkube docker system prune rm -rf ~/.minikube sudo rm /usr/local/bin/localkube /usr/local/bin/minikube sudo rm -rf /etc/kubernetes/ 2017年の作業ログによると、dpkgで入れたみたいなんだけど、 dpkg -l しても出てこなかった。はて。\n参考:\n Uninstall Minikube - yuda prama - Medium How to uninstall? · Issue #1043 · kubernetes/minikube  ","excerpt":"4/29 Ubuntu 18.04でIntelliJ IDEAを2020.1にアップデート 久しぶりに起動したらアップデートする必要があった。\n2018.1にアップデートしたときのログ\n上と同じ手順で …","ref":"/tech-notes/a/memo/2020/20200429/","title":"2020-04-29"},{"body":"4/28 Macでanyenv経由のnodenv経由でNode.jsを入れてみた 以前はnodebrewを使っていたのだけど、anyenv押しの記事を見たので。\n参考:\n Homebrew 経由の anyenv 経由の nodenv 経由で Node.js をインストールする - Qiita https://github.com/anyenv/anyenv https://github.com/nodenv/nodenv  anyenv install\nbrew install anyenv anyenv init # 指示に従う vi .zshrc #=\u0026gt; eval \u0026#34;$(anyenv init -)\u0026#34; をいい感じに足す exec $SHELL -l nodenv install\nanyenv install nodenv eval \u0026#34;$(nodenv init -)\u0026#34; nodenv install 12.16.2 nodenv global 12.16.2 eval \u0026quot;$(nodenv init -)\u0026quot; はインストール後に1度だけ実行が必要そう。\nでないと、 ~/.anyenv/envs/nodenv/shims/ 以下に実行ファイルができないっぽい。（ちょっとハマった。）\n","excerpt":"4/28 Macでanyenv経由のnodenv経由でNode.jsを入れてみた 以前はnodebrewを使っていたのだけど、anyenv押しの記事を見たので。\n参考:\n Homebrew …","ref":"/tech-notes/a/memo/2020/20200428/","title":"2020-04-28"},{"body":"See Also:\n シェルスクリプト  Cookbooks    NOTE:\n このページに書いているが、実はPOSIX対応の機能もあるかもしれない。  joinとsplit join:\narr=(a \u0026#34;b c\u0026#34; $\u0026#39;d\\ne\u0026#39; f) # \u0026#39;,\u0026#39; で結合 str=\u0026#34;$(IFS=,; echo \u0026#34;${arr[*]}\u0026#34;)\u0026#34; IFS=, eval \u0026#39;str=\u0026#34;${arr[*]}\u0026#34;\u0026#39; # \u0026#39;, \u0026#39; で結合 str=$(printf \u0026#34;, %s\u0026#34; \u0026#34;${arr[@]}\u0026#34;) str=${str:2} split:\nstr=$\u0026#39;a,b c,d\\ne,f\u0026#39; IFS=, eval \u0026#39;arr=($str)\u0026#39; 参考:\n Bashの配列でjoinやsplitする - Qiita  複数行のコメントアウト : とヒアドキュメントを組み合わせる。\n: \u0026lt;\u0026lt; \u0026#34;__EOCOMMENT__\u0026#34; コメントアウトしたいコード __EOCOMMENT__ 参考:\n bashで複数行コメントアウトする方法 - Qiita  論理演算 ((2 \u0026gt; 1)) # $? =\u0026gt; 0 ((1 \u0026gt; 1)) # $? =\u0026gt; 1 (($(seq 1 3 | wc -w) \u0026gt; 2)) # $? =\u0026gt; 0 if true; then echo ok; fi #=\u0026gt; ok 数値の操作 i=0 echo $((i++)) #=\u0026gt; 0 echo $((++i)) #=\u0026gt; 2 連番によるループ $ n=0 $ for i in $(seq $n $((n + 2))); do echo $i; done 0 1 2 多重ループとbreak, continue break 2 や continue 2 のように後ろに数字を与えることで、上の階層のループを抜けられるようだ。\nExample:\nfor ((i=1; i \u0026lt;= 4; i++)); do for ((j=1; j \u0026lt;= 3; j++)); do echo \u0026#34;(i, j) = ($i, $j)\u0026#34; if ((i \u0026gt; 2)); then if ((j == 2)); then echo End of loop break 2 fi elif ((i \u0026gt; 1 \u0026amp;\u0026amp; j == 2)); then continue 2 fi echo blah blah done echo \u0026#34;[$i] end\u0026#34; done 実行結果:\n(i, j) = (1, 1) blah blah (i, j) = (1, 2) blah blah (i, j) = (1, 3) blah blah [1] end (i, j) = (2, 1) blah blah (i, j) = (2, 2) (i, j) = (3, 1) blah blah (i, j) = (3, 2) End of loop 参考:\n bash のbreak、continue、return、exit | 敗走王のブログ  文字列操作 部分文字列の削除 以下、 Bash scripting より。\n ${var%pattern} … 後方からパターンの最短マッチを削除 ${var%%pattern} … 後方からパターンの最長マッチを削除 ${var#pattern} … 前方からパターンの最短マッチを削除 ${var##pattern} … 前方からパターンの最長マッチを削除  パスからディレクトリ名やファイル名を取り出すのによく使う。\nfullpath=/a/b/c.txt echo ${fullpath##*/} # c.txt echo ${fullpath%/*} # /a/b filename=d.e.txt echo ${filename%.*} # d.e echo ${filename##*.} # txt たぶん、Bash に限らず POSIX で使える。\n下に載ってる。\nhttp://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02\n文字列の部分切り出し $ echo $str 1234567890 $ echo ${str:3:4} 4567 参考:\n シェルスクリプトで部分文字列を切り出す - 理系学生日記  文字列を部分的に置換  ${var/x/y} \u0026hellip; $var 文字列の x を y に置換（1回のみ） ${var//x/y} \u0026hellip; $var 文字列の x を y に置換（全てマッチ）  参考: bashの変数をsplitして配列を作る方法: 小粋空間\n","excerpt":"See Also:\n シェルスクリプト  Cookbooks    NOTE:\n このページに書いているが、実はPOSIX対応の機能もあるかもしれない。  joinとsplit join: …","ref":"/tech-notes/a/cli/shell/bash/cookbook/","title":"Cookbooks"},{"body":"4/27 Cloud Build + TerraformでインフラCI/CD 参考記事:\n Terraform、Cloud Build、GitOps を使用してインフラストラクチャをコードとして管理する | ソリューション Infrastructure as Code: Introduction to Continuous Spark Cluster Deployment with Cloud Build and Terraform  Bitbucket Pipelines + Terraform 参考:\n Terraform with Bitbucket pipeline How to build self-deploying applications with Terraform and BitBucket Pipelines. | Nick Santamaria  tfnotify対応 help wanted\nSupport Bitbucket Pipelines · Issue #36 · mercari/tfnotify\nGCP対応 terraformのDockerイメージを使って、下の要領で認証情報を渡してあげれば行けると思われる。\nBitbucket PipelinesでGCPに継続的デリバリ 参考:\n Deploy to Google Cloud - Atlassian Documentation Testing \u0026amp; deploying Google Cloud Functions in BitBucket Pipelines | PrimitiveSense - Web Design Newcastle Bitbucket Pipelines deployment to a Google Container Engine configuration Dev Story: Deploy to GCP Cloud Run with Bitbucket Pipelines  ","excerpt":"4/27 Cloud Build + TerraformでインフラCI/CD 参考記事:\n Terraform、Cloud Build、GitOps を使用してインフラストラクチャをコードとして管理す …","ref":"/tech-notes/a/memo/2020/20200427/","title":"2020-04-27"},{"body":"Provider Configuration  max_retries \u0026hellip; APIのリトライ回数を指定できる  Data Sources acm_certificate https://www.terraform.io/docs/providers/aws/d/acm_certificate.html\nACM証明書の情報取得\n参考:\n Terraform v0.7.9 でACMのデータソースが導入されました ｜ Developers.IO ACMで取得した証明書をterraformで配置する - tjinjin\u0026rsquo;s blog  caller_identity https://www.terraform.io/docs/providers/aws/d/caller_identity.html\nTerraform実行中のAWSアカウントのID等の情報を取得する。\n参考:\n *.tf 内で AWS アカウント ID を自動参照(取得)する aws_caller_identity Data Source - Qiita  iam_policy_document https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html\nIAM PolicyのJSONをHCLっぽく定義できる。\nJSONテンプレートより融通が効くし、syntax checkも掛かるので、便利なことがある。\nregion https://www.terraform.io/docs/providers/aws/d/region.html\nprovider で設定したリージョンを取得できる。\nsns_topic https://www.terraform.io/docs/providers/aws/d/sns_topic.html\nSNS TopicのARNを取得できる。\nssm_parameter https://www.terraform.io/docs/providers/aws/d/ssm_parameter.html\nEC2 Parameter Storeからデータ取得\n# \u0026#34;foo\u0026#34;という名前のパラメータストアを取得 data \u0026#34;aws_ssm_parameter\u0026#34; \u0026#34;foo\u0026#34; { name = \u0026#34;foo\u0026#34; }  SecureString であっても特にKSM keyを指定する必要はない。内部的にdecryptしてくれるみたい。  \u0026ldquo;terraformのstateの中ではraw textで保存されるから気をつけてね\u0026quot;って書いてある。    参考:\n terraform と パラメータストア - yBlog https://aws.amazon.com/jp/ec2/systems-manager/parameter-store/  Resources appautoscaling関連 Application AutoScaling.\nECS Serviceなどのオートスケール設定。\n https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html https://www.terraform.io/docs/providers/aws/r/appautoscaling_target.html  autoscaling関連  https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html https://www.terraform.io/docs/providers/aws/r/launch_configuration.html  cloudwatch関連  https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html  retention_in_days \u0026hellip; ログの保持期間。とり得る値は http://docs.aws.amazon.com/ja_jp/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html に示されている。 0 を指定すると無期限になる。   https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_subscription_filter.html  ElasticsearchやKinesisにサブスクライブするやつ   https://www.terraform.io/docs/providers/aws/r/cloudwatch_metric_alarm.html  CloudWatch Alarmによる監視の作成 namespaceに指定する値は https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/aws-namespaces.html を参照。 各namespaceで有効なmetric_nameやdimentionsフィールドの名前もAWSドキュメントを参照する。   https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_rule.html  schedule_expression の書式は http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/events/ScheduledEvents.html   https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_target.html  ec2関連  https://www.terraform.io/docs/providers/aws/r/ami.html https://www.terraform.io/docs/providers/aws/r/ebs_volume.html https://www.terraform.io/docs/providers/aws/r/eip.html https://www.terraform.io/docs/providers/aws/r/instance.html  ecs関連  https://www.terraform.io/docs/providers/aws/r/ecr_repository.html https://www.terraform.io/docs/providers/aws/r/ecr_repository_policy.html https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html https://www.terraform.io/docs/providers/aws/r/ecs_service.html  placement_strategy \u0026hellip; ECSタスク配置戦略。See https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task-placement-strategies.html   https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html  指定可能なパラメーターについては、タスク定義パラメーター - Amazon Elastic Container Service を参照。    動的ポートマッピングをする場合、task_definitionでhostPortを0にする:\n# ecs_task_definition.tf resource \u0026#34;aws_ecs_task_definition\u0026#34; \u0026#34;service\u0026#34; { : container_definitions = \u0026#34;${file(\u0026#34;task-definitions/service.json\u0026#34;)}\u0026#34; : }# task_definitions/service.json [ { : \u0026#34;portMappings\u0026#34;: [ { \u0026#34;containerPort\u0026#34;: 3000, \u0026#34;hostPort\u0026#34;: 0, ] }, : ] 参考:\n terraformで開発者個人別に自由にECSにコンテナをデプロイできる開発環境を用意する - Qiita TerraformでECS+ECRする話  elasticsearch関連  https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain.html  Exported Attributes:  domain_id \u0026hellip; ${AWSアカウントID}/${クラスタ名} . 監視のdimentionとしてはそのままでは使えない。     https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain_policy.html  iam関連  https://www.terraform.io/docs/providers/aws/r/iam_access_key.html https://www.terraform.io/docs/providers/aws/r/iam_group.html https://www.terraform.io/docs/providers/aws/r/iam_group_policy_attachment.html https://www.terraform.io/docs/providers/aws/r/iam_instance_profile.html https://www.terraform.io/docs/providers/aws/r/iam_policy.html https://www.terraform.io/docs/providers/aws/r/iam_role.html https://www.terraform.io/docs/providers/aws/r/iam_role_policy.html https://www.terraform.io/docs/providers/aws/r/iam_user.html https://www.terraform.io/docs/providers/aws/r/iam_user_policy.html \u0026hellip; 当該IAM Userにだけつけるインラインポリシー https://www.terraform.io/docs/providers/aws/r/iam_user_policy_attachment.html policyとroleの紐付け  https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html  policy : roleが1対多。コード化されていないroleへの紐付けは削除される。   https://www.terraform.io/docs/providers/aws/r/iam_role_policy_attachment.html  policy : roleが1対1.      kms関連  https://www.terraform.io/docs/providers/aws/r/kms_alias.html \u0026hellip; alias for KMS key https://www.terraform.io/docs/providers/aws/r/kms_key.html \u0026hellip; KMS master keyの作成・管理  lambda関連  https://www.terraform.io/docs/providers/aws/r/lambda_function.html  runtime \u0026hellip; 利用できるruntimeについては CreateFunction - AWS Lambda を見る。   https://www.terraform.io/docs/providers/aws/r/lambda_permission.html  マネジメントコンソールだと\u0026quot;Triggers\u0026quot;のタブ 許可したリソースからLambdaを実行することができる    lb関連 ALB等の作成・管理:\n https://www.terraform.io/docs/providers/aws/r/lb.html https://www.terraform.io/docs/providers/aws/r/lb_listener.html https://www.terraform.io/docs/providers/aws/r/lb_target_group.html  CLB:\n https://www.terraform.io/docs/providers/aws/r/elb.html  rds関連  https://www.terraform.io/docs/providers/aws/r/db_event_subscription.html \u0026hellip; RDSイベント通知 https://www.terraform.io/docs/providers/aws/r/rds_cluster.html \u0026hellip; Aurora用(?) https://www.terraform.io/docs/providers/aws/r/rds_cluster_instance.html \u0026hellip; Aurora用(?) https://www.terraform.io/docs/providers/aws/r/db_instance.html ~~https://www.terraform.io/docs/providers/aws/r/db_subnet_group.html~~ \u0026hellip; これはEC2 Classic用でもう使うことはなさそう。 https://www.terraform.io/docs/providers/aws/r/db_security_group.html https://www.terraform.io/docs/providers/aws/r/rds_cluster_parameter_group.html https://www.terraform.io/docs/providers/aws/r/db_parameter_group.html  route53関連  https://www.terraform.io/docs/providers/aws/r/route53_zone.html  vpc_id を指定するとPrivate Hosted Zoneになる。 delegation_set_id を指定するとPublic Hosted Zoneになる。   https://www.terraform.io/docs/providers/aws/r/route53_record.html  Route53のDNSレコード作成・管理    s3関連  https://www.terraform.io/docs/providers/aws/r/s3_bucket.html https://www.terraform.io/docs/providers/aws/r/s3_bucket_policy.html  sns関連  https://www.terraform.io/docs/providers/aws/r/sns_topic.html https://www.terraform.io/docs/providers/aws/r/sns_topic_policy.html https://www.terraform.io/docs/providers/aws/r/sns_topic_subscription.html  ※emailのサブスクリプションは作成できない。メール認証が必要なので。    vpc関連  https://www.terraform.io/docs/providers/aws/r/default_route_table.html  これはimportに対応していない route_table + main_route_table_associationで代替できそう   https://www.terraform.io/docs/providers/aws/r/main_route_table_assoc.html https://www.terraform.io/docs/providers/aws/r/route.html  route_tableと一緒に使うとまずそう   https://www.terraform.io/docs/providers/aws/r/route_table.html https://www.terraform.io/docs/providers/aws/r/subnet.html https://www.terraform.io/docs/providers/aws/r/vpc.html  Route 53のPrivate DNSを使うには、 enable_dns_hostnames, enable_dns_support を true にする。    budgets_budget https://www.terraform.io/docs/providers/aws/r/budgets_budget.html\nBudgetにコストアラートを設定できたり。\ndynamodb_table https://www.terraform.io/docs/providers/aws/r/dynamodb_table.html\nDynamoDB table作成\nsecurity_group https://www.terraform.io/docs/providers/aws/r/security_group.html\nSecurity Groupの作成・管理\nsqs_queue https://www.terraform.io/docs/providers/aws/r/sqs_queue.html\nSQS Queueの作成・管理\nssm_parameter https://www.terraform.io/docs/providers/aws/r/ssm_parameter.html\nEC2 Parameter Storeにデータを保存する。\n","excerpt":"Provider Configuration  max_retries \u0026hellip; APIのリトライ回数を指定できる  Data Sources acm_certificate …","ref":"/tech-notes/a/software/terraform/provider/aws/","title":"AWS"},{"body":"Versions https://www.terraform.io/docs/providers/google/guides/provider_versions.html\nβ機能をサポートした google-beta というProviderもある。\n「要するに、ふつうの gcloud コマンドの代わりに gcloud beta コマンドを使うようなもの」\nNOTE:\n 両Providerの併用も可能だが、beta -\u0026gt; 無印への移行時には作業が必要  Configuration Google Provider Configuration Reference - Terraform by HashiCorp\nSYNOPSIS:\nprovider \u0026#34;google\u0026#34; { //credentials = \u0026#34;${file(\u0026#34;account.json\u0026#34;)}\u0026#34; project = \u0026#34;my-project-id\u0026#34; region = \u0026#34;us-central1\u0026#34; zone = \u0026#34;us-central1-c\u0026#34; version = \u0026#34;3.19.0\u0026#34; }  credentials  GCPのサービスアカウントキー（JSON）のパスまたは内容 環境変数 GOOGLE_CREDENTIALS or GOOGLE_CLOUD_KEYFILE_JSON or GCLOUD_KEYFILE_JSON による指定も可能。 指定がない場合、Application Default Credentialsにフォールバックする    See also:\n Backends#gcs  Data Sources compute系  google_compute_network google_compute_subnetwork  Resources 未分類のもの:\n google_cloudfunctions_function \u0026hellip; Cloud Function作成・管理 google_cloud_scheduler_job \u0026hellip; Cloud Scheduler Job google_redis_instance \u0026hellip; Memorystore (Redis)  GCP (IAM, API, Billing, Organization) Providerリファレンスで、「Google Cloud Platform Resources」というカテゴリに属するもの。\n google_project_service \u0026hellip; APIs \u0026amp; Servicesの有効化 google_service_account google_service_account_key  Examples:\nresource \u0026#34;google_service_account\u0026#34; \u0026#34;terraform\u0026#34; { account_id = \u0026#34;terraform\u0026#34; } resource \u0026#34;google_service_account_key\u0026#34; \u0026#34;terraform_key\u0026#34; { service_account_id = google_service_account.terraform.name private_key_type = \u0026#34;TYPE_GOOGLE_CREDENTIALS_FILE\u0026#34; }# ローカルにService Account KeyのJSONを保存する resource local_file \u0026#34;terraform_key_json\u0026#34; { filename = \u0026#34;./tmp/terraform_service_account_key.json\u0026#34; content = base64decode(google_service_account_key.terraform_key.private_key) file_permission = \u0026#34;0600\u0026#34; directory_permission = \u0026#34;0755\u0026#34; } IAM policy for projects https://www.terraform.io/docs/providers/google/r/google_project_iam.html\n google_project_iam_policy google_project_iam_binding \u0026hellip; role : member = 1 : Nの権限を設定する。Service Accountの権限にも対応 google_project_iam_member \u0026hellip; role : member = 1 : 1の権限を設定する。Service Accountの権限にも対応 google_project_iam_audit_config  compute系  google_compute_backend_bucket \u0026hellip; HTTP(S) LBのバックエンドになるGCSバケット設定 google_compute_backend_service \u0026hellip; GCLBのバックエンドになるサービスの設定 google_compute_health_check \u0026hellip; ヘルスチェック google_compute_instance google_compute_managed_ssl_certificate \u0026hellip; β (2020-03-18) HTTPS LBのためのマネージドTLS証明書 google_compute_security_policy \u0026hellip; Cloud Armorのセキュリティポリシー  ネットワーク関係:\n google_compute_address \u0026hellip; EXTERNAL なアドレスも発行できる。Cloud NATに使うのはこっち google_compute_global_address \u0026hellip; HTTP(S) LBで使うやつ google_compute_network google_compute_subnetwork google_compute_router \u0026hellip; Cloud Router google_compute_router_nat \u0026hellip; Cloud NAT w/ Cloud Router  GKE関連  google_container_cluster google_container_node_pool  参考:\n Terraformを用いてVPCネットワークにGKE限定公開クラスタを構成する - Qiita  Examples 限定公開クラスタ（パブリックエンドポイント有り）\nresource \u0026#34;google_container_cluster\u0026#34; \u0026#34;experiment\u0026#34; { name = \u0026#34;experiment\u0026#34; location = \u0026#34;asia-northeast1\u0026#34; private_cluster_config { enable_private_nodes = true enable_private_endpoint = false master_ipv4_cidr_block = \u0026#34;172.16.0.0/28\u0026#34; } ip_allocation_policy {# GKE管理のサブネットを作成してもらう cluster_ipv4_cidr_block = \u0026#34;\u0026#34; services_ipv4_cidr_block = \u0026#34;\u0026#34; } } Pub/Sub  google_pubsub_topic google_pubsub_subscription  storage (GCS) 系  google_storage_bucket \u0026hellip; GCS (Cloud Storage) バケット google_storage_bucket_object \u0026hellip; GCSオブジェクト。ローカルのファイルからアップロードできる  ","excerpt":"Versions https://www.terraform.io/docs/providers/google/guides/provider_versions.html\nβ機能をサポー …","ref":"/tech-notes/a/software/terraform/provider/google/","title":"Google"},{"body":"便利構文 https://www.terraform.io/docs/configuration/interpolation.html\n計算とか制御構文とか便利関数が有る。\nelement(list, index) listの要素を取得。\n最初の要素のindexは0.\nfile(path) content = \u0026#34;${file(path/to/file)}\u0026#34;# ファイルの内容を取り込む format(format, args, \u0026hellip;) url = \u0026#34;${format(\u0026#34;https://%s/%s\u0026#34;, var.fqdn, var.path)}\u0026#34; formatlist(format, args, \u0026hellip;) formatのlist版。 args... としてlistを受け取り、list値を返す。\nurls = \u0026#34;${formatlist(\u0026#34;https://%s/\u0026#34;, var.fqdn_list)}\u0026#34; lookup(map, key [, default]) mapの key に対するvalueを参照する。第3引数に見つからなかったときの default 値を指定することもできる。\n1階層のmapは stash[\u0026quot;x\u0026quot;] で良いが、デフォルト値を設定したいときや、2階層のmapでは lookup を使う必要がある。\nv = \u0026#34;${lookup(var.stash[\u0026#34;x\u0026#34;], \u0026#34;y\u0026#34;, \u0026#34;default-value\u0026#34;)}\u0026#34; keys(map) mapのキーをソート済みのlistとして返す。See also values\nmap(key, value, \u0026hellip;) mapを作る。\noutput \u0026#34;result\u0026#34; { value = \u0026#34;${map( \u0026#34;key-1\u0026#34;, \u0026#34;${value-1}\u0026#34;, \u0026#34;key-2\u0026#34;, \u0026#34;${value-2}\u0026#34;, : )}\u0026#34; } split(delim, string) 文字列をデリミタ文字で分割してlistを返す。\nExample:\n\u0026#34;${element(split(\u0026#34;/\u0026#34;, \u0026#34;dir/file\u0026#34;), 1)}\u0026#34; #=\u0026gt; \u0026#34;file\u0026#34; values(map) mapの値をlistとして返す。得られる値の順序は、対応するキーのlistが keys で返される順序と同じになるようである。\n","excerpt":"便利構文 https://www.terraform.io/docs/configuration/interpolation.html\n計算とか制御構文とか便利関数が有る。\nelement(list, …","ref":"/tech-notes/a/software/terraform/config/v0.11/","title":"v0.11"},{"body":"Documentation https://docs.npmjs.com/\n CLI documentation | npm Documentation  CLI Examples:\n# help npm help npm help \u0026lt;command\u0026gt; # バージョン表示 npm -v npm-install https://docs.npmjs.com/cli-commands/install.html\nパッケージをインストールする。\nエイリアス: i, add\n# 書式 npm install パッケージ [OPTIONS] npm install [\u0026lt;@scope\u0026gt;/]\u0026lt;name\u0026gt; npm install [\u0026lt;@scope\u0026gt;/]\u0026lt;name\u0026gt;@\u0026lt;version\u0026gt; # package.json に従ってインストール npm install    Option 説明     -g \u0026ndash;global   \u0026ndash;no-save （package.jsonの）dependencies に追加しない    npm-ls https://docs.npmjs.com/cli-commands/ls.html\nインストールされたパッケージを一覧表示。\nエイリアス: list, la, ll\nnpm ls [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...] npm-uninstall https://docs.npmjs.com/cli-commands/uninstall.html\nインストールされたパッケージを削除する。\nエイリアス: remove, rm, un, unlink\nnpm uninstall パッケージ [OPTIONS] ","excerpt":"Documentation https://docs.npmjs.com/\n CLI documentation | npm Documentation  CLI Examples:\n# help …","ref":"/tech-notes/a/program/lang/js/node/npm/","title":"npm"},{"body":"Documentation  https://nodejs.org/api/  パッケージマネージャー  npm Yarn  Node.jsのバージョン管理  nodebrew nvm  Modules util https://nodejs.org/api/util.html\nutil.format https://nodejs.org/api/util.html#util_util_format_format_args\nprintfみたいなやつ。\nconsole.logなどが内部的に利用しているそうだ。\n参考:\n %o 便利 - Qiita  package.json プロジェクトで使うNode.js modulesを管理するためのファイル。\nバージョン記法 参考:\n package.json のチルダ(~) とキャレット(^) - Qiita  チルダ表記 ~ 明記したところ以下のバージョンがあがることのみ許容\n ~1.1.2 = 1.1.2 \u0026lt;= version \u0026lt; 1.2.0 ~1.1 = 1.1.x ~1 = 1.x  オリジナルの定義は、\n Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.\n キャレット表記 ^ 一番左側にある、ゼロでないバージョニングは変えない (それ以下があがることは許容)\n ^1.2.3 := 1.2.3 \u0026lt;= version \u0026lt; 2.0.0 ^0.2.3 := 0.2.3 \u0026lt;= version \u0026lt; 0.3.0 ^0.0.3 := 0.0.3 \u0026lt;= version \u0026lt; 0.0.4  オリジナルの定義は\n Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple.\n ","excerpt":"Documentation  https://nodejs.org/api/  パッケージマネージャー  npm Yarn  Node.jsのバージョン管理  nodebrew nvm …","ref":"/tech-notes/a/program/lang/js/node/","title":"Node.js"},{"body":"Ubuntu https://github.com/golang/go/wiki/Ubuntu\n2018年以前ぐらいまではtarballからインストールしていたと思うが、2020-04-26現在は、apt installが可能になっている。\n以下は最新版をインストールする手順:\nsudo add-apt-repository ppa:longsleep/golang-backports sudo apt update sudo apt install golang-go ","excerpt":"Ubuntu https://github.com/golang/go/wiki/Ubuntu\n2018年以前ぐらいまではtarballからインストールしていたと思うが、2020-04-26現在 …","ref":"/tech-notes/a/program/lang/go/install/","title":"Install"},{"body":" Marketplace \u0026hellip; 公開されているactionを見つけられる。  Actionとは アクションは、ワークフロー内で実行される個々のタスク。\nAbout actions - GitHub Help\nActionの形式 https://help.github.com/en/actions/building-actions/about-actions#types-of-actions\n   Type Operating system     Docker container Linux   JavaScript Linux, MacOS, Windows    ワークフローからの利用 https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#referencing-actions-in-your-workflow\nワークフローからは、次のロケーションのactionが利用できる:\n 公開リポジトリ 同リポジトリ内で参照できるもの Docker Hubに公開されたDockerイメージ  公式Actions GitHub公式のactionはたぶん https://github.com/actions にあるもの。\ncheckout https://github.com/actions/checkout\nリポジトリをチェックアウトする。\nおそらくほとんどのワークフローから利用される。\nExample:\n- uses:actions/checkout@v2with:# Number of commits to fetch. 0 indicates all history.# Default: 1fetch-depth:0# Whether to checkout submodules: `true` to checkout submodules or `recursive` to# recursively checkout submodules.## Default: falsesubmodules:truesetup-node https://github.com/actions/setup-node/\nNode.jsをセットアップ。\nBasic:\nsteps:- uses:actions/checkout@v2- uses:actions/setup-node@v1with:node-version:\u0026#39;10.x\u0026#39;- run:npminstall- run:npmtestMatrix Testing:\njobs:build:runs-on:ubuntu-18.04strategy:matrix:node:[\u0026#39;10.x\u0026#39;,\u0026#39;12.x\u0026#39;]name:Node${{matrix.node}}samplesteps:- uses:actions/checkout@v2- name:Setupnodeuses:actions/setup-node@v1with:node-version:${{matrix.node}}- run:npminstall- run:npmtest参考:\n GitHub ActionsでのNode.jsの利用 - GitHub ヘルプ https://github.com/actions/starter-workflows/blob/master/ci/node.js.yml  3rd Party Actions Slack通知用 たくさんあるが、starが多くて目についたものを載せる:\n 8398a7/action-slack \u0026hellip; メッセージ等のカスタマイズの余地はなさそうだが、必要十分な感ある rtCamp/action-slack-notify \u0026hellip; 通知先チャネルも設定可能で、よさそう  Deployments作成用 Deploymentsについては See GitHub#Deployments\nこれもたくさんあるが、一部のみ掲載する。\nNOTE:\n 後掲のpeaceiris/actions-gh-pagesのように、内部的にDeploymentを作成するactionもあるようだ。  Actions:\n bobheadxi/deployments chrnorm/deployment-action  hashicorp/terraform-github-actions https://github.com/hashicorp/terraform-github-actions\nterraformを実行するaction\nドキュメント:\n 上のREADME https://www.terraform.io/docs/github-actions/  NOTE:\n デフォルト設定でプルリクエストにfmt, validate, plan, applyの結果をコメントしてくれて便利。  例: terraform fmt -\u0026gt; validate -\u0026gt; plan name:terraformplanon:pull_requestenv:tf_version:\u0026#39;0.12.24\u0026#39;tf_work_dir:\u0026#39;.\u0026#39;GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}jobs:plan:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2- name:terraformfmtuses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:fmttf_actions_working_dir:${{env.tf_work_dir}}- name:terraforminituses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:inittf_actions_working_dir:${{env.tf_work_dir}}- name:terraformvalidateuses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:validatetf_actions_working_dir:${{env.tf_work_dir}}- name:terraformplanuses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:plantf_actions_working_dir:${{env.tf_work_dir}}例: terraform plan -\u0026gt; apply name:terraformapplyon:push:branches:- masterenv:tf_version:\u0026#39;0.12.24\u0026#39;tf_work_dir:\u0026#39;.\u0026#39;GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}jobs:apply:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2- name:terraforminituses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:inittf_actions_working_dir:${{env.tf_work_dir}}- name:terraformplanid:planuses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:plantf_actions_working_dir:${{env.tf_work_dir}}- name:terraformapply# planの差分がある時のみ実行if:${{steps.plan.outputs.tf_actions_plan_has_changes==\u0026#39;true\u0026#39;}}uses:hashicorp/terraform-github-actions@masterwith:tf_actions_version:${{env.tf_version}}tf_actions_subcommand:applytf_actions_working_dir:${{env.tf_work_dir}}参考:\n GitHub ActionsでGCPにTerraformでインフラCI/CDする - Qiita  peaceiris/actions-gh-pages https://github.com/peaceiris/actions-gh-pages\nGitHub Pagesに公開するaction.\nExample:\n- uses:peaceiris/actions-gh-pages@v3with:github_token:${{secrets.GITHUB_TOKEN}}publish_dir:./public#publish_branch: master # default: gh-pagespeaceiris/actions-hugo https://github.com/peaceiris/actions-hugo\nランナー上にHugoをインストールする。\nExample:\n- name:SetupHugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.68.3\u0026#39;# extended: true- name:Buildrun:hugo--minifyTips:\n extended: true でHugoの拡張版をインストール hugo-version: latest で最新版を使う  ","excerpt":"Marketplace \u0026hellip; 公開されているactionを見つけられる。  Actionとは アクションは、ワークフロー内で実行される個々のタスク。\nAbout actions - …","ref":"/tech-notes/a/web-service/github/action/action/","title":"Actions（タスク）"},{"body":"GitHubのリポジトリに対してCI/CD等のワークフローを自動実行できるサービス。\n2019年11月に正式リリースされた。\n※2020-05-03 このページの内容を元に、Qiitaに投稿した。\nDocumentation https://help.github.com/en/actions\n Workflow syntax for GitHub Actions - GitHub Help Virtual environments for GitHub-hosted runners - GitHub Help \u0026hellip; runs-on でサポートされている実行環境 Context and expression syntax for GitHub Actions - GitHub Help \u0026hellip; ${{ \u0026lt;expression\u0026gt; }} 形式でYAMLに埋め込める式表現とか、 if: ${{ \u0026lt;expression\u0026gt; }} によるガード条件について  参考:\n Github Actionsの使い方メモ - Qiita  既知の制限事項 2020-05-03更新\n ビルドを手動トリガーするネイティブ機能がない  2020-05-03に調べたログ ※ワークアラウンドは可能   YAMLアンカーがサポートされていない  Support for YAML anchors - GitHub Community Forum   デフォルトでは公式のSlackインテグレーションで、ビルド結果通知を受け取れない。  該当するfeatureがない 3rd Partyのactionを使えば可能。incoming webhookと組み合わせる プルリクエストに紐付いたビルドの結果はわかるようだ    Getting Started https://github.com/actions/starter-workflows \u0026hellip; 初心者向けワークフローサンプル集\nWorkflowの作成 https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow\nNOTE:\n プロジェクトの .github/workflows/ ディレクトリ下にYAMLファイルを作成する pushをトリガーにしたり、定期的に実行したりできる  See https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on    プルリクエストで実行する 任意のプルリクエストでtestを実行し、masterブランチへのマージでのみdeployを実行する設定例（2ファイル）:\n# test.ymlname:teston:pull_requestjobs:test:runs-on:ubuntu-lateststeps:# tasks for testing---# deploy.ymlname:deployon:pull_request:branches:- mastertypes:[closed]jobs:deploy:runs-on:ubuntu-latestif:${{github.event.pull_request.merged==true}}steps:# tasks for deploymentNOTE:\n デフォルトでは pull_request eventでは types: [opened, synchronize, reopend] でしか実行されない。 test のときはこれになっている。  https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request    参考:\n Solved: Re: Trigger workflow only on pull request MERGE - GitHub Community Forum \u0026hellip; Solutionは間違ってるので注意  対象branchやpathをフィルタする Example:\non:push:branches:- master- \u0026#39;releases/**\u0026#39;- \u0026#39;!releases/**-alpha\u0026#39;# alpha版は含めないtags:- v1# file paths to consider in the event. Optional; defaults to all.paths:- \u0026#39;test/*\u0026#39;paths-ignore:- \u0026#39;docs/**\u0026#39;NOTE:\n branches と branches-ignore は併用不可 tags と tags-ignore は併用不可 paths と paths-ignore は（たぶん）併用可  リファレンス:\n branchやtagについて -\u0026gt; on.\u0026lt;push|pull_request\u0026gt;.\u0026lt;branches|tags\u0026gt; pathについて -\u0026gt; on.\u0026lt;push|pull_request\u0026gt;.paths  複数の実行環境に対応する 複数のOSプラットフォームや、ランタイムのバージョンに対応する方法。\n下のようなbuild matrixを設定すると良い。\nExample:\njobs:node-test:runs-on:${{matrix.os}}strategy:matrix:os:[ubuntu-16.04,ubuntu-18.04]node:[6,8,10]steps:- uses:actions/checkout@v2- uses:actions/setup-node@v1with:node-version:${{matrix.node}}NG例:\n runs-on: [ubuntu-16.04, ubuntu-18.04]  リファレンス:\n jobs.\u0026lt;job_id\u0026gt;.runs-on jobs.\u0026lt;job_id\u0026gt;.strategy  参考:\n GitHub Actionsの使い方 | 純規の暇人趣味ブログ  Dockerコンテナ上でビルド実行 jobs.\u0026lt;job_id\u0026gt;.container で指定する。\nhttps://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer\nExamples:\njobs:my_job:container:node:10.16-jessie---jobs:my_job:container:image:node:10.16-jessieenv:NODE_ENV:developmentports:- 80volumes:- my_docker_volume:/volume_mountoptions:--cpus1starter-workflowsにも参考になるサンプルがある。以下は例:\n https://github.com/actions/starter-workflows/blob/master/ci/erlang.yml  環境変数を設定する https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#env\nいくつかの箇所で設定できる。それぞれ適用範囲が異なる。\n   設定位置 適用範囲     env for all jobs and steps   jobs.\u0026lt;job_id\u0026gt;.env for all steps in the job   jobs.\u0026lt;job_id\u0026gt;.steps.env for the step   jobs.\u0026lt;job_id\u0026gt;.container.env for the container to run steps in the job    Examples:\nenv:SERVER:production---jobs:my-job:name:MyJobruns-on:ubuntu-latestenv:MY_VAR:Hithere!Mynameissteps:- name:Printagreetingenv:FIRST_NAME:MonaMIDDLE_NAME:TheLAST_NAME:Octocatrun:| echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.See also #変数やシークレットの利用\njobやstepを特定の条件で実行する jobs.\u0026lt;job_id\u0026gt;.if や jobs.\u0026lt;job_id\u0026gt;.steps.if の値に条件式を記述することで、該当のjobやstepを条件が真のときのみ実行することができる。\nExamples:\njobs:deploy:# プルリクエストがマージされた時のみ実行if:${{github.event.pull_request.merged==true}}steps:- name:Deploy# some deploy action- name:Notify# このstepは常に実行するif:${{always()}}# some notify actionNOTE:\n if:  に渡す条件式では ${{ }} は省略可能 ワークフロー内でタスクが失敗すると、デフォルトでは後続のタスクはスキップされる  See Context and expression syntax for GitHub Actions - GitHub Help#always     A job or step will not run when a critical failure prevents the task from running. For example, if getting sources failed.\n 変数やシークレットの利用 Documents:\n https://help.github.com/en/actions/configuring-and-managing-workflows/using-variables-and-secrets-in-a-workflow  Creating and storing encrypted secrets - GitHub Help Using environment variables - GitHub Help    GITHUB_TOKENによる認証 Authenticating with the GITHUB_TOKEN - GitHub Help\n GitHubは、ワークフローで利用する GITHUB_TOKEN シークレットを自動的に生成します。 この GITHUB_TOKEN は、ワークフローの実行内での認証に利用できます。\n How-to Workflow内でパッケージインストール Ubuntuだったら単純に sudo apt install \u0026lt;package\u0026gt; を run すればいい。\njobs:install-zsh:runs-on:ubuntu-lateststeps:- run:sudoaptinstallzsh- run:zsh--version参考:\n Virtual environments for GitHub-hosted runners - GitHub Help \u0026hellip; 特権の必要な操作には sudo が使えるよと書いてある How to apt-get install in a GitHub action? - Stack Overflow  ","excerpt":"GitHubのリポジトリに対してCI/CD等のワークフローを自動実行できるサービス。\n2019年11月に正式リリースされた。\n※2020-05-03 このページの内容を元に、Qiitaに投稿した。 …","ref":"/tech-notes/a/web-service/github/action/","title":"GitHub Actions"},{"body":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var privateVar string = \u0026#34;this is private\u0026#34; // 外部から見えない var PublicVar string = \u0026#34;this is public\u0026#34; // 外部から見える 参考:\n Go言語のスコープについて - ryochack.clipboard  データ型 https://golang.org/ref/spec#Types\n配列・スライス 配列は固定長。スライスは可変長。\na := [...]int{1, 2, 3} // 配列  s1 := []int{1, 2, 3} // スライス s2 := []int{5, 6, 7} // スライスの結合 s1 = append(s1, 4) s1 = append(s1, s2...) // スライス同士の結合では \u0026#34;...\u0026#34; が必要 \u0026ldquo;Slicing\u0026quot;というテクニックで配列をスライスに変換できる。\na := [5]byte{\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;} s := a[:] // aを参照するスライス 参考:\n Go Slices: usage and internals - The Go Blog Go言語のArrayとSliceについて - done is better than perfect Goでsliceに要素追加, slice同士の結合 - Qiita  map 初期値はnilで、データを入れようとするとパニックが起こるので、事前に割当てが必要。\n// NG var ages map[string]int ages[\u0026#34;carol\u0026#34;] = 21 // OK var ages map[string]int ages = make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 // OK ages := make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 要素取得時のヒット検査 age, ok := ages[\u0026#34;bob\u0026#34;] if ok { // hit } else { // miss } 構造体 初期化 // 例 type Foo struct { Name string Age int } // (1) f := Foo{} f.Name = \u0026#34;foo\u0026#34; f.Age = 5 // (2) f := Foo{\u0026#34;foo\u0026#34;, 5} // 全てのフィールドの指定が必要  // (3) f := Foo{Age: 5, Name: \u0026#34;foo\u0026#34;} // 任意フィールドの省略が可能。順番も入れ替え可能 もし構造体に初期値を設定したい場合、コンストラクタ的な専用の関数を作る必要があるっぽい。\n参考:\n [Go] 構造体の初期化方法まとめ - Qiita 【Go】structにデフォルトの値を設定したい - /dev/null  日付・時刻 日時フォーマット Go言語の日時のフォーマット関数（timeパッケージのfunc (Time) Format)）に与えられる引数は、2006-01-02T15:04:05（月曜）の日時となっている。\nこれはアメリカで時刻を表記する際の順番で、1月2日午後3時4分5秒2006年となり、わかりやすかったからだそうだ。\n参考:\n Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？ - Qiita  ポインタ 参考:\n Goでxxxのポインタを取っているプログラムはだいたい全部間違っている - Qiita  goroutine OSのネイティブスレッドより扱いやすくしたもの。 スレッドとファイバーの良いとこ取り。 go というキーワードを付けるとgoroutineが作られる。\nExamples:\n// 別のgoroutineを作って既存関数を実行 go Function() // 別のgoroutineを作って、無名関数を実行 go func() { // goroutine内で実行したい処理 } 参考:\n Go言語で非同期処理の結果を受け取る - Qiita  チャネル SYNOPSIS:\n// バッファなし tasks := make(chan string) // バッファ付き tasks := make(chan string, 10) // データ送信 tasks \u0026lt;- \u0026#34;cmake ..\u0026#34; tasks \u0026lt;- \u0026#34;cmake . --build Debug\u0026#34; // データ受信 task := \u0026lt;-tasks // データ受信 + クローズ判定 task, ok := \u0026lt;-tasks // データを読み捨てる \u0026lt;-wait Examples:\n https://gobyexample.com/channels  select文 複数のチャネルを待機する場合に使う。\nExamples:\n// ブロックせずに受信し、かつ、チャネルがクローズ済みかどうかチェックする select { case v, ok := \u0026lt;- ch: if ok { fmt.Println(v) } else { fmt.Println(\u0026#34;closed\u0026#34;) } default: fmt.Println(\u0026#34;no value\u0026#34;) } // ブロックせずに送信 select { case ch \u0026lt;- v: fmt.Println(\u0026#34;sent\u0026#34;) default: fmt.Println(\u0026#34;no capacity\u0026#34;) } 参考:\n Go言語でチャネルとselect - Qiita select - はじめてのGo言語  文法 ループ Examples:\nfor { // 無限ループ } for i := 1; i \u0026lt; 100; i++ { // iが[1, 100)の間 } // collection要素のイテレーション dayOfWeeks := [...]string{\u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;, \u0026#34;日\u0026#34;} for arrayIndex, dayOfWeek := range dayOfWeeks { fmt.Printf(\u0026#34;%d番目の曜日は%s曜日です。\\n\u0026#34;, arrayIndex + 1, dayOfWeek) } ※mapをイテレーションする場合、取り出し順はランダムになる。\n参考:\n 繰り返し - はじめてのGo言語  パッケージ init()関数による初期化  ソースファイルに1つ func init() を記述できる ソースファイル読み込み時に1回実行される importされるpackageのinit()が先に実行される  pがqをimportしているとき、pのinit()より先にqのinit()が完了している mainパッケージのinit()が最後に実行される    参考:\n Effective Go - golang.jp  ","excerpt":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var …","ref":"/tech-notes/a/program/lang/go/spec/","title":"言語仕様"},{"body":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使われている。\n20ページ以上のドキュメントサイトを作るときに向いている、と謳っている。\n多言語対応しており、プロダクトのバージョニングも考慮されている。\nDocumentation https://www.docsy.dev/docs/\nGetting Started https://www.docsy.dev/docs/getting-started/\nHugoの拡張版が必要。\nこれはSCSSを使っているためのようだ。\n参考:\n Error building site: POSTCSS: failed to transform \u0026quot;scss/main.css\u0026quot; · Issue #235 · google/docsy  デモサイトのソースをcloneして使う ふつうのHugo Themeなら、 hugo new site してconfig.tomlでthemeを指定すれば大体それっぽく動くのだけど、Docsyはやや作りが複雑なようなので、Exampleサイトのソースを再利用した方が早そう。\ngit clone https://github.com/google/docsy-example.git mydocs cd mydocs git submodule update --init --recursive ","excerpt":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使 …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/docsy/","title":"Docsy"},{"body":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ページの追加 https://themes.gohugo.io//theme/hugo-theme-learn/en/cont/archetypes/ を参照。\n# Chapterページ hugo new path/to/chapter/_index.md --kind chapter # 普通のページ hugo new path/to/page.md  NOTE パスは content/ からの相対パス。  拡張記法 いくつかHugoの機能を拡張して便利記法を提供してくれているのかな？\nShortcodesに紹介されている。\n Mermaidによるフローチャート Hugoのサイト設定変数参照 etc.  などの機能がある。\n以下は例:\n注釈 {{% notice note %}} A notice disclaimer {{% /notice %}} note 以外に、 info, tip, warning が使える。\n","excerpt":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ペー …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/learn/","title":"LEARN"},{"body":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自作のテーマを載せるには、 https://github.com/gohugoio/hugoThemes/blob/master/README.md#adding-a-theme-to-the-list のガイドに従ってコントリビュートすると良い。\nChild Pages ","excerpt":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自 …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/","title":"Themes（テーマ）"},{"body":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。\n参考:\n HugoのビルドをGithub Actionで自動化する - 1ミリもわからん GitHub Actions による GitHub Pages への自動デプロイ - Qiita  …で、前々から目をつけていたHugoのテーマ「LEARN」を使うことにした。\nGoogleが去年公開したDocsyというテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。\nLEARNで気に入らなかったところ 少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。\n chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが） 検索が妙にヒットしすぎる ページの目次がちょっとわかりにくい。慣れれば問題ないけど  GitBookを試してみたけど、OSS版は先行きが微妙 GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。\n詳しくはSoftware \u0026gt; GitBookに書いた。\n手順:\nnpm install -g gitbook-cli mkdir new-docs cd $_ gitbook init gitbook serve 参考にした記事:\n GitBookによるドキュメント作成 - Qiita GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと gitbookの使い方 - Qiita  結局、Docsyへ azuさんがGitBookからDocusaurusに移行していたので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。\n4/26 プロフィールサイトのgulpがつらい 昨日、Docsyを扱うにあたって、UbuntuマシンのNode.jsをv8 -\u0026gt; v12に上げた。\nReferenceError: primordials is not defined 今日、プロフィールサイト https://progrhy.me の編集をしようとそのまま作業していたら、次とほぼ同じ問題に遭遇した。\n Node.js v12にアップデートするとgulp v4でもfs.jsで「ReferenceError: primordials is not defined」エラーが発生 - 毎日へっぽこ  自分の環境で問題になったのは natives module.\n% gulp fs.js:35 } = primordials; ^ ReferenceError: primordials is not defined at fs.js:35:5 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54: 10) at Object.\u0026lt;anonymous\u0026gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra ceful-fs/fs.js:1:37) at Module._compile (internal/modules/cjs/loader.js:1156:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1176:10) at Module.load (internal/modules/cjs/loader.js:1000:32) at Function.Module._load (internal/modules/cjs/loader.js:899:14) at Module.require (internal/modules/cjs/loader.js:1042:19) at require (internal/modules/cjs/helpers.js:77:18) 自分の場合も、上の記事と同じように、 package-lock.json 内に graceful-fs のv3系への依存があった。\nまた、依存の解消は難しいようだった。\n前回の挑戦から、gulpのバージョンアップは今のところ諦めているので、Node.jsのバージョンをv10系に下げることにした。\nReferenceError: internalBinding is not defined 次に出くわしたのは下のエラー:\n gulp利用時に「ReferenceError: internalBinding is not defined」のエラー - なるの備忘録  % gulp internal/util/inspect.js:31 const types = internalBinding('types'); ^ ReferenceError: internalBinding is not defined at internal/util/inspect.js:31:15 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12) at util.js:25:21 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12) at fs.js:42:21 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54: 10) at Object.\u0026lt;anonymous\u0026gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra ceful-fs/fs.js:1:37) 上の記事にあったように、 npm i natives@latest --no-save を実行したら解消した。\n","excerpt":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n …","ref":"/tech-notes/a/memo/2020/20200425/","title":"2020-04-25"},{"body":"3/18 Ubuntuでkrewを使ってkubectx/kubensをinstall kubectxをUbuntuにどうやって入れようかとREADMEを見ていたら、kubectlにはkrewというプラグイン管理システムがあるそうな。\nhttps://github.com/kubernetes-sigs/krew/\nhttps://krew.sigs.k8s.io/docs/user-guide/setup/install/ に従ってインストール\n## bash ( set -x; cd \u0026#34;$(mktemp -d)\u0026#34; \u0026amp;\u0026amp; curl -fsSLO \u0026#34;https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}\u0026#34; \u0026amp;\u0026amp; tar zxvf krew.tar.gz \u0026amp;\u0026amp; KREW=./krew-\u0026#34;$(uname | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;)_amd64\u0026#34; \u0026amp;\u0026amp; \u0026#34;$KREW\u0026#34; install --manifest=krew.yaml --archive=krew.tar.gz \u0026amp;\u0026amp; \u0026#34;$KREW\u0026#34; update ) ↓を.bashrcに追記\nexport PATH=\u0026#34;${KREW_ROOT:-$HOME/.krew}/bin:$PATH\u0026#34; …で、kubectx/kubensをinstall:\nkubectl krew install ctx kubectl krew install ns kubectx kubens ではなく kubectl ctx kubectx ns で使うことになる。\nGKEのIngressではGCSをバックエンドにできない kubernetesを使った開発のベストプラクティスを求めて - Qiita\nこの記事は2年4ヶ月前のものなのだが、自分で試してもできなかった。\n残念。\n","excerpt":"3/18 Ubuntuでkrewを使ってkubectx/kubensをinstall kubectxをUbuntuにどうやって入れようかとREADMEを見ていたら、kubectlにはkrewというプラ …","ref":"/tech-notes/a/memo/2020/20200318/","title":"2020-03-18"},{"body":"","excerpt":"","ref":"/tech-notes/a/memo/2020/","title":"2020 archive"},{"body":"  #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_1920x1080_fill_q75_catmullrom_top.jpg); } }  progrhyme\u0026#39;s Tech Notes IT技術についての公開メモ帳\nExplore Site   View Repository          ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/tech-notes/","title":"progrhyme's Tech Notes"},{"body":"","excerpt":"","ref":"/tech-notes/search/","title":"検索結果"}]