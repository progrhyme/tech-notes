[{"body":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE progrhyme’s Tech Wikiの後継となるサイトです。  作り方 静的サイトジェネレーターのHugoを使っています。\nテーマはDocsyです。\nソースコードはGitHubにあります。\nページ構成について 雑なメモはMemorandumの下に置いています。\nそれ以外も雑で気まぐれですが、なんとなく分類しています（予定）。 ときどきページ構成を工事することもあります。\nAbout Me  Profile Site Twitter: @progrhyme GitHub: @progrhyme progrhyme\u0026rsquo;s tech blog  姉妹サイト  progrhyme\u0026rsquo;s Wiki \u0026hellip; こちらもゆくゆくはGoogleサイト外に移行するかもしれませんが、2020-04-25現在は未定です。  ","excerpt":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE …","ref":"/tech-notes/a/","title":"progrhyme's Tech Notes"},{"body":"設定ファイルの記法等。\nv0.12以降に対応。\nv0.11以前は子ページを見よ。\n基本文法  https://www.terraform.io/docs/configuration/syntax.html  文字列  $ をそのまま文字列内で扱いたいときは \u0026quot;$$\u0026quot; とエスケープする。  変数管理 Variables https://www.terraform.io/docs/configuration/variables.html\nterraformで使用する変数は .tf ファイル内に variable ブロックで定義する。\n定義ブロック内で default 値を設定することもできるが、以下のいくつかの方法で値を注入できる。\n .tfvars ファイルに HCL or JSON で記述し、terraform実行時に -var-file \u0026lt;FILE\u0026gt; という引数で渡す  カレントディレクトリ直下の terraform.tfvars ファイルまたはsuffixが .auto.tfvars のファイルは自動的に読み込まれる。   terraform実行時に -var 'key=value' という引数で渡す 環境変数 TF_VAR_keyname を設定すると keyname 変数がセットされる  参考:\n Terraform で変数を使う - Qiita  Local Values https://www.terraform.io/docs/configuration/locals.html\nmodule内などのスコープで使える変数を定義する。\nvariableで定義した変数を参照したり、演算結果を使ったり出来るので便利。\n参考:\n 【モダンTerraform】VariableとLocal Valuesの使い分けについて - febc技術メモ  Expressions(v0.12〜) https://www.terraform.io/docs/configuration/expressions.html\nSplat https://www.terraform.io/docs/configuration/expressions.html#splat-expressions\n[*] によるリストの展開\nExamples\n# 1 var.list[*].id## for式による↑と等価な構文 [for o in var.list : o.id]# 2 var.list[*].interfaces[0].name## for式による↑と等価な構文 [for o in var.list : o.interfaces[0].name] Dynamic blocks https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks\nresource内のブロックの繰り返し記述をDRYに書けるようになった。\nExample:\nresource \u0026#34;aws_elastic_beanstalk_environment\u0026#34; \u0026#34;tfenvtest\u0026#34; { name = \u0026#34;tf-test-name\u0026#34; application = \u0026#34;${aws_elastic_beanstalk_application.tftest.name}\u0026#34; solution_stack_name = \u0026#34;64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\u0026#34; dynamic \u0026#34;setting\u0026#34; { for_each = var.settings content { namespace = setting.value[\u0026#34;namespace\u0026#34;] name = setting.value[\u0026#34;name\u0026#34;] value = setting.value[\u0026#34;value\u0026#34;] } } } ※あまり使いすぎない方がいいと書いてある。\nFunctions(v0.12〜) https://www.terraform.io/docs/configuration/functions.html\nv0.11以前は Interpolation Syntax だったもの。\nCollection concat https://www.terraform.io/docs/configuration/functions/concat.html\nlistの結合\nExamples:\n\u0026gt; concat([\u0026#34;a\u0026#34;, \u0026#34;\u0026#34;], [\u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;]) [ \u0026#34;a\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, ] Encoding jsondecode https://www.terraform.io/docs/configuration/functions/jsondecode.html\nJSONをデコードしてobject(map), tuple(list), stringなどを作る。\n逆の操作をする関数は jsonencode\nExamples:\n\u0026gt; jsondecode(\u0026#34;{\\\u0026#34;hello\\\u0026#34;: \\\u0026#34;world\\\u0026#34;}\u0026#34;) { \u0026#34;hello\u0026#34; = \u0026#34;world\u0026#34; } \u0026gt; jsondecode(\u0026#34;true\u0026#34;) true メタパラメータ https://www.terraform.io/docs/configuration/resources.html#meta-parameters\n全てのresourceで使えるパラメータ。\n count (int) \u0026hellip; リソースを作成する件数。 depends_on (list of strings) \u0026hellip; リソースやmoduleの依存関係を指定する。 lifecycle (block)  lifecycle このブロックは以下のキーを取る:\n create_before_destroy (bool) \u0026hellip; リソースを作り直すときに、元のを削除する前に 新しいリソースを作っておく。 prevent_destroy (bool) \u0026hellip; リソースの削除を防ぐ ignore_changes (list of strings) \u0026hellip; リソースの特定のパラメータの変化を無視する  例えば、AWS AutoScalinGroupで下のように設定しておくと、スケールアウトしたときにterraformを適用してもインスタンス数をリセットして事故になることを防ぐことができる。    resource \u0026#34;aws_autoscaling_group\u0026#34; \u0026#34;my_cluster\u0026#34; { min_size = 1 max_size = 10 desired_capacity = 1 lifecycle { ignore_changes = [\u0026#34;desired_capacity\u0026#34;] } } 参考:\n Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる - Qiita#リソースの差分を無視する  Workspaces https://www.terraform.io/docs/state/workspaces.html\n.tf ファイル内で ${terraform.workspace} でworkspace名を参照できる。\nExample:\nresource \u0026#34;aws_instance\u0026#34; \u0026#34;example\u0026#34; { count =\u0026#34;${terraform.workspace == \u0026#34;default\u0026#34; ? 5 : 1}\u0026#34;# ... other arguments } 参考:\n はじめてのTerraform 0.12 ～実践編～ | Future Tech Blog - フューチャーアーキテクト  Terraform https://www.terraform.io/docs/configuration/terraform.html\nTerraformの設定。\nExample:\nterraform { backend \u0026#34;s3\u0026#34; { : } required_version \u0026gt;= \u0026#34;0.12.0\u0026#34; } Backends https://www.terraform.io/docs/backends/\n S3 GCS  Partial Configuration https://www.terraform.io/docs/backends/config.html#partial-configuration\n一部の設定を .tf ファイルではなくコマンドラインや外部ファイルで渡す方式。\nModule レシピを module という単位にまとめて再利用性を高めることができる。\n https://www.terraform.io/docs/modules/usage.html https://www.terraform.io/docs/configuration/modules.html  Tips:\n module内では ${module.path} によってmoduleのルートパスを取得できる  相対パス . などでは上手く行かないケースがありそう    参考:\n terraform module内でtemplatefile関数を実行した際に、ファイルが見つけられなくて困った - Qiita  Data Source データを既存インフラや他のTerraform被管理物から取ってくる。\n https://www.terraform.io/docs/configuration/data-sources.html  Output moduleの属性値を他のmoduleで利用できるようにしたり、remote stateとして他の環境から参照可能にしたりする。\nhttps://www.terraform.io/docs/configuration/outputs.html\nChild Pages ","excerpt":"設定ファイルの記法等。\nv0.12以降に対応。\nv0.11以前は子ページを見よ。 …","ref":"/tech-notes/a/software/terraform/config/","title":"Configuration"},{"body":"","excerpt":"","ref":"/tech-notes/a/memo/","title":"Memorandum"},{"body":"https://www.terraform.io/docs/commands/\nimport https://www.terraform.io/docs/import/usage.html\nterraform import コマンドにより、既存インフラをTerraform管理下に置くことができる。\n一部インフラを手動で作った後、リソースのidを指定して取り込む、といった使い方ができる。\n参考:\n terraform importの使い方メモ - Qiita  plan https://www.terraform.io/docs/commands/plan.html\nExamples:\n# 対象を限定する terraform plan -target=resource_type1.identifier1 -target=resource_type2.identifier2 # planファイルを書き出す terraform plan -out=path/to/tfplan state https://www.terraform.io/docs/commands/state/\nstateの管理・編集を行うコマンド。\nSYNOPSIS:\nterraform state list [filtering-arg] # terraform管理下のリソース一覧 terraform state pull # リモートのstateファイルをダウンロードして標準出力に表示 terraform state push [OPTION] PATH # ローカルのstateファイルをリモートにアップロード terraform state mv SOURCE DESTINATION # リソースの名称変更。module化も可能 terraform state rm リソース # リソースをterraform管理から除く = tfstateファイルから削除 ","excerpt":"https://www.terraform.io/docs/commands/\nimport https://www.terraform.io/docs/import/usage.html …","ref":"/tech-notes/a/software/terraform/cli/","title":"CLI"},{"body":"","excerpt":"","ref":"/tech-notes/a/program/","title":"プログラミング"},{"body":" A \u0026ldquo;backend\u0026rdquo; in Terraform determines how state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc.\n gcs https://www.terraform.io/docs/backends/types/gcs.html\n 認証用の credentials または access_token が必要。  https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login で作成できるユーザのApplication Default Credentialsでも良い    s3 https://www.terraform.io/docs/backends/types/s3.html\n ロックしたいときはDynamoDBを使う。  オプション dynamodb_table を指定する    ","excerpt":" A \u0026ldquo;backend\u0026rdquo; in Terraform determines how state is loaded and how an operation such as …","ref":"/tech-notes/a/software/terraform/backend/","title":"Backends"},{"body":"","excerpt":"","ref":"/tech-notes/a/software/","title":"Software"},{"body":"HTTP https://www.terraform.io/docs/providers/http/\nhttp Data Source https://www.terraform.io/docs/providers/http/data_source.html\nSYNOPSIS:\ndata \u0026#34;http\u0026#34; \u0026#34;example\u0026#34; { url = \u0026#34;https://checkpoint-api.hashicorp.com/v1/check/terraform\u0026#34;# Optional request headers request_headers = { \u0026#34;Accept\u0026#34; = \u0026#34;application/json\u0026#34; } } curlで取ってくるようなデータはこれを使えばいい。\n参考:\n TerraformでJSONを扱う方法 - Qiita Getting my own Public IP : Terraform  Random https://www.terraform.io/docs/providers/random/\n乱数値の生成などで使える。\n生成した値はtfstateに保存され、生成時のパラメータが変わらない限り都度、生成することはない。\nResources:\n random_id :  Template https://www.terraform.io/docs/providers/template/\nExample:\n# Template for initial configuration bash script data \u0026#34;template_file\u0026#34; \u0026#34;init\u0026#34; { template = \u0026#34;${file(\u0026#34;init.tpl\u0026#34;)}\u0026#34; vars { consul_address = \u0026#34;${aws_instance.consul.private_ip}\u0026#34; } }# Create a web server resource \u0026#34;aws_instance\u0026#34; \u0026#34;web\u0026#34; {# ...  user_data = \u0026#34;${data.template_file.init.rendered}\u0026#34; } Child Pages（他のProviders） ","excerpt":"HTTP https://www.terraform.io/docs/providers/http/\nhttp Data Source …","ref":"/tech-notes/a/software/terraform/provider/","title":"Providers"},{"body":"","excerpt":"","ref":"/tech-notes/a/web-service/","title":"Webサービス"},{"body":"Provider Configuration  max_retries \u0026hellip; APIのリトライ回数を指定できる  Data Sources acm_certificate https://www.terraform.io/docs/providers/aws/d/acm_certificate.html\nACM証明書の情報取得\n参考:\n Terraform v0.7.9 でACMのデータソースが導入されました ｜ Developers.IO ACMで取得した証明書をterraformで配置する - tjinjin\u0026rsquo;s blog  caller_identity https://www.terraform.io/docs/providers/aws/d/caller_identity.html\nTerraform実行中のAWSアカウントのID等の情報を取得する。\n参考:\n *.tf 内で AWS アカウント ID を自動参照(取得)する aws_caller_identity Data Source - Qiita  iam_policy_document https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html\nIAM PolicyのJSONをHCLっぽく定義できる。\nJSONテンプレートより融通が効くし、syntax checkも掛かるので、便利なことがある。\nregion https://www.terraform.io/docs/providers/aws/d/region.html\nprovider で設定したリージョンを取得できる。\nsns_topic https://www.terraform.io/docs/providers/aws/d/sns_topic.html\nSNS TopicのARNを取得できる。\nssm_parameter https://www.terraform.io/docs/providers/aws/d/ssm_parameter.html\nEC2 Parameter Storeからデータ取得\n# \u0026#34;foo\u0026#34;という名前のパラメータストアを取得 data \u0026#34;aws_ssm_parameter\u0026#34; \u0026#34;foo\u0026#34; { name = \u0026#34;foo\u0026#34; }  SecureString であっても特にKSM keyを指定する必要はない。内部的にdecryptしてくれるみたい。  \u0026ldquo;terraformのstateの中ではraw textで保存されるから気をつけてね\u0026quot;って書いてある。    参考:\n terraform と パラメータストア - yBlog https://aws.amazon.com/jp/ec2/systems-manager/parameter-store/  Resources appautoscaling関連 Application AutoScaling.\nECS Serviceなどのオートスケール設定。\n https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html https://www.terraform.io/docs/providers/aws/r/appautoscaling_target.html  autoscaling関連  https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html https://www.terraform.io/docs/providers/aws/r/launch_configuration.html  cloudwatch関連  https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html  retention_in_days \u0026hellip; ログの保持期間。とり得る値は http://docs.aws.amazon.com/ja_jp/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html に示されている。 0 を指定すると無期限になる。   https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_subscription_filter.html  ElasticsearchやKinesisにサブスクライブするやつ   https://www.terraform.io/docs/providers/aws/r/cloudwatch_metric_alarm.html  CloudWatch Alarmによる監視の作成 namespaceに指定する値は https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/aws-namespaces.html を参照。 各namespaceで有効なmetric_nameやdimentionsフィールドの名前もAWSドキュメントを参照する。   https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_rule.html  schedule_expression の書式は http://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/events/ScheduledEvents.html   https://www.terraform.io/docs/providers/aws/r/cloudwatch_event_target.html  ec2関連  https://www.terraform.io/docs/providers/aws/r/ami.html https://www.terraform.io/docs/providers/aws/r/ebs_volume.html https://www.terraform.io/docs/providers/aws/r/eip.html https://www.terraform.io/docs/providers/aws/r/instance.html  ecs関連  https://www.terraform.io/docs/providers/aws/r/ecr_repository.html https://www.terraform.io/docs/providers/aws/r/ecr_repository_policy.html https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html https://www.terraform.io/docs/providers/aws/r/ecs_service.html  placement_strategy \u0026hellip; ECSタスク配置戦略。See https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task-placement-strategies.html   https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html  指定可能なパラメーターについては、タスク定義パラメーター - Amazon Elastic Container Service を参照。    動的ポートマッピングをする場合、task_definitionでhostPortを0にする:\n# ecs_task_definition.tf resource \u0026#34;aws_ecs_task_definition\u0026#34; \u0026#34;service\u0026#34; { : container_definitions = \u0026#34;${file(\u0026#34;task-definitions/service.json\u0026#34;)}\u0026#34; : }# task_definitions/service.json [ { : \u0026#34;portMappings\u0026#34;: [ { \u0026#34;containerPort\u0026#34;: 3000, \u0026#34;hostPort\u0026#34;: 0, ] }, : ] 参考:\n terraformで開発者個人別に自由にECSにコンテナをデプロイできる開発環境を用意する - Qiita TerraformでECS+ECRする話  elasticsearch関連  https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain.html  Exported Attributes:  domain_id \u0026hellip; ${AWSアカウントID}/${クラスタ名} . 監視のdimentionとしてはそのままでは使えない。     https://www.terraform.io/docs/providers/aws/r/elasticsearch_domain_policy.html  iam関連  https://www.terraform.io/docs/providers/aws/r/iam_access_key.html https://www.terraform.io/docs/providers/aws/r/iam_group.html https://www.terraform.io/docs/providers/aws/r/iam_group_policy_attachment.html https://www.terraform.io/docs/providers/aws/r/iam_instance_profile.html https://www.terraform.io/docs/providers/aws/r/iam_policy.html https://www.terraform.io/docs/providers/aws/r/iam_role.html https://www.terraform.io/docs/providers/aws/r/iam_role_policy.html https://www.terraform.io/docs/providers/aws/r/iam_user.html https://www.terraform.io/docs/providers/aws/r/iam_user_policy.html \u0026hellip; 当該IAM Userにだけつけるインラインポリシー https://www.terraform.io/docs/providers/aws/r/iam_user_policy_attachment.html policyとroleの紐付け  https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html  policy : roleが1対多。コード化されていないroleへの紐付けは削除される。   https://www.terraform.io/docs/providers/aws/r/iam_role_policy_attachment.html  policy : roleが1対1.      kms関連  https://www.terraform.io/docs/providers/aws/r/kms_alias.html \u0026hellip; alias for KMS key https://www.terraform.io/docs/providers/aws/r/kms_key.html \u0026hellip; KMS master keyの作成・管理  lambda関連  https://www.terraform.io/docs/providers/aws/r/lambda_function.html  runtime \u0026hellip; 利用できるruntimeについては CreateFunction - AWS Lambda を見る。   https://www.terraform.io/docs/providers/aws/r/lambda_permission.html  マネジメントコンソールだと\u0026quot;Triggers\u0026quot;のタブ 許可したリソースからLambdaを実行することができる    lb関連 ALB等の作成・管理:\n https://www.terraform.io/docs/providers/aws/r/lb.html https://www.terraform.io/docs/providers/aws/r/lb_listener.html https://www.terraform.io/docs/providers/aws/r/lb_target_group.html  CLB:\n https://www.terraform.io/docs/providers/aws/r/elb.html  rds関連  https://www.terraform.io/docs/providers/aws/r/db_event_subscription.html \u0026hellip; RDSイベント通知 https://www.terraform.io/docs/providers/aws/r/rds_cluster.html \u0026hellip; Aurora用(?) https://www.terraform.io/docs/providers/aws/r/rds_cluster_instance.html \u0026hellip; Aurora用(?) https://www.terraform.io/docs/providers/aws/r/db_instance.html ~~https://www.terraform.io/docs/providers/aws/r/db_subnet_group.html~~ \u0026hellip; これはEC2 Classic用でもう使うことはなさそう。 https://www.terraform.io/docs/providers/aws/r/db_security_group.html https://www.terraform.io/docs/providers/aws/r/rds_cluster_parameter_group.html https://www.terraform.io/docs/providers/aws/r/db_parameter_group.html  route53関連  https://www.terraform.io/docs/providers/aws/r/route53_zone.html  vpc_id を指定するとPrivate Hosted Zoneになる。 delegation_set_id を指定するとPublic Hosted Zoneになる。   https://www.terraform.io/docs/providers/aws/r/route53_record.html  Route53のDNSレコード作成・管理    s3関連  https://www.terraform.io/docs/providers/aws/r/s3_bucket.html https://www.terraform.io/docs/providers/aws/r/s3_bucket_policy.html  sns関連  https://www.terraform.io/docs/providers/aws/r/sns_topic.html https://www.terraform.io/docs/providers/aws/r/sns_topic_policy.html https://www.terraform.io/docs/providers/aws/r/sns_topic_subscription.html  ※emailのサブスクリプションは作成できない。メール認証が必要なので。    vpc関連  https://www.terraform.io/docs/providers/aws/r/default_route_table.html  これはimportに対応していない route_table + main_route_table_associationで代替できそう   https://www.terraform.io/docs/providers/aws/r/main_route_table_assoc.html https://www.terraform.io/docs/providers/aws/r/route.html  route_tableと一緒に使うとまずそう   https://www.terraform.io/docs/providers/aws/r/route_table.html https://www.terraform.io/docs/providers/aws/r/subnet.html https://www.terraform.io/docs/providers/aws/r/vpc.html  Route 53のPrivate DNSを使うには、 enable_dns_hostnames, enable_dns_support を true にする。    budgets_budget https://www.terraform.io/docs/providers/aws/r/budgets_budget.html\nBudgetにコストアラートを設定できたり。\ndynamodb_table https://www.terraform.io/docs/providers/aws/r/dynamodb_table.html\nDynamoDB table作成\nsecurity_group https://www.terraform.io/docs/providers/aws/r/security_group.html\nSecurity Groupの作成・管理\nsqs_queue https://www.terraform.io/docs/providers/aws/r/sqs_queue.html\nSQS Queueの作成・管理\nssm_parameter https://www.terraform.io/docs/providers/aws/r/ssm_parameter.html\nEC2 Parameter Storeにデータを保存する。\n","excerpt":"Provider Configuration  max_retries \u0026hellip; APIのリトライ回数を指定できる  Data Sources acm_certificate …","ref":"/tech-notes/a/software/terraform/provider/aws/","title":"AWS"},{"body":"Resources compute系  google_compute_backend_bucket \u0026hellip; HTTP(S) LBのバックエンドになるGCSバケット設定 google_compute_backend_service \u0026hellip; GCLBのバックエンドになるサービスの設定 google_compute_health_check \u0026hellip; ヘルスチェック google_compute_managed_ssl_certificate \u0026hellip; β (2020-03-18) HTTPS LBのためのマネージドTLS証明書 google_compute_security_policy \u0026hellip; Cloud Armorのセキュリティポリシー  storage (GCS) 系  google_storage_bucket \u0026hellip; GCS (Cloud Storage) バケット google_storage_bucket_object \u0026hellip; GCSオブジェクト。ローカルのファイルからアップロードできる  google_cloudfunctions_function https://www.terraform.io/docs/providers/google/r/cloudfunctions_function.html\nCloud Function作成・管理\ngoogle_project_service https://www.terraform.io/docs/providers/google/r/google_project_service.html\nAPIサービスの有効化\n","excerpt":"Resources compute系  google_compute_backend_bucket \u0026hellip; HTTP(S) LBのバックエンドになるGCS …","ref":"/tech-notes/a/software/terraform/provider/google/","title":"Google"},{"body":"便利構文 https://www.terraform.io/docs/configuration/interpolation.html\n計算とか制御構文とか便利関数が有る。\nelement(list, index) listの要素を取得。\n最初の要素のindexは0.\nfile(path) content = \u0026#34;${file(path/to/file)}\u0026#34;# ファイルの内容を取り込む format(format, args, \u0026hellip;) url = \u0026#34;${format(\u0026#34;https://%s/%s\u0026#34;, var.fqdn, var.path)}\u0026#34; formatlist(format, args, \u0026hellip;) formatのlist版。 args... としてlistを受け取り、list値を返す。\nurls = \u0026#34;${formatlist(\u0026#34;https://%s/\u0026#34;, var.fqdn_list)}\u0026#34; lookup(map, key [, default]) mapの key に対するvalueを参照する。第3引数に見つからなかったときの default 値を指定することもできる。\n1階層のmapは stash[\u0026quot;x\u0026quot;] で良いが、デフォルト値を設定したいときや、2階層のmapでは lookup を使う必要がある。\nv = \u0026#34;${lookup(var.stash[\u0026#34;x\u0026#34;], \u0026#34;y\u0026#34;, \u0026#34;default-value\u0026#34;)}\u0026#34; keys(map) mapのキーをソート済みのlistとして返す。See also values\nmap(key, value, \u0026hellip;) mapを作る。\noutput \u0026#34;result\u0026#34; { value = \u0026#34;${map( \u0026#34;key-1\u0026#34;, \u0026#34;${value-1}\u0026#34;, \u0026#34;key-2\u0026#34;, \u0026#34;${value-2}\u0026#34;, : )}\u0026#34; } split(delim, string) 文字列をデリミタ文字で分割してlistを返す。\nExample:\n\u0026#34;${element(split(\u0026#34;/\u0026#34;, \u0026#34;dir/file\u0026#34;), 1)}\u0026#34; #=\u0026gt; \u0026#34;file\u0026#34; values(map) mapの値をlistとして返す。得られる値の順序は、対応するキーのlistが keys で返される順序と同じになるようである。\n","excerpt":"便利構文 https://www.terraform.io/docs/configuration/interpolation.html\n計算とか制御構文とか便利関数が有る。\nelement(list, …","ref":"/tech-notes/a/software/terraform/config/v0.11/","title":"v0.11"},{"body":"Getting Started  初心者向けガイド: https://www.terraform.io/guides/ ドキュメント: https://www.terraform.io/docs/  参考:\n terraform使い方(超基礎編) - Qiita  仕様 State https://www.terraform.io/docs/state/\nLocking https://www.terraform.io/docs/state/locking.html\nbackendによってサポートされていれば、排他制御が可能。\nExamples 公式のを見ると良い。\n https://github.com/hashicorp/terraform/tree/master/examples  AWS: https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples    ベストプラクティス 公式: https://github.com/hashicorp/best-practices/tree/master/terraform\n   Terraform Version 記事     v0.10 Terraform Best Practices in 2017 - Qiita   v0.7.x Terraformにおけるディレクトリ構造のベストプラクティス ｜ Developers.IO    オレオレ:\n TerraformでWorkspaceを使わずに複数環境をDRYに設定する - Qiita \u0026hellip; Terraform v0.10〜v0.11ぐらい対応  参考:\n Structuring HashiCorp Terraform Configuration for Production \u0026hellip; 2020-03-27. Workspacesを使わずにディレクトリを分けることのメリットが述べられている。  How-to バージョン固定 Terraform Settings - Configuration Language - Terraform by HashiCorp\nExamples:\nterraform { required_version =\u0026#34;\u0026gt;= 0.12\u0026#34; required_providers { aws =\u0026#34;\u0026gt;= 2.8\u0026#34; local = \u0026#34;1.2\u0026#34; } } provider \u0026#34;http\u0026#34; { version = \u0026#34;1.2.0\u0026#34; }  terraformのversion指定はtfenvでも可能  参考:\n tfupdateでTerraform本体/プロバイダ/モジュールのバージョンアップを自動化する - Qiita  BackendのS3やGCS等そのものをTerraformで管理 参考:\n Backend の S3 や DynamoDB 自体を terraform で管理するセットアップ方法 - Qiita  Tips デバッグ https://www.terraform.io/docs/internals/debugging.html\nログレベルの変更 TF_LOG 環境変数に TRACE, DEBUG, INFO, WARN, ERROR のいずれかをセットすることで変更できる。\nTF_LOG=DEBUG terraform plan ※しかし、どれを指定してもtraceレベルのログが出る気が…(v0.10.x)\ncountを使って複数のリソースを作成 Examples:\nvariable \u0026#34;instance_ips\u0026#34; { default = { \u0026#34;0\u0026#34; = \u0026#34;10.11.12.100\u0026#34; \u0026#34;1\u0026#34; = \u0026#34;10.11.12.101\u0026#34; \u0026#34;2\u0026#34; = \u0026#34;10.11.12.102\u0026#34; } } resource \u0026#34;aws_instance\u0026#34; \u0026#34;app\u0026#34; { count = \u0026#34;3\u0026#34; private_ip = \u0026#34;${lookup(var.instance_ips, count.index)}\u0026#34;# ... } variable \u0026#34;rds_roles\u0026#34; { default = [\u0026#34;WRITER\u0026#34;, \u0026#34;READER\u0026#34;] } resource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;rds_cpu\u0026#34; { count = \u0026#34;2\u0026#34; alarm_name = \u0026#34;RDS-${var.rds_roles[count.index]}-CPU\u0026#34; : } 参考:\n https://www.terraform.io/docs/configuration/resources.html#using-variables-with-count terraformでautoscalingしているサーバのcloudwatch alarmを自動設定する - Qiita Terraform でループして複数のリソースを作成する - Qiita  変数やoutputでmapを使うと記述量が減って便利 参考:\n Terraformのoutputでmapを利用する方法 - Qiita  mapのlistを作る方法  A hacky way to create a dynamic list of maps in Terraform  できない説  Cannot pass a list of maps to a resource/data · Issue #7705 · hashicorp/terraform Terraform でループして複数のリソースを作成する - Qiita  …が、手元で試したところ(v0.10.x)、下のようにしてlistとして定義・参照することができた。\nvariable \u0026#34;my_complex_data\u0026#34; { type = \u0026#34;list\u0026#34; default = [ { id = \u0026#34;1\u0026#34; name = \u0026#34;taro\u0026#34; height = \u0026#34;170\u0026#34; }, { id = \u0026#34;2\u0026#34; name = \u0026#34;hanako\u0026#34; height = \u0026#34;160\u0026#34; }, ] } foo_list = \u0026#34;${var.my_complex_data}\u0026#34; Tools 3rd Partyのツール\ntfenv https://github.com/Zordrak/tfenv\nrbenv, anyenvのようなツールで、複数バージョンのterraformを切り替えて使えるようになるもの。\n参考:\n tfenvでTerraformのバージョン管理をする - Qiita  参考  Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる - Qiita  ","excerpt":"Getting Started  初心者向けガイド: https://www.terraform.io/guides/ ドキュメント: https://www.terraform.io/docs/   …","ref":"/tech-notes/a/software/terraform/","title":"Terraform"},{"body":"Documentation https://docs.npmjs.com/\n CLI documentation | npm Documentation  CLI Examples:\n# help npm help npm help \u0026lt;command\u0026gt; # バージョン表示 npm -v npm-install https://docs.npmjs.com/cli-commands/install.html\nパッケージをインストールする。\nエイリアス: i, add\n# 書式 npm install パッケージ [OPTIONS] npm install [\u0026lt;@scope\u0026gt;/]\u0026lt;name\u0026gt; npm install [\u0026lt;@scope\u0026gt;/]\u0026lt;name\u0026gt;@\u0026lt;version\u0026gt; # package.json に従ってインストール npm install    Option 説明     -g \u0026ndash;global   \u0026ndash;no-save （package.jsonの）dependencies に追加しない    npm-ls https://docs.npmjs.com/cli-commands/ls.html\nインストールされたパッケージを一覧表示。\nエイリアス: list, la, ll\nnpm ls [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...] npm-uninstall https://docs.npmjs.com/cli-commands/uninstall.html\nインストールされたパッケージを削除する。\nエイリアス: remove, rm, un, unlink\nnpm uninstall パッケージ [OPTIONS] ","excerpt":"Documentation https://docs.npmjs.com/\n CLI documentation | npm Documentation  CLI Examples:\n# help …","ref":"/tech-notes/a/program/lang/js/node/npm/","title":"npm"},{"body":"Documentation  https://nodejs.org/api/  パッケージマネージャー  npm Yarn  Node.jsのバージョン管理  nodebrew nvm  Modules util https://nodejs.org/api/util.html\nutil.format https://nodejs.org/api/util.html#util_util_format_format_args\nprintfみたいなやつ。\nconsole.logなどが内部的に利用しているそうだ。\n参考:\n %o 便利 - Qiita  package.json プロジェクトで使うNode.js modulesを管理するためのファイル。\nバージョン記法 参考:\n package.json のチルダ(~) とキャレット(^) - Qiita  チルダ表記 ~ 明記したところ以下のバージョンがあがることのみ許容\n ~1.1.2 = 1.1.2 \u0026lt;= version \u0026lt; 1.2.0 ~1.1 = 1.1.x ~1 = 1.x  オリジナルの定義は、\n Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.\n キャレット表記 ^ 一番左側にある、ゼロでないバージョニングは変えない (それ以下があがることは許容)\n ^1.2.3 := 1.2.3 \u0026lt;= version \u0026lt; 2.0.0 ^0.2.3 := 0.2.3 \u0026lt;= version \u0026lt; 0.3.0 ^0.0.3 := 0.0.3 \u0026lt;= version \u0026lt; 0.0.4  オリジナルの定義は\n Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple.\n ","excerpt":"Documentation  https://nodejs.org/api/  パッケージマネージャー  npm Yarn  Node.jsのバージョン管理  nodebrew nvm …","ref":"/tech-notes/a/program/lang/js/node/","title":"Node.js"},{"body":"JavaScript | MDN\nGetting Started  JavaScript ガイド - JavaScript | MDN  Reference:\n JavaScript リファレンス - JavaScript | MDN JavaScript and HTML DOM Reference  コーディング規約:\n Google JavaScript Style Guide  非公式和訳: Google JavaScript Style Guide 和訳 — Google JavaScript Style Guide 和訳   https://github.com/felixge/node-style-guide 参考まとめ:  JavaScriptのスタイルガイドまとめ(おすすめ4選) - Qiita    Reference Date https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date\nJSON https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON\nSYNOPSIS:\nconst obj = JSON.parse(str) const str = JSON.stringify(obj) Tips デバッグ  debugger; 文を埋め込む。  参考:\n JavaScriptのデバッグ方法 – JSを嫌いにならないためのTips | プログラミング | POSTD  日付と時刻の計算  【JavaScript】日付処理 - Qiita 日付と時刻の計算 (JavaScript)  Topics var, let, constの使い分け 2017年12月現在、イマイチよくわかっていない。\n参考:\n JavaScriptにおけるvar/let/constの使い分け  sprintfなさそう Node.jsだとutilがある:\n https://nodejs.org/api/util.html  npmもある:\n https://www.npmjs.com/package/sprintf  \u0026ldquo;0\u0026quot;埋めとか半角スペースで埋める方法としては substr を使った例が出て来る:\n Javascriptで文字列の０埋め、空白で右寄せでフォーマット - それマグで！  自作関数を作る例も出てくる:\n Javascriptで日付・時刻をフォーマット表示 - Qiita 日付フォーマットなど 日付系処理 - Qiita  日付時刻については、固定フォーマットで出力する関数はある。\n参考:\n 日付と時刻文字列 (JavaScript) 【Javascript入門】日付のフォーマット処理まとめ | 侍エンジニア塾ブログ | プログラミング入門者向け学習情報サイト  ","excerpt":"JavaScript | MDN\nGetting Started  JavaScript ガイド - JavaScript | MDN  Reference:\n JavaScript リファレンス - …","ref":"/tech-notes/a/program/lang/js/","title":"JavaScript"},{"body":"Ubuntu https://github.com/golang/go/wiki/Ubuntu\n2018年以前ぐらいまではtarballからインストールしていたと思うが、2020-04-26現在は、apt installが可能になっている。\n以下は最新版をインストールする手順:\nsudo add-apt-repository ppa:longsleep/golang-backports sudo apt update sudo apt install golang-go ","excerpt":"Ubuntu https://github.com/golang/go/wiki/Ubuntu\n2018年以前ぐらいまではtarballからインストールしていたと思うが、2020-04-26現在 …","ref":"/tech-notes/a/program/lang/go/install/","title":"Install"},{"body":" Marketplace \u0026hellip; 公開されているactionを見つけられる。  Actionとは About actions - GitHub Help\nactionはワークフローで実行される処理（タスク）を再利用可能な形にパッケージしたものである。\nActionの形式 https://help.github.com/en/actions/building-actions/about-actions#types-of-actions\n   Type Operating system     Docker container Linux   JavaScript Linux, MacOS, Windows    ワークフローからの利用 https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#referencing-actions-in-your-workflow\nワークフローからは、次のロケーションのactionが利用できる:\n 公開リポジトリ 同リポジトリ内で参照できるもの Docker Hubに公開されたDockerイメージ  公式Actions GitHub公式のactionはたぶん https://github.com/actions にあるもの。\ncheckout https://github.com/actions/checkout\nリポジトリをチェックアウトする。\nおそらくほとんどのワークフローから利用される。\nExample:\n- uses:actions/checkout@v2with:# Number of commits to fetch. 0 indicates all history.# Default: 1fetch-depth:0# Whether to checkout submodules: `true` to checkout submodules or `recursive` to# recursively checkout submodules.## Default: falsesubmodules:truesetup-node https://github.com/actions/setup-node/\nNode.jsをセットアップ。\nBasic:\nsteps:- uses:actions/checkout@v2- uses:actions/setup-node@v1with:node-version:\u0026#39;10.x\u0026#39;- run:npminstall- run:npmtestMatrix Testing:\njobs:build:runs-on:ubuntu-18.04strategy:matrix:node:[\u0026#39;10.x\u0026#39;,\u0026#39;12.x\u0026#39;]name:Node${{matrix.node}}samplesteps:- uses:actions/checkout@v2- name:Setupnodeuses:actions/setup-node@v1with:node-version:${{matrix.node}}- run:npminstall- run:npmtest参考:\n GitHub ActionsでのNode.jsの利用 - GitHub ヘルプ https://github.com/actions/starter-workflows/blob/master/ci/node.js.yml  3rd Party Actions peaceiris/actions-gh-pages https://github.com/peaceiris/actions-gh-pages\nGitHub Pagesに公開するaction.\nExample:\n- uses:peaceiris/actions-gh-pages@v3with:github_token:${{secrets.GITHUB_TOKEN}}publish_dir:./public#publish_branch: master # default: gh-pagespeaceiris/actions-hugo https://github.com/peaceiris/actions-hugo\nランナー上にHugoをインストールする。\nExample:\n- name:SetupHugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.68.3\u0026#39;# extended: true- name:Buildrun:hugo--minifyTips:\n extended: true でHugoの拡張版をインストール hugo-version: latest で最新版を使う  ","excerpt":"Marketplace \u0026hellip; 公開されているactionを見つけられる。  Actionとは About actions - GitHub Help\nactionはワークフローで実行される …","ref":"/tech-notes/a/web-service/github/action/action/","title":"Actions（タスク）"},{"body":"CI/CD等のワークフローを自動実行できるサービス。\n2019年11月に正式リリースされた。\nDocumentation https://help.github.com/en/actions\n Workflow syntax for GitHub Actions - GitHub Help  Getting Started https://github.com/actions/starter-workflows \u0026hellip; 初心者向けワークフローサンプル集\nWorkflowの作成 https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow\n プロジェクトの .github/workflows/ ディレクトリ下にYAMLファイルを作成する pushをトリガーにしたり、定期的に実行したりできる  See https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on    対象branchやpathをフィルタする Example:\non:push:branches:- master- \u0026#39;releases/**\u0026#39;- \u0026#39;!releases/**-alpha\u0026#39;# alpha版は含めないtags:- v1# file paths to consider in the event. Optional; defaults to all.paths:- \u0026#39;test/*\u0026#39;paths-ignore:- \u0026#39;docs/**\u0026#39;リファレンス:\n branchやtagについて -\u0026gt; on.\u0026lt;push|pull_request\u0026gt;.\u0026lt;branches|tags\u0026gt; pathについて -\u0026gt; on.\u0026lt;push|pull_request\u0026gt;.paths  複数の実行環境に対応する 複数のOSプラットフォームや、ランタイムのバージョンに対応する方法。\n下のようなbuild matrixを設定すると良い。\nExample:\nruns-on:${{matrix.os}}strategy:matrix:os:[ubuntu-16.04,ubuntu-18.04]node:[6,8,10]変数やシークレットの利用 https://help.github.com/en/actions/configuring-and-managing-workflows/using-variables-and-secrets-in-a-workflow\nGITHUB_TOKENによる認証 Authenticating with the GITHUB_TOKEN - GitHub Help\n GitHubは、ワークフローで利用する GITHUB_TOKEN シークレットを自動的に生成します。 この GITHUB_TOKEN は、ワークフローの実行内での認証に利用できます。\n ","excerpt":"CI/CD等のワークフローを自動実行できるサービス。\n2019年11月に正式リリースされた。\nDocumentation https://help.github.com/en/actions …","ref":"/tech-notes/a/web-service/github/action/","title":"GitHub Actions"},{"body":"Documentation https://help.github.com/\n 邦訳: https://help.github.com/ja  Child Pages ","excerpt":"Documentation https://help.github.com/\n 邦訳: https://help.github.com/ja  Child Pages ","ref":"/tech-notes/a/web-service/github/","title":"GitHub"},{"body":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var privateVar string = \u0026#34;this is private\u0026#34; // 外部から見えない var PublicVar string = \u0026#34;this is public\u0026#34; // 外部から見える 参考:\n Go言語のスコープについて - ryochack.clipboard  データ型 https://golang.org/ref/spec#Types\n配列・スライス 配列は固定長。スライスは可変長。\na := [...]int{1, 2, 3} // 配列  s1 := []int{1, 2, 3} // スライス s2 := []int{5, 6, 7} // スライスの結合 s1 = append(s1, 4) s1 = append(s1, s2...) // スライス同士の結合では \u0026#34;...\u0026#34; が必要 \u0026ldquo;Slicing\u0026quot;というテクニックで配列をスライスに変換できる。\na := [5]byte{\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;} s := a[:] // aを参照するスライス 参考:\n Go Slices: usage and internals - The Go Blog Go言語のArrayとSliceについて - done is better than perfect Goでsliceに要素追加, slice同士の結合 - Qiita  map 初期値はnilで、データを入れようとするとパニックが起こるので、事前に割当てが必要。\n// NG var ages map[string]int ages[\u0026#34;carol\u0026#34;] = 21 // OK var ages map[string]int ages = make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 // OK ages := make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 要素取得時のヒット検査 age, ok := ages[\u0026#34;bob\u0026#34;] if ok { // hit } else { // miss } 構造体 初期化 // 例 type Foo struct { Name string Age int } // (1) f := Foo{} f.Name = \u0026#34;foo\u0026#34; f.Age = 5 // (2) f := Foo{\u0026#34;foo\u0026#34;, 5} // 全てのフィールドの指定が必要  // (3) f := Foo{Age: 5, Name: \u0026#34;foo\u0026#34;} // 任意フィールドの省略が可能。順番も入れ替え可能 もし構造体に初期値を設定したい場合、コンストラクタ的な専用の関数を作る必要があるっぽい。\n参考:\n [Go] 構造体の初期化方法まとめ - Qiita 【Go】structにデフォルトの値を設定したい - /dev/null  日付・時刻 日時フォーマット Go言語の日時のフォーマット関数（timeパッケージのfunc (Time) Format)）に与えられる引数は、2006-01-02T15:04:05（月曜）の日時となっている。\nこれはアメリカで時刻を表記する際の順番で、1月2日午後3時4分5秒2006年となり、わかりやすかったからだそうだ。\n参考:\n Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？ - Qiita  ポインタ 参考:\n Goでxxxのポインタを取っているプログラムはだいたい全部間違っている - Qiita  goroutine OSのネイティブスレッドより扱いやすくしたもの。 スレッドとファイバーの良いとこ取り。 go というキーワードを付けるとgoroutineが作られる。\nExamples:\n// 別のgoroutineを作って既存関数を実行 go Function() // 別のgoroutineを作って、無名関数を実行 go func() { // goroutine内で実行したい処理 } 参考:\n Go言語で非同期処理の結果を受け取る - Qiita  チャネル SYNOPSIS:\n// バッファなし tasks := make(chan string) // バッファ付き tasks := make(chan string, 10) // データ送信 tasks \u0026lt;- \u0026#34;cmake ..\u0026#34; tasks \u0026lt;- \u0026#34;cmake . --build Debug\u0026#34; // データ受信 task := \u0026lt;-tasks // データ受信 + クローズ判定 task, ok := \u0026lt;-tasks // データを読み捨てる \u0026lt;-wait Examples:\n https://gobyexample.com/channels  select文 複数のチャネルを待機する場合に使う。\nExamples:\n// ブロックせずに受信し、かつ、チャネルがクローズ済みかどうかチェックする select { case v, ok := \u0026lt;- ch: if ok { fmt.Println(v) } else { fmt.Println(\u0026#34;closed\u0026#34;) } default: fmt.Println(\u0026#34;no value\u0026#34;) } // ブロックせずに送信 select { case ch \u0026lt;- v: fmt.Println(\u0026#34;sent\u0026#34;) default: fmt.Println(\u0026#34;no capacity\u0026#34;) } 参考:\n Go言語でチャネルとselect - Qiita select - はじめてのGo言語  文法 ループ Examples:\nfor { // 無限ループ } for i := 1; i \u0026lt; 100; i++ { // iが[1, 100)の間 } // collection要素のイテレーション dayOfWeeks := [...]string{\u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;, \u0026#34;日\u0026#34;} for arrayIndex, dayOfWeek := range dayOfWeeks { fmt.Printf(\u0026#34;%d番目の曜日は%s曜日です。\\n\u0026#34;, arrayIndex + 1, dayOfWeek) } ※mapをイテレーションする場合、取り出し順はランダムになる。\n参考:\n 繰り返し - はじめてのGo言語  パッケージ init()関数による初期化  ソースファイルに1つ func init() を記述できる ソースファイル読み込み時に1回実行される importされるpackageのinit()が先に実行される  pがqをimportしているとき、pのinit()より先にqのinit()が完了している mainパッケージのinit()が最後に実行される    参考:\n Effective Go - golang.jp  ","excerpt":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var …","ref":"/tech-notes/a/program/lang/go/spec/","title":"言語仕様"},{"body":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html   http://golang-jp.org/ \u0026hellip; golang.orgの日本語訳プロジェクト  3rd Party がまとめた資料  GoのためのGo Go Language Programs, Tutorial, Articles and Examples  Play Ground Sandbox https://play.golang.org/\n記事  6年間におけるGoのベストプラクティス | プログラミング | POSTD  開発ツール goimports https://godoc.org/golang.org/x/tools/cmd/goimports\nInstall:\ngo get golang.org/x/tools/cmd/goimports goimports というコマンドが入る。\ngo fmt のときに使われてないpkgの import 文を削除してくれる。\nGoglandだと Settings \u0026gt; Go \u0026gt; On Save \u0026gt; On save run で設定できる。\n参考:\n goのimportを自動的に追加/削除してくれる「goimports」を試してみた - Misc Notes Gogland で保存時に go fmt を走らせる - Qiita  ビルトイン関数 append https://golang.org/pkg/builtin/#append\nfunc append(slice []Type, elems ...Type) []Type\nsliceに要素、またはsliceを結合し、新たなsliceを返す。\nslice = append(slice, elem1, elem2) slice = append(slice, anotherSlice...) Topics vendoring アプリケーションなどで、依存パッケージを管理する仕組み。\nGo 1.6から正式にサポートされた。\nGo 1.5ではexperimental扱いで、有効化するには環境変数 GO15VENDOREXPERIMENT を設定してコンパイルする必要がある。\nvendoringのためのツールとして、glideやgomなどがある。\n参考:\n 今更だけどGoのVendoringについて思いをはせる - Qiita go vendoring - 隙あらば寝る Glide で Go 言語のパッケージ管理と vendoring - Librabuch  enum Goにはenumがない。\nintの独自型を定義するのがイディオムになっている。\ntype Fruit int const ( Apple Fruit = iota Orange Banana ) var myFruit Fruit この独自型に対して String() メソッドを実装しておくと、名前が引けて便利:\nfunc (f Fruit) String() string { switch f { case Apple: return \u0026#34;Apple\u0026#34; case Orange: return \u0026#34;Orange\u0026#34; case Banana: return \u0026#34;Banana\u0026#34; default: return \u0026#34;Unknown\u0026#34; } } golang.org/x/tools/cmd/stringer で String() メソッドを含むコードを自動生成することもできる。\n参考:\n GoのEnumイディオム - Qiita Big Sky :: Re: GoLangでJavaのenumっぽいライブラリ作った話 Ten Useful Techniques in Go – Fatih Arslan https://godoc.org/golang.org/x/tools/cmd/stringer  build https://golang.org/pkg/go/build/\nBuild Constraints という機能は「build tag」としても知られている。\nこんなの:\n// (A) // +build foo  // (B) // +build !foo (A) go build -tags=foo でビルドされる。\n(B) go build でビルドされる。\n参考:\n go build -tagsを使ってRelease/Debugを切り替える - flyhigh  プロファイリング  runtime/pprofという標準pkgを使うのが基本な感じ。  その内 標準パッケージ - progrhyme\u0026rsquo;s Tech Wiki に書くと思う。   runtimeのデバッグに役立つ環境変数の話:  GODEBUG | Dave Cheney    参考:\n Profiling Go Programs - The Go Blog \u0026hellip; pprof golangで書かれたプログラムのメモリ使用状況を見る - hakobe-blog ♨ \u0026hellip; pprof, net/http/pprof golang profiling の基礎 \u0026hellip; pprof他 golangパフォーマンス3: mapとGC - Qiita  Child Pages ","excerpt":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html …","ref":"/tech-notes/a/program/lang/go/","title":"Go"},{"body":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶということがどういうことかをまとめる。\n 文法  ソースコードの構造、形式  ステートメント  区切り文字   コメント 式 演算子 キーワード リテラル  数値, 文字列, ヒアドキュメント, etc.   その他記号   数値演算 プリミティブな文字列処理  結合, 分解, 書式, \u0026hellip;   型 制御構文  ループ 条件分岐   例外処理 関数 構造体, 拡張型 オブジェクト 外部ファイルの利用   言語機能  基本的なデータ型  配列 連想配列(マッピング構造体, ハッシュ)   日付、時刻、時間 標準入出力 ファイル入出力 テキスト処理  正規表現 エンコーディング マルチバイト文字対応   オブジェクト指向プログラミング  クラス, メソッド 継承 Mixin オーバーライド, オーバーロード   バイナリ処理 並行処理 関数型プログラミング  高階関数 curry化 クロージャ, 無名関数, lambda式   ライブラリの利用  標準ライブラリ 3rd Partyのライブラリ   テスト メタプログラミング  リフレクション ジェネリクス     実行  対話IFによる実行  REPL     テスト  単体テスト フレームワーク, ライブラリ   典型的な問題解決  乱数 典型的アルゴリズム  ソート, ハッシュ表, etc.   典型的データ構造  連結リスト, 木, グラフ, etc.     プログラミング手法  ダックタイピング   デバッグ プロファイリング 内部構造  実行プロセス  スレッド   コンパイラ インタープリタ VM GC  アルゴリズム     ソフトウェア開発  CLI バッチ処理 デーモン ライブラリ Webアプリケーション システムプログラミング etc.   開発環境・ツール  エディタ IDE   コミュニティ  Child Pages ","excerpt":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶとい …","ref":"/tech-notes/a/program/lang/","title":"プログラム言語"},{"body":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使われている。\n20ページ以上のドキュメントサイトを作るときに向いている、と謳っている。\n多言語対応しており、プロダクトのバージョニングも考慮されている。\nDocumentation https://www.docsy.dev/docs/\nGetting Started https://www.docsy.dev/docs/getting-started/\nHugoの拡張版が必要。\nこれはSCSSを使っているためのようだ。\n参考:\n Error building site: POSTCSS: failed to transform \u0026quot;scss/main.css\u0026quot; · Issue #235 · google/docsy  デモサイトのソースをcloneして使う ふつうのHugo Themeなら、 hugo new site してconfig.tomlでthemeを指定すれば大体それっぽく動くのだけど、Docsyはやや作りが複雑なようなので、Exampleサイトのソースを再利用した方が早そう。\ngit clone https://github.com/google/docsy-example.git mydocs cd mydocs git submodule update --init --recursive ","excerpt":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使 …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/docsy/","title":"Docsy"},{"body":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発になっていくようだ。\nhttps://github.com/GitbookIO/gitbook\n ⚠️ Deprecation warning\nAs the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.\nAll content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.\nContent hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation.\n Documentation  https://docs.gitbook.com/ \u0026hellip; クラウドサービス向け Introduction | GitBook.com Documentation https://github.com/GitbookIO/gitbook/tree/master/docs \u0026hellip; たぶんOSSツールチェインのドキュメントはもうここを読むしかない。  Plugins 目次生成系:\n Package - gitbook-plugin-page-toc zanfab/gitbook-plugin-intopic-toc: GitBook Plugin to add inline table of contents (TOC) to each page using sticky and scrollspy effects. billryan/gitbook-plugin-etoc: Elegant toc plugin for GitBook  参考:\n GitBookによるドキュメント作成 - Qiita  ","excerpt":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発 …","ref":"/tech-notes/a/software/gitbook/","title":"GitBook"},{"body":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ページの追加 https://themes.gohugo.io//theme/hugo-theme-learn/en/cont/archetypes/ を参照。\n# Chapterページ hugo new path/to/chapter/_index.md --kind chapter # 普通のページ hugo new path/to/page.md  NOTE パスは content/ からの相対パス。  拡張記法 いくつかHugoの機能を拡張して便利記法を提供してくれているのかな？\nShortcodesに紹介されている。\n Mermaidによるフローチャート Hugoのサイト設定変数参照 etc.  などの機能がある。\n以下は例:\n注釈 {{% notice note %}} A notice disclaimer {{% /notice %}} note 以外に、 info, tip, warning が使える。\n","excerpt":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ペー …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/learn/","title":"LEARN"},{"body":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自作のテーマを載せるには、 https://github.com/gohugoio/hugoThemes/blob/master/README.md#adding-a-theme-to-the-list のガイドに従ってコントリビュートすると良い。\nChild Pages ","excerpt":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自 …","ref":"/tech-notes/a/software/static-site-generator/hugo/theme/","title":"Themes（テーマ）"},{"body":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started Content Management  Front Matter \u0026hellip; ページに対して付けることができるメタデータ   :  Getting Started Install 拡張版のインストール 通常版では、SASS/SCSSサポートがついていないので、必要であれば明示的に拡張版をインストールしないといけない。\n参考:\n Themes \u0026gt; Docsy [Hugo]Hugoの通常バージョンとExtendedバージョンとの違い[memo] | 鈍色スイッチ  バイナリをインストール GitHub Releasesから _extended 付きのバイナリを取得する。\nソースからインストール git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended Linux Snapの場合:\nsnap install hugo --channel=extended Quickstart # 新しくサイトを作る hugo new site your-new-site # テーマを用意する cd your-new-site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # コンテンツを作成する hugo new posts/my-first-post.md # hugo serverを起動 hugo server -D ## -D を付けることで draft のページも表示される Child Pages ","excerpt":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started Content …","ref":"/tech-notes/a/software/static-site-generator/hugo/","title":"Hugo"},{"body":"","excerpt":"","ref":"/tech-notes/a/software/static-site-generator/","title":"静的サイトジェネレーター"},{"body":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。\n参考:\n HugoのビルドをGithub Actionで自動化する - 1ミリもわからん GitHub Actions による GitHub Pages への自動デプロイ - Qiita  …で、前々から目をつけていたHugoのテーマ「LEARN」を使うことにした。\nGoogleが去年公開したDocsyというテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。\nLEARNで気に入らなかったところ 少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。\n chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが） 検索が妙にヒットしすぎる ページの目次がちょっとわかりにくい。慣れれば問題ないけど  GitBookを試してみたけど、OSS版は先行きが微妙 GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。\n詳しくはSoftware \u0026gt; GitBookに書いた。\n手順:\nnpm install -g gitbook-cli mkdir new-docs cd $_ gitbook init gitbook serve 参考にした記事:\n GitBookによるドキュメント作成 - Qiita GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと gitbookの使い方 - Qiita  結局、Docsyへ azuさんがGitBookからDocusaurusに移行していたので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。\n4/26 プロフィールサイトのgulpがつらい 昨日、Docsyを扱うにあたって、UbuntuマシンのNode.jsをv8 -\u0026gt; v12に上げた。\nReferenceError: primordials is not defined 今日、プロフィールサイト https://progrhy.me の編集をしようとそのまま作業していたら、次とほぼ同じ問題に遭遇した。\n Node.js v12にアップデートするとgulp v4でもfs.jsで「ReferenceError: primordials is not defined」エラーが発生 - 毎日へっぽこ  自分の環境で問題になったのは natives module.\n% gulp fs.js:35 } = primordials; ^ ReferenceError: primordials is not defined at fs.js:35:5 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54: 10) at Object.\u0026lt;anonymous\u0026gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra ceful-fs/fs.js:1:37) at Module._compile (internal/modules/cjs/loader.js:1156:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:1176:10) at Module.load (internal/modules/cjs/loader.js:1000:32) at Function.Module._load (internal/modules/cjs/loader.js:899:14) at Module.require (internal/modules/cjs/loader.js:1042:19) at require (internal/modules/cjs/helpers.js:77:18) 自分の場合も、上の記事と同じように、 package-lock.json 内に graceful-fs のv3系への依存があった。\nまた、依存の解消は難しいようだった。\n前回の挑戦から、gulpのバージョンアップは今のところ諦めているので、Node.jsのバージョンをv10系に下げることにした。\nReferenceError: internalBinding is not defined 次に出くわしたのは下のエラー:\n gulp利用時に「ReferenceError: internalBinding is not defined」のエラー - なるの備忘録  % gulp internal/util/inspect.js:31 const types = internalBinding('types'); ^ ReferenceError: internalBinding is not defined at internal/util/inspect.js:31:15 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12) at util.js:25:21 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at require (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:110:12) at fs.js:42:21 at req_ (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:137:5) at Object.req [as require] (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/natives/index.js:54: 10) at Object.\u0026lt;anonymous\u0026gt; (/home/progrhyme/my/repos/progrhyme.github.io/node_modules/vinyl-fs/node_modules/gra ceful-fs/fs.js:1:37) 上の記事にあったように、 npm i natives@latest --no-save を実行したら解消した。\n","excerpt":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n …","ref":"/tech-notes/a/memo/20200425/","title":"2020-04-25"},{"body":"  #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_1920x1080_fill_q75_catmullrom_top.jpg); } }  progrhyme\u0026#39;s Tech Notes IT技術についての公開メモ帳\nExplore Site   View Repository          ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/tech-notes/","title":"progrhyme's Tech Notes"},{"body":"","excerpt":"","ref":"/tech-notes/search/","title":"検索結果"}]