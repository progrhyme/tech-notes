[{"body":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE progrhyme’s Tech Wikiの後継となるサイトです。  作り方 静的サイトジェネレーターのHugoを使っています。\nテーマはDocsyです。\nソースコードはGitHubにあります。\nページ構成について 雑なメモはMemorandumの下に置いています。\nそれ以外も雑で気まぐれですが、なんとなく分類しています（予定）。 ときどきページ構成を工事することもあります。\nAbout Me  Profile Site Twitter: @progrhyme GitHub: @progrhyme progrhyme\u0026rsquo;s tech blog  姉妹サイト  progrhyme\u0026rsquo;s Wiki \u0026hellip; こちらもゆくゆくはGoogleサイト外に移行するかもしれませんが、2020-04-25現在は未定です。  ","excerpt":"IT技術についての個人的なメモを書くサイトです。\n主に自分用のものですが、閲覧は自由です。\n誤りなどありましたら、なんらかの方法でお知らせ頂ければ対応するかもしれません。\nNOTE …","ref":"/tech-notes/_/","title":"progrhyme's Tech Notes"},{"body":"","excerpt":"","ref":"/tech-notes/_/memo/","title":"Memorandum"},{"body":"","excerpt":"","ref":"/tech-notes/_/software/","title":"Software"},{"body":"","excerpt":"","ref":"/tech-notes/_/program/","title":"プログラミング"},{"body":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var privateVar string = \u0026#34;this is private\u0026#34; // 外部から見えない var PublicVar string = \u0026#34;this is public\u0026#34; // 外部から見える 参考:\n Go言語のスコープについて - ryochack.clipboard  データ型 https://golang.org/ref/spec#Types\n配列・スライス 配列は固定長。スライスは可変長。\na := [...]int{1, 2, 3} // 配列  s1 := []int{1, 2, 3} // スライス s2 := []int{5, 6, 7} // スライスの結合 s1 = append(s1, 4) s1 = append(s1, s2...) // スライス同士の結合では \u0026#34;...\u0026#34; が必要 \u0026ldquo;Slicing\u0026quot;というテクニックで配列をスライスに変換できる。\na := [5]byte{\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;} s := a[:] // aを参照するスライス 参考:\n Go Slices: usage and internals - The Go Blog Go言語のArrayとSliceについて - done is better than perfect Goでsliceに要素追加, slice同士の結合 - Qiita  map 初期値はnilで、データを入れようとするとパニックが起こるので、事前に割当てが必要。\n// NG var ages map[string]int ages[\u0026#34;carol\u0026#34;] = 21 // OK var ages map[string]int ages = make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 // OK ages := make(map[string]int) ages[\u0026#34;carol\u0026#34;] = 21 要素取得時のヒット検査 age, ok := ages[\u0026#34;bob\u0026#34;] if ok { // hit } else { // miss } 構造体 初期化 // 例 type Foo struct { Name string Age int } // (1) f := Foo{} f.Name = \u0026#34;foo\u0026#34; f.Age = 5 // (2) f := Foo{\u0026#34;foo\u0026#34;, 5} // 全てのフィールドの指定が必要  // (3) f := Foo{Age: 5, Name: \u0026#34;foo\u0026#34;} // 任意フィールドの省略が可能。順番も入れ替え可能 もし構造体に初期値を設定したい場合、コンストラクタ的な専用の関数を作る必要があるっぽい。\n参考:\n [Go] 構造体の初期化方法まとめ - Qiita 【Go】structにデフォルトの値を設定したい - /dev/null  日付・時刻 日時フォーマット Go言語の日時のフォーマット関数（timeパッケージのfunc (Time) Format)）に与えられる引数は、2006-01-02T15:04:05（月曜）の日時となっている。\nこれはアメリカで時刻を表記する際の順番で、1月2日午後3時4分5秒2006年となり、わかりやすかったからだそうだ。\n参考:\n Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？ - Qiita  ポインタ 参考:\n Goでxxxのポインタを取っているプログラムはだいたい全部間違っている - Qiita  goroutine OSのネイティブスレッドより扱いやすくしたもの。 スレッドとファイバーの良いとこ取り。 go というキーワードを付けるとgoroutineが作られる。\nExamples:\n// 別のgoroutineを作って既存関数を実行 go Function() // 別のgoroutineを作って、無名関数を実行 go func() { // goroutine内で実行したい処理 } 参考:\n Go言語で非同期処理の結果を受け取る - Qiita  チャネル SYNOPSIS:\n// バッファなし tasks := make(chan string) // バッファ付き tasks := make(chan string, 10) // データ送信 tasks \u0026lt;- \u0026#34;cmake ..\u0026#34; tasks \u0026lt;- \u0026#34;cmake . --build Debug\u0026#34; // データ受信 task := \u0026lt;-tasks // データ受信 + クローズ判定 task, ok := \u0026lt;-tasks // データを読み捨てる \u0026lt;-wait Examples:\n https://gobyexample.com/channels  select文 複数のチャネルを待機する場合に使う。\nExamples:\n// ブロックせずに受信し、かつ、チャネルがクローズ済みかどうかチェックする select { case v, ok := \u0026lt;- ch: if ok { fmt.Println(v) } else { fmt.Println(\u0026#34;closed\u0026#34;) } default: fmt.Println(\u0026#34;no value\u0026#34;) } // ブロックせずに送信 select { case ch \u0026lt;- v: fmt.Println(\u0026#34;sent\u0026#34;) default: fmt.Println(\u0026#34;no capacity\u0026#34;) } 参考:\n Go言語でチャネルとselect - Qiita select - はじめてのGo言語  文法 ループ Examples:\nfor { // 無限ループ } for i := 1; i \u0026lt; 100; i++ { // iが[1, 100)の間 } // collection要素のイテレーション dayOfWeeks := [...]string{\u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;, \u0026#34;日\u0026#34;} for arrayIndex, dayOfWeek := range dayOfWeeks { fmt.Printf(\u0026#34;%d番目の曜日は%s曜日です。\\n\u0026#34;, arrayIndex + 1, dayOfWeek) } ※mapをイテレーションする場合、取り出し順はランダムになる。\n参考:\n 繰り返し - はじめてのGo言語  パッケージ init()関数による初期化  ソースファイルに1つ func init() を記述できる ソースファイル読み込み時に1回実行される importされるpackageのinit()が先に実行される  pがqをimportしているとき、pのinit()より先にqのinit()が完了している mainパッケージのinit()が最後に実行される    参考:\n Effective Go - golang.jp  ","excerpt":"リファレンス https://golang.org/ref/spec\n変数 https://golang.org/ref/spec#Variables\nパッケージ変数 package foo var …","ref":"/tech-notes/_/program/langs/go/spec/","title":"言語仕様"},{"body":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html   http://golang-jp.org/ \u0026hellip; golang.orgの日本語訳プロジェクト  3rd Party がまとめた資料  GoのためのGo Go Language Programs, Tutorial, Articles and Examples  Play Ground Sandbox https://play.golang.org/\n記事  6年間におけるGoのベストプラクティス | プログラミング | POSTD  開発ツール goimports https://godoc.org/golang.org/x/tools/cmd/goimports\nInstall:\ngo get golang.org/x/tools/cmd/goimports goimports というコマンドが入る。\ngo fmt のときに使われてないpkgの import 文を削除してくれる。\nGoglandだと Settings \u0026gt; Go \u0026gt; On Save \u0026gt; On save run で設定できる。\n参考:\n goのimportを自動的に追加/削除してくれる「goimports」を試してみた - Misc Notes Gogland で保存時に go fmt を走らせる - Qiita  ビルトイン関数 append https://golang.org/pkg/builtin/#append\nfunc append(slice []Type, elems ...Type) []Type\nsliceに要素、またはsliceを結合し、新たなsliceを返す。\nslice = append(slice, elem1, elem2) slice = append(slice, anotherSlice...) Topics vendoring アプリケーションなどで、依存パッケージを管理する仕組み。\nGo 1.6から正式にサポートされた。\nGo 1.5ではexperimental扱いで、有効化するには環境変数 GO15VENDOREXPERIMENT を設定してコンパイルする必要がある。\nvendoringのためのツールとして、glideやgomなどがある。\n参考:\n 今更だけどGoのVendoringについて思いをはせる - Qiita go vendoring - 隙あらば寝る Glide で Go 言語のパッケージ管理と vendoring - Librabuch  enum Goにはenumがない。\nintの独自型を定義するのがイディオムになっている。\ntype Fruit int const ( Apple Fruit = iota Orange Banana ) var myFruit Fruit この独自型に対して String() メソッドを実装しておくと、名前が引けて便利:\nfunc (f Fruit) String() string { switch f { case Apple: return \u0026#34;Apple\u0026#34; case Orange: return \u0026#34;Orange\u0026#34; case Banana: return \u0026#34;Banana\u0026#34; default: return \u0026#34;Unknown\u0026#34; } } golang.org/x/tools/cmd/stringer で String() メソッドを含むコードを自動生成することもできる。\n参考:\n GoのEnumイディオム - Qiita Big Sky :: Re: GoLangでJavaのenumっぽいライブラリ作った話 Ten Useful Techniques in Go – Fatih Arslan https://godoc.org/golang.org/x/tools/cmd/stringer  build https://golang.org/pkg/go/build/\nBuild Constraints という機能は「build tag」としても知られている。\nこんなの:\n// (A) // +build foo  // (B) // +build !foo (A) go build -tags=foo でビルドされる。\n(B) go build でビルドされる。\n参考:\n go build -tagsを使ってRelease/Debugを切り替える - flyhigh  プロファイリング  runtime/pprofという標準pkgを使うのが基本な感じ。  その内 標準パッケージ - progrhyme\u0026rsquo;s Tech Wiki に書くと思う。   runtimeのデバッグに役立つ環境変数の話:  GODEBUG | Dave Cheney    参考:\n Profiling Go Programs - The Go Blog \u0026hellip; pprof golangで書かれたプログラムのメモリ使用状況を見る - hakobe-blog ♨ \u0026hellip; pprof, net/http/pprof golang profiling の基礎 \u0026hellip; pprof他 golangパフォーマンス3: mapとGC - Qiita  Child Pages ","excerpt":"Getting Started ドキュメント  https://golang.org/doc/  https://golang.org/doc/effective_go.html …","ref":"/tech-notes/_/program/langs/go/","title":"Go"},{"body":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶということがどういうことかをまとめる。\n 文法  ソースコードの構造、形式  ステートメント  区切り文字   コメント 式 演算子 キーワード リテラル  数値, 文字列, ヒアドキュメント, etc.   その他記号   数値演算 プリミティブな文字列処理  結合, 分解, 書式, \u0026hellip;   型 制御構文  ループ 条件分岐   例外処理 関数 構造体, 拡張型 オブジェクト 外部ファイルの利用   言語機能  基本的なデータ型  配列 連想配列(マッピング構造体, ハッシュ)   日付、時刻、時間 標準入出力 ファイル入出力 テキスト処理  正規表現 エンコーディング マルチバイト文字対応   オブジェクト指向プログラミング  クラス, メソッド 継承 Mixin オーバーライド, オーバーロード   バイナリ処理 並行処理 関数型プログラミング  高階関数 curry化 クロージャ, 無名関数, lambda式   ライブラリの利用  標準ライブラリ 3rd Partyのライブラリ   テスト メタプログラミング  リフレクション ジェネリクス     実行  対話IFによる実行  REPL     テスト  単体テスト フレームワーク, ライブラリ   典型的な問題解決  乱数 典型的アルゴリズム  ソート, ハッシュ表, etc.   典型的データ構造  連結リスト, 木, グラフ, etc.     プログラミング手法  ダックタイピング   デバッグ プロファイリング 内部構造  実行プロセス  スレッド   コンパイラ インタープリタ VM GC  アルゴリズム     ソフトウェア開発  CLI バッチ処理 デーモン ライブラリ Webアプリケーション システムプログラミング etc.   開発環境・ツール  エディタ IDE   コミュニティ  Child Pages ","excerpt":"Topics 変数や関数の命名 便利なサービス:\n https://codic.jp/  参考になる記事:\n ブール値を返すメンバー関数の命名規則  言語の習得 a to z ある言語を一通り学ぶとい …","ref":"/tech-notes/_/program/langs/","title":"プログラム言語"},{"body":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使われている。\n20ページ以上のドキュメントサイトを作るときに向いている、と謳っている。\n多言語対応しており、プロダクトのバージョニングも考慮されている。\nDocumentation https://www.docsy.dev/docs/\nGetting Started https://www.docsy.dev/docs/getting-started/\nHugoの拡張版が必要。\nこれはSCSSを使っているためのようだ。\n参考:\n Error building site: POSTCSS: failed to transform \u0026quot;scss/main.css\u0026quot; · Issue #235 · google/docsy  デモサイトのソースをcloneして使う ふつうのHugo Themeなら、 hugo new site してconfig.tomlでthemeを指定すれば大体それっぽく動くのだけど、Docsyはやや作りが複雑なようなので、Exampleサイトのソースを再利用した方が早そう。\ngit clone https://github.com/google/docsy-example.git mydocs cd mydocs git submodule update --init --recursive ","excerpt":"https://www.docsy.dev/\nGoogleが2019年に公開したHugoのテーマ。\n事例がここに載っている。\nkubeflow, Knative, Apache Airflowなどで使 …","ref":"/tech-notes/_/software/static-site-generator/hugo/themes/docsy/","title":"Docsy"},{"body":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発になっていくようだ。\nhttps://github.com/GitbookIO/gitbook\n ⚠️ Deprecation warning\nAs the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.\nAll content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.\nContent hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation.\n Documentation  https://docs.gitbook.com/ \u0026hellip; クラウドサービス向け Introduction | GitBook.com Documentation https://github.com/GitbookIO/gitbook/tree/master/docs \u0026hellip; たぶんOSSツールチェインのドキュメントはもうここを読むしかない。  Plugins 目次生成系:\n Package - gitbook-plugin-page-toc zanfab/gitbook-plugin-intopic-toc: GitBook Plugin to add inline table of contents (TOC) to each page using sticky and scrollspy effects. billryan/gitbook-plugin-etoc: Elegant toc plugin for GitBook  参考:\n GitBookによるドキュメント作成 - Qiita  ","excerpt":"Markdownで管理されたドキュメントからHTML, PDF, ePUBに簡単に製本できるツール。\nただし、2020-04-25現在、クラウドサービスに注力するそうで、OSSのツールチェインは不活発 …","ref":"/tech-notes/_/software/gitbook/","title":"GitBook"},{"body":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ページの追加 https://themes.gohugo.io//theme/hugo-theme-learn/en/cont/archetypes/ を参照。\n# Chapterページ hugo new path/to/chapter/_index.md --kind chapter # 普通のページ hugo new path/to/page.md  NOTE パスは content/ からの相対パス。  拡張記法 いくつかHugoの機能を拡張して便利記法を提供してくれているのかな？\nShortcodesに紹介されている。\n Mermaidによるフローチャート Hugoのサイト設定変数参照 etc.  などの機能がある。\n以下は例:\n注釈 {{% notice note %}} A notice disclaimer {{% /notice %}} note 以外に、 info, tip, warning が使える。\n","excerpt":"https://learn.netlify.com/en/\nドキュメンテーションに向いた高機能なHugoのテーマ。\nコンテンツ管理 ペー …","ref":"/tech-notes/_/software/static-site-generator/hugo/themes/learn/","title":"LEARN"},{"body":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自作のテーマを載せるには、 https://github.com/gohugoio/hugoThemes/blob/master/README.md#adding-a-theme-to-the-list のガイドに従ってコントリビュートすると良い。\nChild Pages ","excerpt":"Hugoはテーマによって、見た目やレイアウトなどをカスタマイズすることができる。\nhttps://themes.gohugo.io/ がテーマのサイトで、様々なテーマが紹介されている。\nこのサイトに自 …","ref":"/tech-notes/_/software/static-site-generator/hugo/themes/","title":"Themes（テーマ）"},{"body":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started Content Management  Front Matter \u0026hellip; ページに対して付けることができるメタデータ   :  Getting Started Install 拡張版のインストール 通常版では、SASS/SCSSサポートがついていないので、必要であれば明示的に拡張版をインストールしないといけない。\n参考:\n Themes \u0026gt; Docsy [Hugo]Hugoの通常バージョンとExtendedバージョンとの違い[memo] | 鈍色スイッチ  バイナリをインストール GitHub Releasesから _extended 付きのバイナリを取得する。\nソースからインストール git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended Linux Snapの場合:\nsnap install hugo --channel=extended Quickstart # 新しくサイトを作る hugo new site your-new-site # テーマを用意する cd your-new-site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # コンテンツを作成する hugo new posts/my-first-post.md # hugo serverを起動 hugo server -D ## -D を付けることで draft のページも表示される Child Pages ","excerpt":"Go言語製の高速な静的サイトジェネレーター。\nDocumentation https://gohugo.io/documentation/\n Getting Started Content …","ref":"/tech-notes/_/software/static-site-generator/hugo/","title":"Hugo"},{"body":"","excerpt":"","ref":"/tech-notes/_/software/static-site-generator/","title":"静的サイトジェネレーター"},{"body":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n今時はhugoで作ったGitHub PagesのサイトはGitHub Actionで自動更新できるようだ。\n参考:\n HugoのビルドをGithub Actionで自動化する - 1ミリもわからん GitHub Actions による GitHub Pages への自動デプロイ - Qiita  …で、前々から目をつけていたHugoのテーマ「LEARN」を使うことにした。\nGoogleが去年公開したDocsyというテーマでもよさそうだと思ったけど、LEARNの方は一度軽く試したこともあったので、安心感があった。\nLEARNで気に入らなかったところ 少しHugoのLEARNテーマでサイトを作っていたのだけど、少し不満が出てきた。\n chapterページを作らないといけなくて、自由度が阻害されるように感じた。（自分でchapterページをカスタマイズするというやり方もあるが） 検索が妙にヒットしすぎる ページの目次がちょっとわかりにくい。慣れれば問題ないけど  GitBookを試してみたけど、OSS版は先行きが微妙 GitBookでもいいんじゃないかと思って試していたのだけど、残念なことに気がついた。\n詳しくはSoftware \u0026gt; GitBookに書いた。\n手順:\nnpm install -g gitbook-cli mkdir new-docs cd $_ gitbook init gitbook serve 参考にした記事:\n GitBookによるドキュメント作成 - Qiita GitBookをGitHub Pagesにアップロード | 酒と涙とRubyとRailsと gitbookの使い方 - Qiita  結局、Docsyへ azuさんがGitBookからDocusaurusに移行していたので、それもいいかもと思ったけど、見た目がDocsyに似ていたのでもうDocsyでいいだろうと思った。\n","excerpt":"4/25 技術メモ用のサイトをHugoで新設することにした 来年末には旧版のGoogleサイトが使えなくなるそうなので、早く移行しないとなー、と前々から思っていた。 今回、ようやく重い腰を上げた形。\n …","ref":"/tech-notes/_/memo/20200425/","title":"2020-04-25"},{"body":"  #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/tech-notes/featured-background_hu010825fc1acc2b06122e03e2fe511e22_325962_1920x1080_fill_q75_catmullrom_top.jpg); } }  progrhyme\u0026#39;s Tech Notes IT技術についての公開メモ帳\nExplore Site   View Repository          ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/tech-notes/","title":"progrhyme's Tech Notes"},{"body":"","excerpt":"","ref":"/tech-notes/search/","title":"検索結果"}]